// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_codeRepl113_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_IN_M_real_address0,
        data_IN_M_real_ce0,
        data_IN_M_real_q0,
        data_IN_M_imag_address0,
        data_IN_M_imag_ce0,
        data_IN_M_imag_q0,
        xin_M_imag_address0,
        xin_M_imag_ce0,
        xin_M_imag_we0,
        xin_M_imag_d0,
        xin_M_real_address0,
        xin_M_real_ce0,
        xin_M_real_we0,
        xin_M_real_d0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [4:0] data_IN_M_real_address0;
output   data_IN_M_real_ce0;
input  [31:0] data_IN_M_real_q0;
output  [4:0] data_IN_M_imag_address0;
output   data_IN_M_imag_ce0;
input  [31:0] data_IN_M_imag_q0;
output  [4:0] xin_M_imag_address0;
output   xin_M_imag_ce0;
output   xin_M_imag_we0;
output  [31:0] xin_M_imag_d0;
output  [4:0] xin_M_real_address0;
output   xin_M_real_ce0;
output   xin_M_real_we0;
output  [31:0] xin_M_real_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] data_IN_M_real_address0;
reg data_IN_M_real_ce0;
reg[4:0] data_IN_M_imag_address0;
reg data_IN_M_imag_ce0;
reg[4:0] xin_M_imag_address0;
reg xin_M_imag_ce0;
reg xin_M_imag_we0;
reg[4:0] xin_M_real_address0;
reg xin_M_real_ce0;
reg xin_M_real_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 33'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        data_IN_M_imag_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        data_IN_M_imag_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        data_IN_M_imag_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        data_IN_M_imag_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        data_IN_M_imag_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        data_IN_M_imag_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        data_IN_M_imag_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        data_IN_M_imag_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        data_IN_M_imag_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        data_IN_M_imag_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        data_IN_M_imag_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        data_IN_M_imag_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data_IN_M_imag_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_IN_M_imag_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        data_IN_M_imag_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data_IN_M_imag_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        data_IN_M_imag_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_IN_M_imag_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_IN_M_imag_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_IN_M_imag_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_IN_M_imag_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        data_IN_M_imag_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        data_IN_M_imag_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_IN_M_imag_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_IN_M_imag_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_IN_M_imag_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_IN_M_imag_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data_IN_M_imag_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_IN_M_imag_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_imag_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_IN_M_imag_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_IN_M_imag_address0 = 64'd0;
    end else begin
        data_IN_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_IN_M_imag_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        data_IN_M_real_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        data_IN_M_real_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        data_IN_M_real_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        data_IN_M_real_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        data_IN_M_real_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        data_IN_M_real_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        data_IN_M_real_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        data_IN_M_real_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        data_IN_M_real_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        data_IN_M_real_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        data_IN_M_real_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        data_IN_M_real_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data_IN_M_real_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_IN_M_real_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        data_IN_M_real_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data_IN_M_real_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        data_IN_M_real_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_IN_M_real_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_IN_M_real_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_IN_M_real_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_IN_M_real_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        data_IN_M_real_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        data_IN_M_real_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_IN_M_real_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_IN_M_real_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_IN_M_real_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_IN_M_real_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data_IN_M_real_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_IN_M_real_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_real_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_IN_M_real_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_IN_M_real_address0 = 64'd0;
    end else begin
        data_IN_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_IN_M_real_ce0 = 1'b1;
    end else begin
        data_IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        xin_M_imag_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        xin_M_imag_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_M_imag_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_M_imag_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        xin_M_imag_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_M_imag_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_M_imag_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        xin_M_imag_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        xin_M_imag_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xin_M_imag_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xin_M_imag_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        xin_M_imag_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        xin_M_imag_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        xin_M_imag_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xin_M_imag_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        xin_M_imag_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        xin_M_imag_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        xin_M_imag_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xin_M_imag_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xin_M_imag_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        xin_M_imag_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xin_M_imag_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xin_M_imag_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        xin_M_imag_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        xin_M_imag_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_M_imag_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_M_imag_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_M_imag_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_imag_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_imag_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_imag_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_imag_address0 = 64'd0;
    end else begin
        xin_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        xin_M_imag_ce0 = 1'b1;
    end else begin
        xin_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        xin_M_imag_we0 = 1'b1;
    end else begin
        xin_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        xin_M_real_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        xin_M_real_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_M_real_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_M_real_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        xin_M_real_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_M_real_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_M_real_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        xin_M_real_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        xin_M_real_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xin_M_real_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xin_M_real_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        xin_M_real_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        xin_M_real_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        xin_M_real_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xin_M_real_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        xin_M_real_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        xin_M_real_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        xin_M_real_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xin_M_real_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xin_M_real_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        xin_M_real_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xin_M_real_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xin_M_real_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        xin_M_real_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        xin_M_real_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_M_real_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_M_real_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_M_real_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_real_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_real_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_real_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_real_address0 = 64'd0;
    end else begin
        xin_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        xin_M_real_ce0 = 1'b1;
    end else begin
        xin_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        xin_M_real_we0 = 1'b1;
    end else begin
        xin_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign xin_M_imag_d0 = data_IN_M_imag_q0;

assign xin_M_real_d0 = data_IN_M_real_q0;

endmodule //Block_codeRepl113_pr
