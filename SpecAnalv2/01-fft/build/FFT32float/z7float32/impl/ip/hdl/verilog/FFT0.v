// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FFT_stage,
        pass_check,
        index_shift,
        pass_shift,
        data_IN_M_real_address0,
        data_IN_M_real_ce0,
        data_IN_M_real_q0,
        data_IN_M_imag_address0,
        data_IN_M_imag_ce0,
        data_IN_M_imag_q0,
        data_OUT_M_real_address0,
        data_OUT_M_real_ce0,
        data_OUT_M_real_we0,
        data_OUT_M_real_d0,
        data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0,
        data_OUT_M_imag_d0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] FFT_stage;
input  [5:0] pass_check;
input  [3:0] index_shift;
input  [3:0] pass_shift;
output  [4:0] data_IN_M_real_address0;
output   data_IN_M_real_ce0;
input  [31:0] data_IN_M_real_q0;
output  [4:0] data_IN_M_imag_address0;
output   data_IN_M_imag_ce0;
input  [31:0] data_IN_M_imag_q0;
output  [4:0] data_OUT_M_real_address0;
output   data_OUT_M_real_ce0;
output   data_OUT_M_real_we0;
output  [31:0] data_OUT_M_real_d0;
output  [4:0] data_OUT_M_imag_address0;
output   data_OUT_M_imag_ce0;
output   data_OUT_M_imag_we0;
output  [31:0] data_OUT_M_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] data_IN_M_real_address0;
reg data_IN_M_real_ce0;
reg[4:0] data_IN_M_imag_address0;
reg data_IN_M_imag_ce0;
reg[4:0] data_OUT_M_real_address0;
reg data_OUT_M_real_ce0;
reg data_OUT_M_real_we0;
reg[31:0] data_OUT_M_real_d0;
reg[4:0] data_OUT_M_imag_address0;
reg data_OUT_M_imag_ce0;
reg data_OUT_M_imag_we0;
reg[31:0] data_OUT_M_imag_d0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] W_M_real_address0;
reg    W_M_real_ce0;
wire   [31:0] W_M_real_q0;
wire   [3:0] W_M_imag_address0;
reg    W_M_imag_ce0;
wire   [31:0] W_M_imag_q0;
reg   [31:0] reg_245;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_253;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] reg_261;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] reg_268;
wire   [31:0] pass_shift_cast_fu_275_p1;
reg   [31:0] pass_shift_cast_reg_409;
wire   [31:0] index_shift_cast_fu_279_p1;
reg   [31:0] index_shift_cast_reg_414;
wire   [31:0] FFT_stage_cast1_fu_283_p1;
reg   [31:0] FFT_stage_cast1_reg_419;
wire   [31:0] zext_ln33_fu_297_p1;
reg   [31:0] zext_ln33_reg_424;
wire   [31:0] zext_ln35_fu_311_p1;
reg   [31:0] zext_ln35_reg_429;
wire   [4:0] i_fu_321_p2;
reg   [4:0] i_reg_437;
wire    ap_CS_fsm_state2;
wire   [31:0] index_fu_327_p2;
reg   [31:0] index_reg_442;
wire   [0:0] icmp_ln26_fu_315_p2;
wire  signed [31:0] Ulimit_fu_337_p2;
reg  signed [31:0] Ulimit_reg_447;
wire   [31:0] select_ln33_fu_373_p3;
reg   [31:0] select_ln33_reg_453;
wire   [31:0] butterfly_pass_2_fu_381_p3;
reg   [31:0] butterfly_pass_2_reg_458;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln30_1_fu_398_p1;
reg  signed [63:0] sext_ln30_1_reg_473;
reg   [31:0] p_r_M_real_reg_489;
reg   [31:0] p_r_M_imag_reg_495;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] tmp_i_i_reg_501;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_233_p2;
reg   [31:0] tmp_3_i_i_reg_506;
wire   [31:0] grp_fu_237_p2;
reg   [31:0] tmp_5_i_i_reg_511;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_6_i_i_reg_516;
wire  signed [63:0] sext_ln31_fu_404_p1;
reg  signed [63:0] sext_ln31_reg_521;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] complex_M_real_writ_1_reg_537;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] complex_M_imag_writ_1_reg_542;
reg   [31:0] butterfly_span_0_reg_180;
wire    ap_CS_fsm_state20;
reg   [31:0] butterfly_pass_0_reg_191;
reg   [4:0] i_0_reg_202;
wire  signed [63:0] sext_ln30_fu_393_p1;
wire    ap_CS_fsm_state19;
reg   [31:0] grp_fu_213_p0;
reg   [31:0] grp_fu_213_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
reg   [31:0] grp_fu_217_p0;
reg   [31:0] grp_fu_217_p1;
wire    ap_CS_fsm_state5;
wire   [4:0] trunc_ln33_fu_287_p1;
wire   [4:0] add_ln33_fu_291_p2;
wire   [4:0] trunc_ln35_fu_301_p1;
wire   [4:0] add_ln35_fu_305_p2;
wire   [31:0] shl_ln28_fu_332_p2;
wire   [0:0] icmp_ln35_fu_354_p2;
wire   [31:0] butterfly_pass_fu_359_p2;
wire   [0:0] icmp_ln33_fu_343_p2;
wire   [31:0] butterfly_span_fu_348_p2;
wire   [31:0] butterfly_pass_1_fu_365_p3;
wire   [31:0] Llimit_fu_389_p2;
reg   [1:0] grp_fu_217_opcode;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

FFT0_W_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
W_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_M_real_address0),
    .ce0(W_M_real_ce0),
    .q0(W_M_real_q0)
);

FFT0_W_M_imag #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
W_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_M_imag_address0),
    .ce0(W_M_imag_ce0),
    .q0(W_M_imag_q0)
);

FFT_fsub_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_213_p0),
    .din1(grp_fu_213_p1),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

FFT_faddfsub_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_faddfsub_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_217_p0),
    .din1(grp_fu_217_p1),
    .opcode(grp_fu_217_opcode),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

FFT_fadd_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(reg_261),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

FFT_fadd_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_253),
    .din1(reg_268),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_489),
    .din1(reg_245),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_495),
    .din1(reg_253),
    .ce(1'b1),
    .dout(grp_fu_233_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_495),
    .din1(reg_245),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_489),
    .din1(reg_253),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        butterfly_pass_0_reg_191 <= butterfly_pass_2_reg_458;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        butterfly_pass_0_reg_191 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        butterfly_span_0_reg_180 <= select_ln33_reg_453;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        butterfly_span_0_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_0_reg_202 <= i_reg_437;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_202 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        FFT_stage_cast1_reg_419[5 : 0] <= FFT_stage_cast1_fu_283_p1[5 : 0];
        index_shift_cast_reg_414[3 : 0] <= index_shift_cast_fu_279_p1[3 : 0];
        pass_shift_cast_reg_409[3 : 0] <= pass_shift_cast_fu_275_p1[3 : 0];
        zext_ln33_reg_424[4 : 0] <= zext_ln33_fu_297_p1[4 : 0];
        zext_ln35_reg_429[4 : 0] <= zext_ln35_fu_311_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_315_p2 == 1'd0))) begin
        Ulimit_reg_447 <= Ulimit_fu_337_p2;
        butterfly_pass_2_reg_458 <= butterfly_pass_2_fu_381_p3;
        index_reg_442 <= index_fu_327_p2;
        select_ln33_reg_453 <= select_ln33_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        complex_M_imag_writ_1_reg_542 <= grp_fu_225_p2;
        complex_M_real_writ_1_reg_537 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_437 <= i_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_r_M_imag_reg_495 <= W_M_imag_q0;
        p_r_M_real_reg_489 <= W_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_245 <= data_IN_M_real_q0;
        reg_253 <= data_IN_M_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_261 <= grp_fu_213_p2;
        reg_268 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln30_1_reg_473 <= sext_ln30_1_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sext_ln31_reg_521 <= sext_ln31_fu_404_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_3_i_i_reg_506 <= grp_fu_233_p2;
        tmp_5_i_i_reg_511 <= grp_fu_237_p2;
        tmp_6_i_i_reg_516 <= grp_fu_241_p2;
        tmp_i_i_reg_501 <= grp_fu_229_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        W_M_imag_ce0 = 1'b1;
    end else begin
        W_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        W_M_real_ce0 = 1'b1;
    end else begin
        W_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_315_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_315_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_IN_M_imag_address0 = sext_ln31_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_imag_address0 = sext_ln30_1_fu_398_p1;
    end else begin
        data_IN_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3))) begin
        data_IN_M_imag_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_IN_M_real_address0 = sext_ln31_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_real_address0 = sext_ln30_1_fu_398_p1;
    end else begin
        data_IN_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3))) begin
        data_IN_M_real_ce0 = 1'b1;
    end else begin
        data_IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_OUT_M_imag_address0 = sext_ln31_reg_521;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_OUT_M_imag_address0 = sext_ln30_1_reg_473;
    end else begin
        data_OUT_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        data_OUT_M_imag_ce0 = 1'b1;
    end else begin
        data_OUT_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_OUT_M_imag_d0 = complex_M_imag_writ_1_reg_542;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_OUT_M_imag_d0 = reg_268;
    end else begin
        data_OUT_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        data_OUT_M_imag_we0 = 1'b1;
    end else begin
        data_OUT_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_OUT_M_real_address0 = sext_ln31_reg_521;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_OUT_M_real_address0 = sext_ln30_1_reg_473;
    end else begin
        data_OUT_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        data_OUT_M_real_ce0 = 1'b1;
    end else begin
        data_OUT_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_OUT_M_real_d0 = complex_M_real_writ_1_reg_537;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_OUT_M_real_d0 = reg_261;
    end else begin
        data_OUT_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        data_OUT_M_real_we0 = 1'b1;
    end else begin
        data_OUT_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_213_p0 = reg_245;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_213_p0 = tmp_i_i_reg_501;
    end else begin
        grp_fu_213_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_213_p1 = reg_261;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_213_p1 = tmp_3_i_i_reg_506;
    end else begin
        grp_fu_213_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_217_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_217_opcode = 2'd0;
    end else begin
        grp_fu_217_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_217_p0 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_217_p0 = tmp_5_i_i_reg_511;
    end else begin
        grp_fu_217_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_217_p1 = reg_268;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_217_p1 = tmp_6_i_i_reg_516;
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_stage_cast1_fu_283_p1 = FFT_stage;

assign Llimit_fu_389_p2 = ($signed(Ulimit_reg_447) + $signed(FFT_stage_cast1_reg_419));

assign Ulimit_fu_337_p2 = (butterfly_span_0_reg_180 + shl_ln28_fu_332_p2);

assign W_M_imag_address0 = sext_ln30_fu_393_p1;

assign W_M_real_address0 = sext_ln30_fu_393_p1;

assign add_ln33_fu_291_p2 = ($signed(5'd31) + $signed(trunc_ln33_fu_287_p1));

assign add_ln35_fu_305_p2 = ($signed(5'd31) + $signed(trunc_ln35_fu_301_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign butterfly_pass_1_fu_365_p3 = ((icmp_ln35_fu_354_p2[0:0] === 1'b1) ? butterfly_pass_fu_359_p2 : 32'd0);

assign butterfly_pass_2_fu_381_p3 = ((icmp_ln33_fu_343_p2[0:0] === 1'b1) ? butterfly_pass_0_reg_191 : butterfly_pass_1_fu_365_p3);

assign butterfly_pass_fu_359_p2 = (butterfly_pass_0_reg_191 + 32'd1);

assign butterfly_span_fu_348_p2 = (butterfly_span_0_reg_180 + 32'd1);

assign i_fu_321_p2 = (i_0_reg_202 + 5'd1);

assign icmp_ln26_fu_315_p2 = ((i_0_reg_202 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_343_p2 = (($signed(butterfly_span_0_reg_180) < $signed(zext_ln33_reg_424)) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_354_p2 = (($signed(butterfly_pass_0_reg_191) < $signed(zext_ln35_reg_429)) ? 1'b1 : 1'b0);

assign index_fu_327_p2 = butterfly_span_0_reg_180 << index_shift_cast_reg_414;

assign index_shift_cast_fu_279_p1 = index_shift;

assign pass_shift_cast_fu_275_p1 = pass_shift;

assign select_ln33_fu_373_p3 = ((icmp_ln33_fu_343_p2[0:0] === 1'b1) ? butterfly_span_fu_348_p2 : 32'd0);

assign sext_ln30_1_fu_398_p1 = $signed(Llimit_fu_389_p2);

assign sext_ln30_fu_393_p1 = $signed(index_reg_442);

assign sext_ln31_fu_404_p1 = Ulimit_reg_447;

assign shl_ln28_fu_332_p2 = butterfly_pass_0_reg_191 << pass_shift_cast_reg_409;

assign trunc_ln33_fu_287_p1 = FFT_stage[4:0];

assign trunc_ln35_fu_301_p1 = pass_check[4:0];

assign zext_ln33_fu_297_p1 = add_ln33_fu_291_p2;

assign zext_ln35_fu_311_p1 = add_ln35_fu_305_p2;

always @ (posedge ap_clk) begin
    pass_shift_cast_reg_409[31:4] <= 28'b0000000000000000000000000000;
    index_shift_cast_reg_414[31:4] <= 28'b0000000000000000000000000000;
    FFT_stage_cast1_reg_419[31:6] <= 26'b00000000000000000000000000;
    zext_ln33_reg_424[31:5] <= 27'b000000000000000000000000000;
    zext_ln35_reg_429[31:5] <= 27'b000000000000000000000000000;
end

endmodule //FFT0
