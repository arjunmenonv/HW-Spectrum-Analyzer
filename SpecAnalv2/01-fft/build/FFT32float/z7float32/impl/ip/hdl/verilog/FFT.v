// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FFT,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1761,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=20,HLS_SYN_FF=2647,HLS_SYN_LUT=4894,HLS_VERSION=2020_1}" *)

module FFT (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [4:0] data_IN_M_real_address0;
reg    data_IN_M_real_ce0;
wire   [31:0] data_IN_M_real_q0;
wire   [4:0] data_IN_M_imag_address0;
reg    data_IN_M_imag_ce0;
wire   [31:0] data_IN_M_imag_q0;
wire   [4:0] data_OUT_M_real_address0;
reg    data_OUT_M_real_ce0;
reg    data_OUT_M_real_we0;
wire   [4:0] data_OUT_M_imag_address0;
reg    data_OUT_M_imag_ce0;
reg    data_OUT_M_imag_we0;
reg   [4:0] xin_M_real_address0;
reg    xin_M_real_ce0;
reg    xin_M_real_we0;
wire   [31:0] xin_M_real_q0;
reg   [4:0] xin_M_imag_address0;
reg    xin_M_imag_ce0;
reg    xin_M_imag_we0;
wire   [31:0] xin_M_imag_q0;
wire   [4:0] rev_32_address0;
reg    rev_32_ce0;
wire   [4:0] rev_32_q0;
reg   [4:0] data_OUT0_M_real_address0;
reg    data_OUT0_M_real_ce0;
reg    data_OUT0_M_real_we0;
wire   [31:0] data_OUT0_M_real_q0;
reg   [4:0] data_OUT0_M_imag_address0;
reg    data_OUT0_M_imag_ce0;
reg    data_OUT0_M_imag_we0;
wire   [31:0] data_OUT0_M_imag_q0;
reg   [4:0] data_OUT1_M_real_address0;
reg    data_OUT1_M_real_ce0;
reg    data_OUT1_M_real_we0;
wire   [31:0] data_OUT1_M_real_q0;
reg   [4:0] data_OUT1_M_imag_address0;
reg    data_OUT1_M_imag_ce0;
reg    data_OUT1_M_imag_we0;
wire   [31:0] data_OUT1_M_imag_q0;
reg   [4:0] data_OUT2_M_real_address0;
reg    data_OUT2_M_real_ce0;
reg    data_OUT2_M_real_we0;
wire   [31:0] data_OUT2_M_real_q0;
reg   [4:0] data_OUT2_M_imag_address0;
reg    data_OUT2_M_imag_ce0;
reg    data_OUT2_M_imag_we0;
wire   [31:0] data_OUT2_M_imag_q0;
reg   [4:0] data_OUT3_M_real_address0;
reg    data_OUT3_M_real_ce0;
reg    data_OUT3_M_real_we0;
wire   [31:0] data_OUT3_M_real_q0;
reg   [4:0] data_OUT3_M_imag_address0;
reg    data_OUT3_M_imag_ce0;
reg    data_OUT3_M_imag_we0;
wire   [31:0] data_OUT3_M_imag_q0;
reg   [4:0] data_OUT4_M_real_address0;
reg    data_OUT4_M_real_ce0;
reg    data_OUT4_M_real_we0;
wire   [31:0] data_OUT4_M_real_q0;
reg   [4:0] data_OUT4_M_imag_address0;
reg    data_OUT4_M_imag_ce0;
reg    data_OUT4_M_imag_we0;
wire   [31:0] data_OUT4_M_imag_q0;
reg   [4:0] xout_M_real_address0;
reg    xout_M_real_ce0;
reg    xout_M_real_we0;
wire   [31:0] xout_M_real_q0;
reg   [4:0] xout_M_imag_address0;
reg    xout_M_imag_ce0;
reg    xout_M_imag_we0;
wire   [31:0] xout_M_imag_q0;
wire   [5:0] i_fu_368_p2;
reg   [5:0] i_reg_424;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln62_fu_374_p1;
reg   [63:0] zext_ln62_reg_429;
wire   [0:0] icmp_ln62_fu_362_p2;
wire   [5:0] i_1_fu_386_p2;
reg   [5:0] i_1_reg_448;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln18_fu_392_p1;
reg   [63:0] zext_ln18_reg_453;
wire   [0:0] icmp_ln17_fu_380_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] i_2_fu_409_p2;
reg   [5:0] i_2_reg_477;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln72_fu_415_p1;
reg   [63:0] zext_ln72_reg_482;
wire   [0:0] icmp_ln72_fu_403_p2;
wire    grp_FFT0_fu_306_ap_start;
wire    grp_FFT0_fu_306_ap_done;
wire    grp_FFT0_fu_306_ap_idle;
wire    grp_FFT0_fu_306_ap_ready;
reg   [5:0] grp_FFT0_fu_306_FFT_stage;
reg   [5:0] grp_FFT0_fu_306_pass_check;
reg   [3:0] grp_FFT0_fu_306_index_shift;
reg   [3:0] grp_FFT0_fu_306_pass_shift;
wire   [4:0] grp_FFT0_fu_306_data_IN_M_real_address0;
wire    grp_FFT0_fu_306_data_IN_M_real_ce0;
reg   [31:0] grp_FFT0_fu_306_data_IN_M_real_q0;
wire   [4:0] grp_FFT0_fu_306_data_IN_M_imag_address0;
wire    grp_FFT0_fu_306_data_IN_M_imag_ce0;
reg   [31:0] grp_FFT0_fu_306_data_IN_M_imag_q0;
wire   [4:0] grp_FFT0_fu_306_data_OUT_M_real_address0;
wire    grp_FFT0_fu_306_data_OUT_M_real_ce0;
wire    grp_FFT0_fu_306_data_OUT_M_real_we0;
wire   [31:0] grp_FFT0_fu_306_data_OUT_M_real_d0;
wire   [4:0] grp_FFT0_fu_306_data_OUT_M_imag_address0;
wire    grp_FFT0_fu_306_data_OUT_M_imag_ce0;
wire    grp_FFT0_fu_306_data_OUT_M_imag_we0;
wire   [31:0] grp_FFT0_fu_306_data_OUT_M_imag_d0;
reg   [5:0] i_0_reg_273;
wire    ap_CS_fsm_state3;
reg   [5:0] i_0_i_reg_284;
wire    ap_CS_fsm_state6;
reg   [5:0] i1_0_reg_295;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
reg    grp_FFT0_fu_306_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln19_fu_397_p1;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_FFT0_fu_306_ap_start_reg = 1'b0;
end

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xin_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xin_M_real_address0),
    .ce0(xin_M_real_ce0),
    .we0(xin_M_real_we0),
    .d0(data_IN_M_real_q0),
    .q0(xin_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xin_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xin_M_imag_address0),
    .ce0(xin_M_imag_ce0),
    .we0(xin_M_imag_we0),
    .d0(data_IN_M_imag_q0),
    .q0(xin_M_imag_q0)
);

FFT_rev_32 #(
    .DataWidth( 5 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
rev_32_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rev_32_address0),
    .ce0(rev_32_ce0),
    .q0(rev_32_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT0_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT0_M_real_address0),
    .ce0(data_OUT0_M_real_ce0),
    .we0(data_OUT0_M_real_we0),
    .d0(xin_M_real_q0),
    .q0(data_OUT0_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT0_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT0_M_imag_address0),
    .ce0(data_OUT0_M_imag_ce0),
    .we0(data_OUT0_M_imag_we0),
    .d0(xin_M_imag_q0),
    .q0(data_OUT0_M_imag_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT1_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT1_M_real_address0),
    .ce0(data_OUT1_M_real_ce0),
    .we0(data_OUT1_M_real_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_real_d0),
    .q0(data_OUT1_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT1_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT1_M_imag_address0),
    .ce0(data_OUT1_M_imag_ce0),
    .we0(data_OUT1_M_imag_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_imag_d0),
    .q0(data_OUT1_M_imag_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT2_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT2_M_real_address0),
    .ce0(data_OUT2_M_real_ce0),
    .we0(data_OUT2_M_real_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_real_d0),
    .q0(data_OUT2_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT2_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT2_M_imag_address0),
    .ce0(data_OUT2_M_imag_ce0),
    .we0(data_OUT2_M_imag_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_imag_d0),
    .q0(data_OUT2_M_imag_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT3_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT3_M_real_address0),
    .ce0(data_OUT3_M_real_ce0),
    .we0(data_OUT3_M_real_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_real_d0),
    .q0(data_OUT3_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT3_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT3_M_imag_address0),
    .ce0(data_OUT3_M_imag_ce0),
    .we0(data_OUT3_M_imag_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_imag_d0),
    .q0(data_OUT3_M_imag_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT4_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT4_M_real_address0),
    .ce0(data_OUT4_M_real_ce0),
    .we0(data_OUT4_M_real_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_real_d0),
    .q0(data_OUT4_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT4_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT4_M_imag_address0),
    .ce0(data_OUT4_M_imag_ce0),
    .we0(data_OUT4_M_imag_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_imag_d0),
    .q0(data_OUT4_M_imag_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xout_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xout_M_real_address0),
    .ce0(xout_M_real_ce0),
    .we0(xout_M_real_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_real_d0),
    .q0(xout_M_real_q0)
);

FFT_xin_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xout_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xout_M_imag_address0),
    .ce0(xout_M_imag_ce0),
    .we0(xout_M_imag_we0),
    .d0(grp_FFT0_fu_306_data_OUT_M_imag_d0),
    .q0(xout_M_imag_q0)
);

FFT_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
FFT_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_IN_M_real_address0(data_IN_M_real_address0),
    .data_IN_M_real_ce0(data_IN_M_real_ce0),
    .data_IN_M_real_q0(data_IN_M_real_q0),
    .data_IN_M_imag_address0(data_IN_M_imag_address0),
    .data_IN_M_imag_ce0(data_IN_M_imag_ce0),
    .data_IN_M_imag_q0(data_IN_M_imag_q0),
    .data_OUT_M_real_address0(data_OUT_M_real_address0),
    .data_OUT_M_real_ce0(data_OUT_M_real_ce0),
    .data_OUT_M_real_we0(data_OUT_M_real_we0),
    .data_OUT_M_real_d0(xout_M_real_q0),
    .data_OUT_M_imag_address0(data_OUT_M_imag_address0),
    .data_OUT_M_imag_ce0(data_OUT_M_imag_ce0),
    .data_OUT_M_imag_we0(data_OUT_M_imag_we0),
    .data_OUT_M_imag_d0(xout_M_imag_q0)
);

FFT0 grp_FFT0_fu_306(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FFT0_fu_306_ap_start),
    .ap_done(grp_FFT0_fu_306_ap_done),
    .ap_idle(grp_FFT0_fu_306_ap_idle),
    .ap_ready(grp_FFT0_fu_306_ap_ready),
    .FFT_stage(grp_FFT0_fu_306_FFT_stage),
    .pass_check(grp_FFT0_fu_306_pass_check),
    .index_shift(grp_FFT0_fu_306_index_shift),
    .pass_shift(grp_FFT0_fu_306_pass_shift),
    .data_IN_M_real_address0(grp_FFT0_fu_306_data_IN_M_real_address0),
    .data_IN_M_real_ce0(grp_FFT0_fu_306_data_IN_M_real_ce0),
    .data_IN_M_real_q0(grp_FFT0_fu_306_data_IN_M_real_q0),
    .data_IN_M_imag_address0(grp_FFT0_fu_306_data_IN_M_imag_address0),
    .data_IN_M_imag_ce0(grp_FFT0_fu_306_data_IN_M_imag_ce0),
    .data_IN_M_imag_q0(grp_FFT0_fu_306_data_IN_M_imag_q0),
    .data_OUT_M_real_address0(grp_FFT0_fu_306_data_OUT_M_real_address0),
    .data_OUT_M_real_ce0(grp_FFT0_fu_306_data_OUT_M_real_ce0),
    .data_OUT_M_real_we0(grp_FFT0_fu_306_data_OUT_M_real_we0),
    .data_OUT_M_real_d0(grp_FFT0_fu_306_data_OUT_M_real_d0),
    .data_OUT_M_imag_address0(grp_FFT0_fu_306_data_OUT_M_imag_address0),
    .data_OUT_M_imag_ce0(grp_FFT0_fu_306_data_OUT_M_imag_ce0),
    .data_OUT_M_imag_we0(grp_FFT0_fu_306_data_OUT_M_imag_we0),
    .data_OUT_M_imag_d0(grp_FFT0_fu_306_data_OUT_M_imag_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FFT0_fu_306_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln17_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_FFT0_fu_306_ap_start_reg <= 1'b1;
        end else if ((grp_FFT0_fu_306_ap_ready == 1'b1)) begin
            grp_FFT0_fu_306_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i1_0_reg_295 <= i_2_reg_477;
    end else if (((grp_FFT0_fu_306_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        i1_0_reg_295 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_362_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_284 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_284 <= i_1_reg_448;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_273 <= i_reg_424;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_273 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_448 <= i_1_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_2_reg_477 <= i_2_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_424 <= i_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln18_reg_453[5 : 0] <= zext_ln18_fu_392_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln62_reg_429[5 : 0] <= zext_ln62_fu_374_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        zext_ln72_reg_482[5 : 0] <= zext_ln72_fu_415_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_IN_M_imag_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_IN_M_real_ce0 = 1'b1;
    end else begin
        data_IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_imag_address0 = zext_ln18_reg_453;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT0_M_imag_address0 = grp_FFT0_fu_306_data_IN_M_imag_address0;
    end else begin
        data_OUT0_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_imag_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT0_M_imag_ce0 = grp_FFT0_fu_306_data_IN_M_imag_ce0;
    end else begin
        data_OUT0_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_imag_we0 = 1'b1;
    end else begin
        data_OUT0_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_real_address0 = zext_ln18_reg_453;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT0_M_real_address0 = grp_FFT0_fu_306_data_IN_M_real_address0;
    end else begin
        data_OUT0_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_real_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT0_M_real_ce0 = grp_FFT0_fu_306_data_IN_M_real_ce0;
    end else begin
        data_OUT0_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_real_we0 = 1'b1;
    end else begin
        data_OUT0_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT1_M_imag_address0 = grp_FFT0_fu_306_data_OUT_M_imag_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT1_M_imag_address0 = grp_FFT0_fu_306_data_IN_M_imag_address0;
    end else begin
        data_OUT1_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT1_M_imag_ce0 = grp_FFT0_fu_306_data_OUT_M_imag_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT1_M_imag_ce0 = grp_FFT0_fu_306_data_IN_M_imag_ce0;
    end else begin
        data_OUT1_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT1_M_imag_we0 = grp_FFT0_fu_306_data_OUT_M_imag_we0;
    end else begin
        data_OUT1_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT1_M_real_address0 = grp_FFT0_fu_306_data_OUT_M_real_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT1_M_real_address0 = grp_FFT0_fu_306_data_IN_M_real_address0;
    end else begin
        data_OUT1_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT1_M_real_ce0 = grp_FFT0_fu_306_data_OUT_M_real_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT1_M_real_ce0 = grp_FFT0_fu_306_data_IN_M_real_ce0;
    end else begin
        data_OUT1_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_OUT1_M_real_we0 = grp_FFT0_fu_306_data_OUT_M_real_we0;
    end else begin
        data_OUT1_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT2_M_imag_address0 = grp_FFT0_fu_306_data_OUT_M_imag_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT2_M_imag_address0 = grp_FFT0_fu_306_data_IN_M_imag_address0;
    end else begin
        data_OUT2_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT2_M_imag_ce0 = grp_FFT0_fu_306_data_OUT_M_imag_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT2_M_imag_ce0 = grp_FFT0_fu_306_data_IN_M_imag_ce0;
    end else begin
        data_OUT2_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT2_M_imag_we0 = grp_FFT0_fu_306_data_OUT_M_imag_we0;
    end else begin
        data_OUT2_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT2_M_real_address0 = grp_FFT0_fu_306_data_OUT_M_real_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT2_M_real_address0 = grp_FFT0_fu_306_data_IN_M_real_address0;
    end else begin
        data_OUT2_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT2_M_real_ce0 = grp_FFT0_fu_306_data_OUT_M_real_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT2_M_real_ce0 = grp_FFT0_fu_306_data_IN_M_real_ce0;
    end else begin
        data_OUT2_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_OUT2_M_real_we0 = grp_FFT0_fu_306_data_OUT_M_real_we0;
    end else begin
        data_OUT2_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT3_M_imag_address0 = grp_FFT0_fu_306_data_OUT_M_imag_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT3_M_imag_address0 = grp_FFT0_fu_306_data_IN_M_imag_address0;
    end else begin
        data_OUT3_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT3_M_imag_ce0 = grp_FFT0_fu_306_data_OUT_M_imag_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT3_M_imag_ce0 = grp_FFT0_fu_306_data_IN_M_imag_ce0;
    end else begin
        data_OUT3_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT3_M_imag_we0 = grp_FFT0_fu_306_data_OUT_M_imag_we0;
    end else begin
        data_OUT3_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT3_M_real_address0 = grp_FFT0_fu_306_data_OUT_M_real_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT3_M_real_address0 = grp_FFT0_fu_306_data_IN_M_real_address0;
    end else begin
        data_OUT3_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT3_M_real_ce0 = grp_FFT0_fu_306_data_OUT_M_real_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT3_M_real_ce0 = grp_FFT0_fu_306_data_IN_M_real_ce0;
    end else begin
        data_OUT3_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_OUT3_M_real_we0 = grp_FFT0_fu_306_data_OUT_M_real_we0;
    end else begin
        data_OUT3_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT4_M_imag_address0 = grp_FFT0_fu_306_data_OUT_M_imag_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_OUT4_M_imag_address0 = grp_FFT0_fu_306_data_IN_M_imag_address0;
    end else begin
        data_OUT4_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT4_M_imag_ce0 = grp_FFT0_fu_306_data_OUT_M_imag_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_OUT4_M_imag_ce0 = grp_FFT0_fu_306_data_IN_M_imag_ce0;
    end else begin
        data_OUT4_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT4_M_imag_we0 = grp_FFT0_fu_306_data_OUT_M_imag_we0;
    end else begin
        data_OUT4_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT4_M_real_address0 = grp_FFT0_fu_306_data_OUT_M_real_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_OUT4_M_real_address0 = grp_FFT0_fu_306_data_IN_M_real_address0;
    end else begin
        data_OUT4_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT4_M_real_ce0 = grp_FFT0_fu_306_data_OUT_M_real_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_OUT4_M_real_ce0 = grp_FFT0_fu_306_data_IN_M_real_ce0;
    end else begin
        data_OUT4_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_OUT4_M_real_we0 = grp_FFT0_fu_306_data_OUT_M_real_we0;
    end else begin
        data_OUT4_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        data_OUT_M_imag_ce0 = 1'b1;
    end else begin
        data_OUT_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        data_OUT_M_imag_we0 = 1'b1;
    end else begin
        data_OUT_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        data_OUT_M_real_ce0 = 1'b1;
    end else begin
        data_OUT_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        data_OUT_M_real_we0 = 1'b1;
    end else begin
        data_OUT_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_FFT0_fu_306_FFT_stage = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_FFT0_fu_306_FFT_stage = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_FFT0_fu_306_FFT_stage = 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_FFT0_fu_306_FFT_stage = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_FFT0_fu_306_FFT_stage = 6'd1;
    end else begin
        grp_FFT0_fu_306_FFT_stage = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_FFT0_fu_306_data_IN_M_imag_q0 = data_OUT4_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_FFT0_fu_306_data_IN_M_imag_q0 = data_OUT3_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_FFT0_fu_306_data_IN_M_imag_q0 = data_OUT2_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_FFT0_fu_306_data_IN_M_imag_q0 = data_OUT1_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_FFT0_fu_306_data_IN_M_imag_q0 = data_OUT0_M_imag_q0;
    end else begin
        grp_FFT0_fu_306_data_IN_M_imag_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_FFT0_fu_306_data_IN_M_real_q0 = data_OUT4_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_FFT0_fu_306_data_IN_M_real_q0 = data_OUT3_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_FFT0_fu_306_data_IN_M_real_q0 = data_OUT2_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_FFT0_fu_306_data_IN_M_real_q0 = data_OUT1_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_FFT0_fu_306_data_IN_M_real_q0 = data_OUT0_M_real_q0;
    end else begin
        grp_FFT0_fu_306_data_IN_M_real_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_FFT0_fu_306_index_shift = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_FFT0_fu_306_index_shift = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_FFT0_fu_306_index_shift = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_FFT0_fu_306_index_shift = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_FFT0_fu_306_index_shift = 4'd4;
    end else begin
        grp_FFT0_fu_306_index_shift = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_FFT0_fu_306_pass_check = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_FFT0_fu_306_pass_check = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_FFT0_fu_306_pass_check = 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_FFT0_fu_306_pass_check = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_FFT0_fu_306_pass_check = 6'd16;
    end else begin
        grp_FFT0_fu_306_pass_check = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_FFT0_fu_306_pass_shift = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_FFT0_fu_306_pass_shift = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_FFT0_fu_306_pass_shift = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_FFT0_fu_306_pass_shift = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_FFT0_fu_306_pass_shift = 4'd1;
    end else begin
        grp_FFT0_fu_306_pass_shift = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rev_32_ce0 = 1'b1;
    end else begin
        rev_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_imag_address0 = zext_ln19_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_imag_address0 = zext_ln62_reg_429;
    end else begin
        xin_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        xin_M_imag_ce0 = 1'b1;
    end else begin
        xin_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_imag_we0 = 1'b1;
    end else begin
        xin_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_real_address0 = zext_ln19_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_real_address0 = zext_ln62_reg_429;
    end else begin
        xin_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        xin_M_real_ce0 = 1'b1;
    end else begin
        xin_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_real_we0 = 1'b1;
    end else begin
        xin_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xout_M_imag_address0 = zext_ln72_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_imag_address0 = grp_FFT0_fu_306_data_OUT_M_imag_address0;
    end else begin
        xout_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xout_M_imag_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_imag_ce0 = grp_FFT0_fu_306_data_OUT_M_imag_ce0;
    end else begin
        xout_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_imag_we0 = grp_FFT0_fu_306_data_OUT_M_imag_we0;
    end else begin
        xout_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xout_M_real_address0 = zext_ln72_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_real_address0 = grp_FFT0_fu_306_data_OUT_M_real_address0;
    end else begin
        xout_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xout_M_real_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_real_ce0 = grp_FFT0_fu_306_data_OUT_M_real_ce0;
    end else begin
        xout_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_real_we0 = grp_FFT0_fu_306_data_OUT_M_real_we0;
    end else begin
        xout_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln62_fu_362_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln17_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_FFT0_fu_306_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_FFT0_fu_306_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_FFT0_fu_306_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_FFT0_fu_306_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_FFT0_fu_306_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln72_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_IN_M_imag_address0 = zext_ln62_fu_374_p1;

assign data_IN_M_real_address0 = zext_ln62_fu_374_p1;

assign data_OUT_M_imag_address0 = zext_ln72_reg_482;

assign data_OUT_M_real_address0 = zext_ln72_reg_482;

assign grp_FFT0_fu_306_ap_start = grp_FFT0_fu_306_ap_start_reg;

assign i_1_fu_386_p2 = (i_0_i_reg_284 + 6'd1);

assign i_2_fu_409_p2 = (i1_0_reg_295 + 6'd1);

assign i_fu_368_p2 = (i_0_reg_273 + 6'd1);

assign icmp_ln17_fu_380_p2 = ((i_0_i_reg_284 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_362_p2 = ((i_0_reg_273 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_403_p2 = ((i1_0_reg_295 == 6'd32) ? 1'b1 : 1'b0);

assign rev_32_address0 = zext_ln18_fu_392_p1;

assign zext_ln18_fu_392_p1 = i_0_i_reg_284;

assign zext_ln19_fu_397_p1 = rev_32_q0;

assign zext_ln62_fu_374_p1 = i_0_reg_273;

assign zext_ln72_fu_415_p1 = i1_0_reg_295;

always @ (posedge ap_clk) begin
    zext_ln62_reg_429[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_453[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln72_reg_482[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT
