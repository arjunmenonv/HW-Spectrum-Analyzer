-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity FFT0121_W_M_real142_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of FFT0121_W_M_real142_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111100000000000000000000000", 
    1 => "00111111011111111110110001000011", 
    2 => "00111111011111111011000100001111", 
    3 => "00111111011111110100111001101101", 
    4 => "00111111011111101100010001101101", 
    5 => "00111111011111100001001100100100", 
    6 => "00111111011111010011101010101100", 
    7 => "00111111011111000011101100101000", 
    8 => "00111111011110110001010010111110", 
    9 => "00111111011110011100011110011101", 
    10 => "00111111011110000101001111111000", 
    11 => "00111111011101101011101000000111", 
    12 => "00111111011101001111101000001011", 
    13 => "00111111011100110001010001000111", 
    14 => "00111111011100010000100100001000", 
    15 => "00111111011011101101100010011110", 
    16 => "00111111011011001000001101011110", 
    17 => "00111111011010100000100110100111", 
    18 => "00111111011001110110101111011000", 
    19 => "00111111011001001010101001011001", 
    20 => "00111111011000011100010110011000", 
    21 => "00111111010111101011111000000101", 
    22 => "00111111010110111001010000011010", 
    23 => "00111111010110000100100001010011", 
    24 => "00111111010101001101101100110001", 
    25 => "00111111010100010100110100111101", 
    26 => "00111111010011011001111100000010", 
    27 => "00111111010010011101000100010010", 
    28 => "00111111010001011110010000000011", 
    29 => "00111111010000011101100001110000", 
    30 => "00111111001111011010111011111001", 
    31 => "00111111001110010110100001000010", 
    32 => "00111111001101010000010011110011", 
    33 => "00111111001100001000010110111011", 
    34 => "00111111001010111110101101001010", 
    35 => "00111111001001110011011001010110", 
    36 => "00111111001000100110011110011001", 
    37 => "00111111000111010111111111010001", 
    38 => "00111111000110000111111111000000", 
    39 => "00111111000100110110100000101010", 
    40 => "00111111000011100011100111011010", 
    41 => "00111111000010001111010110011011", 
    42 => "00111111000000111001110000111101", 
    43 => "00111110111111000101110100100111", 
    44 => "00111110111100010101101011101010", 
    45 => "00111110111001100011001101110101", 
    46 => "00111110110110101110100010000000", 
    47 => "00111110110011110111101111001010", 
    48 => "00111110110000111110111100010101", 
    49 => "00111110101110000100010000101010", 
    50 => "00111110101011000111110011010100", 
    51 => "00111110101000001001101011100101", 
    52 => "00111110100101001010000000110001", 
    53 => "00111110100010001000111010010011", 
    54 => "00111110011110001100111111001100", 
    55 => "00111110011000000101110000010011", 
    56 => "00111110010001111100010111000010", 
    57 => "00111110001011110001000010100010", 
    58 => "00111110000101100100000010000011", 
    59 => "00111101111110101011001001110011", 
    60 => "00111101110010001011110100110110", 
    61 => "00111101100101101010100100000101", 
    62 => "00111101010010001111101100110000", 
    63 => "00111100110010010000101010110000", 
    64 => "00100100100011010011000100110010", 
    65 => "10111100110010010000101010110000", 
    66 => "10111101010010001111101100110000", 
    67 => "10111101100101101010100100000101", 
    68 => "10111101110010001011110100110110", 
    69 => "10111101111110101011001001110011", 
    70 => "10111110000101100100000010000011", 
    71 => "10111110001011110001000010100010", 
    72 => "10111110010001111100010111000010", 
    73 => "10111110011000000101110000010011", 
    74 => "10111110011110001100111111001100", 
    75 => "10111110100010001000111010010011", 
    76 => "10111110100101001010000000110001", 
    77 => "10111110101000001001101011100101", 
    78 => "10111110101011000111110011010100", 
    79 => "10111110101110000100010000101010", 
    80 => "10111110110000111110111100010101", 
    81 => "10111110110011110111101111001010", 
    82 => "10111110110110101110100010000000", 
    83 => "10111110111001100011001101110101", 
    84 => "10111110111100010101101011101010", 
    85 => "10111110111111000101110100100111", 
    86 => "10111111000000111001110000111101", 
    87 => "10111111000010001111010110011011", 
    88 => "10111111000011100011100111011010", 
    89 => "10111111000100110110100000101010", 
    90 => "10111111000110000111111111000000", 
    91 => "10111111000111010111111111010001", 
    92 => "10111111001000100110011110011001", 
    93 => "10111111001001110011011001010110", 
    94 => "10111111001010111110101101001010", 
    95 => "10111111001100001000010110111011", 
    96 => "10111111001101010000010011110011", 
    97 => "10111111001110010110100001000010", 
    98 => "10111111001111011010111011111001", 
    99 => "10111111010000011101100001110000", 
    100 => "10111111010001011110010000000011", 
    101 => "10111111010010011101000100010010", 
    102 => "10111111010011011001111100000010", 
    103 => "10111111010100010100110100111101", 
    104 => "10111111010101001101101100110001", 
    105 => "10111111010110000100100001010011", 
    106 => "10111111010110111001010000011010", 
    107 => "10111111010111101011111000000101", 
    108 => "10111111011000011100010110011000", 
    109 => "10111111011001001010101001011001", 
    110 => "10111111011001110110101111011000", 
    111 => "10111111011010100000100110100111", 
    112 => "10111111011011001000001101011110", 
    113 => "10111111011011101101100010011110", 
    114 => "10111111011100010000100100001000", 
    115 => "10111111011100110001010001000111", 
    116 => "10111111011101001111101000001011", 
    117 => "10111111011101101011101000000111", 
    118 => "10111111011110000101001111111000", 
    119 => "10111111011110011100011110011101", 
    120 => "10111111011110110001010010111110", 
    121 => "10111111011111000011101100101000", 
    122 => "10111111011111010011101010101100", 
    123 => "10111111011111100001001100100100", 
    124 => "10111111011111101100010001101101", 
    125 => "10111111011111110100111001101101", 
    126 => "10111111011111111011000100001111", 
    127 => "10111111011111111110110001000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity FFT0121_W_M_real142 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of FFT0121_W_M_real142 is
    component FFT0121_W_M_real142_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    FFT0121_W_M_real142_rom_U :  component FFT0121_W_M_real142_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


