// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bitreverse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        win_IN_M_imag_address0,
        win_IN_M_imag_ce0,
        win_IN_M_imag_q0,
        win_IN_M_real_address0,
        win_IN_M_real_ce0,
        win_IN_M_real_q0,
        data_OUT0_M_real_address0,
        data_OUT0_M_real_ce0,
        data_OUT0_M_real_we0,
        data_OUT0_M_real_d0,
        data_OUT0_M_imag_address0,
        data_OUT0_M_imag_ce0,
        data_OUT0_M_imag_we0,
        data_OUT0_M_imag_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] win_IN_M_imag_address0;
output   win_IN_M_imag_ce0;
input  [31:0] win_IN_M_imag_q0;
output  [7:0] win_IN_M_real_address0;
output   win_IN_M_real_ce0;
input  [31:0] win_IN_M_real_q0;
output  [7:0] data_OUT0_M_real_address0;
output   data_OUT0_M_real_ce0;
output   data_OUT0_M_real_we0;
output  [31:0] data_OUT0_M_real_d0;
output  [7:0] data_OUT0_M_imag_address0;
output   data_OUT0_M_imag_ce0;
output   data_OUT0_M_imag_we0;
output  [31:0] data_OUT0_M_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg win_IN_M_imag_ce0;
reg win_IN_M_real_ce0;
reg data_OUT0_M_real_ce0;
reg data_OUT0_M_real_we0;
reg data_OUT0_M_imag_ce0;
reg data_OUT0_M_imag_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] rev_256_address0;
reg    rev_256_ce0;
wire   [7:0] rev_256_q0;
reg   [8:0] i_0_i_reg_107;
wire   [0:0] icmp_ln76_fu_118_p2;
reg   [0:0] icmp_ln76_reg_141;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln76_reg_141_pp0_iter1_reg;
wire   [8:0] i_fu_124_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln78_fu_130_p1;
reg   [63:0] zext_ln78_reg_150;
reg   [63:0] zext_ln78_reg_150_pp0_iter1_reg;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln79_fu_135_p1;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

bitreverse_rev_256 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
rev_256_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rev_256_address0),
    .ce0(rev_256_ce0),
    .q0(rev_256_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_107 <= i_fu_124_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_107 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln76_reg_141 <= icmp_ln76_fu_118_p2;
        icmp_ln76_reg_141_pp0_iter1_reg <= icmp_ln76_reg_141;
        zext_ln78_reg_150_pp0_iter1_reg[8 : 0] <= zext_ln78_reg_150[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln78_reg_150[8 : 0] <= zext_ln78_fu_130_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln76_fu_118_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT0_M_imag_ce0 = 1'b1;
    end else begin
        data_OUT0_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_141_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT0_M_imag_we0 = 1'b1;
    end else begin
        data_OUT0_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT0_M_real_ce0 = 1'b1;
    end else begin
        data_OUT0_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_141_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT0_M_real_we0 = 1'b1;
    end else begin
        data_OUT0_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rev_256_ce0 = 1'b1;
    end else begin
        rev_256_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        win_IN_M_imag_ce0 = 1'b1;
    end else begin
        win_IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        win_IN_M_real_ce0 = 1'b1;
    end else begin
        win_IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln76_fu_118_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln76_fu_118_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_OUT0_M_imag_address0 = zext_ln78_reg_150_pp0_iter1_reg;

assign data_OUT0_M_imag_d0 = win_IN_M_imag_q0;

assign data_OUT0_M_real_address0 = zext_ln78_reg_150_pp0_iter1_reg;

assign data_OUT0_M_real_d0 = win_IN_M_real_q0;

assign i_fu_124_p2 = (i_0_i_reg_107 + 9'd1);

assign icmp_ln76_fu_118_p2 = ((i_0_i_reg_107 == 9'd256) ? 1'b1 : 1'b0);

assign rev_256_address0 = zext_ln78_fu_130_p1;

assign win_IN_M_imag_address0 = zext_ln79_fu_135_p1;

assign win_IN_M_real_address0 = zext_ln79_fu_135_p1;

assign zext_ln78_fu_130_p1 = i_0_i_reg_107;

assign zext_ln79_fu_135_p1 = rev_256_q0;

always @ (posedge ap_clk) begin
    zext_ln78_reg_150[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln78_reg_150_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //bitreverse
