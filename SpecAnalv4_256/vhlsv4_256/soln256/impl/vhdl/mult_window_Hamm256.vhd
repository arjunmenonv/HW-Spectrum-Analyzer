-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mult_window_Hamm256_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mult_window_Hamm256_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000111101011100001010", 
    1 => "00111101101001000010000000111111", 
    2 => "00111101101001001111101111010011", 
    3 => "00111101101001100110100110100100", 
    4 => "00111101101010000110100101111001", 
    5 => "00111101101010101111101100000010", 
    6 => "00111101101011100001110111011000", 
    7 => "00111101101100011101000110000000", 
    8 => "00111101101101100001010101100111", 
    9 => "00111101101110101110100011100000", 
    10 => "00111101110000000100101100110000", 
    11 => "00111101110001100011101101111101", 
    12 => "00111101110011001011100011011100", 
    13 => "00111101110100111100001001001011", 
    14 => "00111101110110110101011010110000", 
    15 => "00111101111000110111010011100001", 
    16 => "00111101111011000001101110011001", 
    17 => "00111101111101010100100101111111", 
    18 => "00111101111111101111110100100111", 
    19 => "00111110000001001001101010000111", 
    20 => "00111110000010011111011111010000", 
    21 => "00111110000011111001010110010111", 
    22 => "00111110000101010111001011111110", 
    23 => "00111110000110111000111100011100", 
    24 => "00111110001000011110100011111110", 
    25 => "00111110001010000111111110100101", 
    26 => "00111110001011110101001000001101", 
    27 => "00111110001101100101111100100101", 
    28 => "00111110001111011010010111010111", 
    29 => "00111110010001010010010011111111", 
    30 => "00111110010011001101101101110100", 
    31 => "00111110010101001100100000000011", 
    32 => "00111110010111001110100101110000", 
    33 => "00111110011001010011111001111001", 
    34 => "00111110011011011100010111010001", 
    35 => "00111110011101100111111000100101", 
    36 => "00111110011111110110011000011011", 
    37 => "00111110100001000011111000101000", 
    38 => "00111110100010001101111110101101", 
    39 => "00111110100011011001011011100100", 
    40 => "00111110100100100110001100010010", 
    41 => "00111110100101110100001101111001", 
    42 => "00111110100111000011011101010101", 
    43 => "00111110101000010011110111100010", 
    44 => "00111110101001100101011001011000", 
    45 => "00111110101010110111111111101101", 
    46 => "00111110101100001011100111010001", 
    47 => "00111110101101100000001100110111", 
    48 => "00111110101110110101101101001100", 
    49 => "00111110110000001100000100111011", 
    50 => "00111110110001100011010000101100", 
    51 => "00111110110010111011001101001000", 
    52 => "00111110110100010011110110110100", 
    53 => "00111110110101101101001010010011", 
    54 => "00111110110111000111000100000110", 
    55 => "00111110111000100001100000110000", 
    56 => "00111110111001111100011100101110", 
    57 => "00111110111011010111110100011111", 
    58 => "00111110111100110011100100011111", 
    59 => "00111110111110001111101001001010", 
    60 => "00111110111111101011111110111011", 
    61 => "00111111000000100100010001000111", 
    62 => "00111111000001010010100111101101", 
    63 => "00111111000010000001000001011101", 
    64 => "00111111000010101111011100100100", 
    65 => "00111111000011011101110111001110", 
    66 => "00111111000100001100001111101000", 
    67 => "00111111000100111010100011111110", 
    68 => "00111111000101101000110010011101", 
    69 => "00111111000110010110111001010011", 
    70 => "00111111000111000100110110101100", 
    71 => "00111111000111110010101000110110", 
    72 => "00111111001000100000001110000000", 
    73 => "00111111001001001101100100011000", 
    74 => "00111111001001111010101010001110", 
    75 => "00111111001010100111011101110000", 
    76 => "00111111001011010011111101010000", 
    77 => "00111111001100000000000111000000", 
    78 => "00111111001100101011111001010001", 
    79 => "00111111001101010111010010010110", 
    80 => "00111111001110000010010000100101", 
    81 => "00111111001110101100110010010001", 
    82 => "00111111001111010110110101110000", 
    83 => "00111111010000000000011001011100", 
    84 => "00111111010000101001011011101011", 
    85 => "00111111010001010001111010111000", 
    86 => "00111111010001111001110101011111", 
    87 => "00111111010010100001001001111100", 
    88 => "00111111010011000111110110101101", 
    89 => "00111111010011101101111010010010", 
    90 => "00111111010100010011010011001101", 
    91 => "00111111010100111000000000000000", 
    92 => "00111111010101011011111111010001", 
    93 => "00111111010101111111001111100101", 
    94 => "00111111010110100001101111100101", 
    95 => "00111111010111000011011101111100", 
    96 => "00111111010111100100011001010101", 
    97 => "00111111011000000100100000011110", 
    98 => "00111111011000100011110010001001", 
    99 => "00111111011001000010001101000110", 
    100 => "00111111011001011111110000001010", 
    101 => "00111111011001111100011010001100", 
    102 => "00111111011010011000001010000101", 
    103 => "00111111011010110010111110101111", 
    104 => "00111111011011001100110111001000", 
    105 => "00111111011011100101110010010000", 
    106 => "00111111011011111101101111001000", 
    107 => "00111111011100010100101100110101", 
    108 => "00111111011100101010101010011110", 
    109 => "00111111011100111111100111001100", 
    110 => "00111111011101010011100010001011", 
    111 => "00111111011101100110011010101010", 
    112 => "00111111011101111000001111111001", 
    113 => "00111111011110001001000001001101", 
    114 => "00111111011110011000101101111011", 
    115 => "00111111011110100111010101011101", 
    116 => "00111111011110110100110111001110", 
    117 => "00111111011111000001010010101101", 
    118 => "00111111011111001100100111011010", 
    119 => "00111111011111010110110100111010", 
    120 => "00111111011111011111111010110011", 
    121 => "00111111011111100111111000101110", 
    122 => "00111111011111101110101110011000", 
    123 => "00111111011111110100011011100000", 
    124 => "00111111011111111000111111110111", 
    125 => "00111111011111111100011011010010", 
    126 => "00111111011111111110101101101001", 
    127 to 128=> "00111111011111111111110110110110", 
    129 => "00111111011111111110101101101001", 
    130 => "00111111011111111100011011010010", 
    131 => "00111111011111111000111111110111", 
    132 => "00111111011111110100011011100000", 
    133 => "00111111011111101110101110011000", 
    134 => "00111111011111100111111000101110", 
    135 => "00111111011111011111111010110011", 
    136 => "00111111011111010110110100111010", 
    137 => "00111111011111001100100111011010", 
    138 => "00111111011111000001010010101101", 
    139 => "00111111011110110100110111001110", 
    140 => "00111111011110100111010101011101", 
    141 => "00111111011110011000101101111011", 
    142 => "00111111011110001001000001001101", 
    143 => "00111111011101111000001111111001", 
    144 => "00111111011101100110011010101010", 
    145 => "00111111011101010011100010001011", 
    146 => "00111111011100111111100111001100", 
    147 => "00111111011100101010101010011110", 
    148 => "00111111011100010100101100110101", 
    149 => "00111111011011111101101111001000", 
    150 => "00111111011011100101110010010000", 
    151 => "00111111011011001100110111001000", 
    152 => "00111111011010110010111110101111", 
    153 => "00111111011010011000001010000101", 
    154 => "00111111011001111100011010001100", 
    155 => "00111111011001011111110000001010", 
    156 => "00111111011001000010001101000110", 
    157 => "00111111011000100011110010001001", 
    158 => "00111111011000000100100000011110", 
    159 => "00111111010111100100011001010101", 
    160 => "00111111010111000011011101111100", 
    161 => "00111111010110100001101111100101", 
    162 => "00111111010101111111001111100101", 
    163 => "00111111010101011011111111010001", 
    164 => "00111111010100111000000000000000", 
    165 => "00111111010100010011010011001101", 
    166 => "00111111010011101101111010010010", 
    167 => "00111111010011000111110110101101", 
    168 => "00111111010010100001001001111100", 
    169 => "00111111010001111001110101011111", 
    170 => "00111111010001010001111010111000", 
    171 => "00111111010000101001011011101011", 
    172 => "00111111010000000000011001011100", 
    173 => "00111111001111010110110101110000", 
    174 => "00111111001110101100110010010001", 
    175 => "00111111001110000010010000100101", 
    176 => "00111111001101010111010010010110", 
    177 => "00111111001100101011111001010001", 
    178 => "00111111001100000000000111000000", 
    179 => "00111111001011010011111101010000", 
    180 => "00111111001010100111011101110000", 
    181 => "00111111001001111010101010001110", 
    182 => "00111111001001001101100100011000", 
    183 => "00111111001000100000001110000000", 
    184 => "00111111000111110010101000110110", 
    185 => "00111111000111000100110110101100", 
    186 => "00111111000110010110111001010011", 
    187 => "00111111000101101000110010011101", 
    188 => "00111111000100111010100011111110", 
    189 => "00111111000100001100001111101000", 
    190 => "00111111000011011101110111001110", 
    191 => "00111111000010101111011100100100", 
    192 => "00111111000010000001000001011101", 
    193 => "00111111000001010010100111101101", 
    194 => "00111111000000100100010001000111", 
    195 => "00111110111111101011111110111011", 
    196 => "00111110111110001111101001001010", 
    197 => "00111110111100110011100100011111", 
    198 => "00111110111011010111110100011111", 
    199 => "00111110111001111100011100101110", 
    200 => "00111110111000100001100000110000", 
    201 => "00111110110111000111000100000110", 
    202 => "00111110110101101101001010010011", 
    203 => "00111110110100010011110110110100", 
    204 => "00111110110010111011001101001000", 
    205 => "00111110110001100011010000101100", 
    206 => "00111110110000001100000100111011", 
    207 => "00111110101110110101101101001100", 
    208 => "00111110101101100000001100110111", 
    209 => "00111110101100001011100111010001", 
    210 => "00111110101010110111111111101101", 
    211 => "00111110101001100101011001011000", 
    212 => "00111110101000010011110111100010", 
    213 => "00111110100111000011011101010101", 
    214 => "00111110100101110100001101111001", 
    215 => "00111110100100100110001100010010", 
    216 => "00111110100011011001011011100100", 
    217 => "00111110100010001101111110101101", 
    218 => "00111110100001000011111000101000", 
    219 => "00111110011111110110011000011011", 
    220 => "00111110011101100111111000100101", 
    221 => "00111110011011011100010111010001", 
    222 => "00111110011001010011111001111001", 
    223 => "00111110010111001110100101110000", 
    224 => "00111110010101001100100000000011", 
    225 => "00111110010011001101101101110100", 
    226 => "00111110010001010010010011111111", 
    227 => "00111110001111011010010111010111", 
    228 => "00111110001101100101111100100101", 
    229 => "00111110001011110101001000001101", 
    230 => "00111110001010000111111110100101", 
    231 => "00111110001000011110100011111110", 
    232 => "00111110000110111000111100011100", 
    233 => "00111110000101010111001011111110", 
    234 => "00111110000011111001010110010111", 
    235 => "00111110000010011111011111010000", 
    236 => "00111110000001001001101010000111", 
    237 => "00111101111111101111110100100111", 
    238 => "00111101111101010100100101111111", 
    239 => "00111101111011000001101110011001", 
    240 => "00111101111000110111010011100001", 
    241 => "00111101110110110101011010110000", 
    242 => "00111101110100111100001001001011", 
    243 => "00111101110011001011100011011100", 
    244 => "00111101110001100011101101111101", 
    245 => "00111101110000000100101100110000", 
    246 => "00111101101110101110100011100000", 
    247 => "00111101101101100001010101100111", 
    248 => "00111101101100011101000110000000", 
    249 => "00111101101011100001110111011000", 
    250 => "00111101101010101111101100000010", 
    251 => "00111101101010000110100101111001", 
    252 => "00111101101001100110100110100100", 
    253 => "00111101101001001111101111010011", 
    254 => "00111101101001000010000000111111", 
    255 => "00111101101000111101011100001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mult_window_Hamm256 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mult_window_Hamm256 is
    component mult_window_Hamm256_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mult_window_Hamm256_rom_U :  component mult_window_Hamm256_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


