// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_codeRepl124_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_IN_TDATA,
        data_IN_TVALID,
        data_IN_TREADY,
        xin_M_imag_address0,
        xin_M_imag_ce0,
        xin_M_imag_we0,
        xin_M_imag_d0,
        xin_M_real_address0,
        xin_M_real_ce0,
        xin_M_real_we0,
        xin_M_real_d0,
        win_mode_dout,
        win_mode_empty_n,
        win_mode_read,
        win_mode_out_din,
        win_mode_out_full_n,
        win_mode_out_write
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] data_IN_TDATA;
input   data_IN_TVALID;
output   data_IN_TREADY;
output  [4:0] xin_M_imag_address0;
output   xin_M_imag_ce0;
output   xin_M_imag_we0;
output  [31:0] xin_M_imag_d0;
output  [4:0] xin_M_real_address0;
output   xin_M_real_ce0;
output   xin_M_real_we0;
output  [31:0] xin_M_real_d0;
input  [7:0] win_mode_dout;
input   win_mode_empty_n;
output   win_mode_read;
output  [7:0] win_mode_out_din;
input   win_mode_out_full_n;
output   win_mode_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_IN_TREADY;
reg[4:0] xin_M_imag_address0;
reg xin_M_imag_ce0;
reg xin_M_imag_we0;
reg[31:0] xin_M_imag_d0;
reg[4:0] xin_M_real_address0;
reg xin_M_real_ce0;
reg xin_M_real_we0;
reg[31:0] xin_M_real_d0;
reg win_mode_read;
reg win_mode_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_IN_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
reg    win_mode_blk_n;
reg    win_mode_out_blk_n;
reg    ap_block_state1;
wire   [31:0] bitcast_ln147_fu_746_p1;
wire   [31:0] bitcast_ln147_2_fu_760_p1;
wire   [31:0] bitcast_ln147_4_fu_774_p1;
wire   [31:0] bitcast_ln147_6_fu_788_p1;
wire   [31:0] bitcast_ln147_8_fu_802_p1;
wire   [31:0] bitcast_ln147_10_fu_816_p1;
wire   [31:0] bitcast_ln147_12_fu_830_p1;
wire   [31:0] bitcast_ln147_14_fu_844_p1;
wire   [31:0] bitcast_ln147_16_fu_858_p1;
wire   [31:0] bitcast_ln147_18_fu_872_p1;
wire   [31:0] bitcast_ln147_20_fu_886_p1;
wire   [31:0] bitcast_ln147_22_fu_900_p1;
wire   [31:0] bitcast_ln147_24_fu_914_p1;
wire   [31:0] bitcast_ln147_26_fu_928_p1;
wire   [31:0] bitcast_ln147_28_fu_942_p1;
wire   [31:0] bitcast_ln147_30_fu_956_p1;
wire   [31:0] bitcast_ln147_32_fu_970_p1;
wire   [31:0] bitcast_ln147_34_fu_984_p1;
wire   [31:0] bitcast_ln147_36_fu_998_p1;
wire   [31:0] bitcast_ln147_38_fu_1012_p1;
wire   [31:0] bitcast_ln147_40_fu_1026_p1;
wire   [31:0] bitcast_ln147_42_fu_1040_p1;
wire   [31:0] bitcast_ln147_44_fu_1054_p1;
wire   [31:0] bitcast_ln147_46_fu_1068_p1;
wire   [31:0] bitcast_ln147_48_fu_1082_p1;
wire   [31:0] bitcast_ln147_50_fu_1096_p1;
wire   [31:0] bitcast_ln147_52_fu_1110_p1;
wire   [31:0] bitcast_ln147_54_fu_1124_p1;
wire   [31:0] bitcast_ln147_56_fu_1138_p1;
wire   [31:0] bitcast_ln147_58_fu_1152_p1;
wire   [31:0] bitcast_ln147_60_fu_1166_p1;
wire   [31:0] bitcast_ln147_62_fu_1180_p1;
wire   [31:0] bitcast_ln147_1_fu_751_p1;
wire   [31:0] bitcast_ln147_3_fu_765_p1;
wire   [31:0] bitcast_ln147_5_fu_779_p1;
wire   [31:0] bitcast_ln147_7_fu_793_p1;
wire   [31:0] bitcast_ln147_9_fu_807_p1;
wire   [31:0] bitcast_ln147_11_fu_821_p1;
wire   [31:0] bitcast_ln147_13_fu_835_p1;
wire   [31:0] bitcast_ln147_15_fu_849_p1;
wire   [31:0] bitcast_ln147_17_fu_863_p1;
wire   [31:0] bitcast_ln147_19_fu_877_p1;
wire   [31:0] bitcast_ln147_21_fu_891_p1;
wire   [31:0] bitcast_ln147_23_fu_905_p1;
wire   [31:0] bitcast_ln147_25_fu_919_p1;
wire   [31:0] bitcast_ln147_27_fu_933_p1;
wire   [31:0] bitcast_ln147_29_fu_947_p1;
wire   [31:0] bitcast_ln147_31_fu_961_p1;
wire   [31:0] bitcast_ln147_33_fu_975_p1;
wire   [31:0] bitcast_ln147_35_fu_989_p1;
wire   [31:0] bitcast_ln147_37_fu_1003_p1;
wire   [31:0] bitcast_ln147_39_fu_1017_p1;
wire   [31:0] bitcast_ln147_41_fu_1031_p1;
wire   [31:0] bitcast_ln147_43_fu_1045_p1;
wire   [31:0] bitcast_ln147_45_fu_1059_p1;
wire   [31:0] bitcast_ln147_47_fu_1073_p1;
wire   [31:0] bitcast_ln147_49_fu_1087_p1;
wire   [31:0] bitcast_ln147_51_fu_1101_p1;
wire   [31:0] bitcast_ln147_53_fu_1115_p1;
wire   [31:0] bitcast_ln147_55_fu_1129_p1;
wire   [31:0] bitcast_ln147_57_fu_1143_p1;
wire   [31:0] bitcast_ln147_59_fu_1157_p1;
wire   [31:0] bitcast_ln147_61_fu_1171_p1;
wire   [31:0] bitcast_ln147_63_fu_1185_p1;
wire   [31:0] trunc_ln147_fu_742_p1;
wire   [31:0] grp_fu_732_p4;
wire   [31:0] trunc_ln147_1_fu_756_p1;
wire   [31:0] trunc_ln147_2_fu_770_p1;
wire   [31:0] trunc_ln147_3_fu_784_p1;
wire   [31:0] trunc_ln147_4_fu_798_p1;
wire   [31:0] trunc_ln147_5_fu_812_p1;
wire   [31:0] trunc_ln147_6_fu_826_p1;
wire   [31:0] trunc_ln147_7_fu_840_p1;
wire   [31:0] trunc_ln147_8_fu_854_p1;
wire   [31:0] trunc_ln147_9_fu_868_p1;
wire   [31:0] trunc_ln147_10_fu_882_p1;
wire   [31:0] trunc_ln147_11_fu_896_p1;
wire   [31:0] trunc_ln147_12_fu_910_p1;
wire   [31:0] trunc_ln147_13_fu_924_p1;
wire   [31:0] trunc_ln147_14_fu_938_p1;
wire   [31:0] trunc_ln147_15_fu_952_p1;
wire   [31:0] trunc_ln147_16_fu_966_p1;
wire   [31:0] trunc_ln147_17_fu_980_p1;
wire   [31:0] trunc_ln147_18_fu_994_p1;
wire   [31:0] trunc_ln147_19_fu_1008_p1;
wire   [31:0] trunc_ln147_20_fu_1022_p1;
wire   [31:0] trunc_ln147_21_fu_1036_p1;
wire   [31:0] trunc_ln147_22_fu_1050_p1;
wire   [31:0] trunc_ln147_23_fu_1064_p1;
wire   [31:0] trunc_ln147_24_fu_1078_p1;
wire   [31:0] trunc_ln147_25_fu_1092_p1;
wire   [31:0] trunc_ln147_26_fu_1106_p1;
wire   [31:0] trunc_ln147_27_fu_1120_p1;
wire   [31:0] trunc_ln147_28_fu_1134_p1;
wire   [31:0] trunc_ln147_29_fu_1148_p1;
wire   [31:0] trunc_ln147_30_fu_1162_p1;
wire   [31:0] trunc_ln147_31_fu_1176_p1;
reg   [31:0] ap_NS_fsm;
wire    regslice_both_data_IN_U_apdone_blk;
wire   [63:0] data_IN_TDATA_int;
wire    data_IN_TVALID_int;
reg    data_IN_TREADY_int;
wire    regslice_both_data_IN_U_ack_in;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 32'd1;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_data_IN_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_IN_TDATA),
    .vld_in(data_IN_TVALID),
    .ack_in(regslice_both_data_IN_U_ack_in),
    .data_out(data_IN_TDATA_int),
    .vld_out(data_IN_TVALID_int),
    .ack_out(data_IN_TREADY_int),
    .apdone_blk(regslice_both_data_IN_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_IN_TDATA_blk_n = data_IN_TVALID_int;
    end else begin
        data_IN_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_data_IN_U_ack_in == 1'b1) & (data_IN_TVALID == 1'b1))) begin
        data_IN_TREADY = 1'b1;
    end else begin
        data_IN_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        data_IN_TREADY_int = 1'b1;
    end else begin
        data_IN_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        win_mode_blk_n = win_mode_empty_n;
    end else begin
        win_mode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        win_mode_out_blk_n = win_mode_out_full_n;
    end else begin
        win_mode_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        win_mode_out_write = 1'b1;
    end else begin
        win_mode_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        win_mode_read = 1'b1;
    end else begin
        win_mode_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xin_M_imag_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_M_imag_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_M_imag_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        xin_M_imag_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_M_imag_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_M_imag_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        xin_M_imag_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        xin_M_imag_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xin_M_imag_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xin_M_imag_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        xin_M_imag_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        xin_M_imag_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        xin_M_imag_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xin_M_imag_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        xin_M_imag_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        xin_M_imag_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        xin_M_imag_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xin_M_imag_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xin_M_imag_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        xin_M_imag_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xin_M_imag_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xin_M_imag_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        xin_M_imag_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        xin_M_imag_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_M_imag_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_M_imag_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_M_imag_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_imag_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_imag_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_imag_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_imag_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        xin_M_imag_address0 = 64'd0;
    end else begin
        xin_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        xin_M_imag_ce0 = 1'b1;
    end else begin
        xin_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xin_M_imag_d0 = bitcast_ln147_63_fu_1185_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_M_imag_d0 = bitcast_ln147_61_fu_1171_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_M_imag_d0 = bitcast_ln147_59_fu_1157_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        xin_M_imag_d0 = bitcast_ln147_57_fu_1143_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_M_imag_d0 = bitcast_ln147_55_fu_1129_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_M_imag_d0 = bitcast_ln147_53_fu_1115_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        xin_M_imag_d0 = bitcast_ln147_51_fu_1101_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        xin_M_imag_d0 = bitcast_ln147_49_fu_1087_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xin_M_imag_d0 = bitcast_ln147_47_fu_1073_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xin_M_imag_d0 = bitcast_ln147_45_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        xin_M_imag_d0 = bitcast_ln147_43_fu_1045_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        xin_M_imag_d0 = bitcast_ln147_41_fu_1031_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        xin_M_imag_d0 = bitcast_ln147_39_fu_1017_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xin_M_imag_d0 = bitcast_ln147_37_fu_1003_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        xin_M_imag_d0 = bitcast_ln147_35_fu_989_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        xin_M_imag_d0 = bitcast_ln147_33_fu_975_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        xin_M_imag_d0 = bitcast_ln147_31_fu_961_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xin_M_imag_d0 = bitcast_ln147_29_fu_947_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xin_M_imag_d0 = bitcast_ln147_27_fu_933_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        xin_M_imag_d0 = bitcast_ln147_25_fu_919_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xin_M_imag_d0 = bitcast_ln147_23_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xin_M_imag_d0 = bitcast_ln147_21_fu_891_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        xin_M_imag_d0 = bitcast_ln147_19_fu_877_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        xin_M_imag_d0 = bitcast_ln147_17_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_M_imag_d0 = bitcast_ln147_15_fu_849_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_M_imag_d0 = bitcast_ln147_13_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_M_imag_d0 = bitcast_ln147_11_fu_821_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_imag_d0 = bitcast_ln147_9_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_imag_d0 = bitcast_ln147_7_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_imag_d0 = bitcast_ln147_5_fu_779_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_imag_d0 = bitcast_ln147_3_fu_765_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        xin_M_imag_d0 = bitcast_ln147_1_fu_751_p1;
    end else begin
        xin_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        xin_M_imag_we0 = 1'b1;
    end else begin
        xin_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xin_M_real_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_M_real_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_M_real_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        xin_M_real_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_M_real_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_M_real_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        xin_M_real_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        xin_M_real_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xin_M_real_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xin_M_real_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        xin_M_real_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        xin_M_real_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        xin_M_real_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xin_M_real_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        xin_M_real_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        xin_M_real_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        xin_M_real_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xin_M_real_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xin_M_real_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        xin_M_real_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xin_M_real_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xin_M_real_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        xin_M_real_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        xin_M_real_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_M_real_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_M_real_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_M_real_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_real_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_real_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_real_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_real_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        xin_M_real_address0 = 64'd0;
    end else begin
        xin_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        xin_M_real_ce0 = 1'b1;
    end else begin
        xin_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xin_M_real_d0 = bitcast_ln147_62_fu_1180_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        xin_M_real_d0 = bitcast_ln147_60_fu_1166_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        xin_M_real_d0 = bitcast_ln147_58_fu_1152_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        xin_M_real_d0 = bitcast_ln147_56_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        xin_M_real_d0 = bitcast_ln147_54_fu_1124_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        xin_M_real_d0 = bitcast_ln147_52_fu_1110_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        xin_M_real_d0 = bitcast_ln147_50_fu_1096_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        xin_M_real_d0 = bitcast_ln147_48_fu_1082_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        xin_M_real_d0 = bitcast_ln147_46_fu_1068_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        xin_M_real_d0 = bitcast_ln147_44_fu_1054_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        xin_M_real_d0 = bitcast_ln147_42_fu_1040_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        xin_M_real_d0 = bitcast_ln147_40_fu_1026_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        xin_M_real_d0 = bitcast_ln147_38_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        xin_M_real_d0 = bitcast_ln147_36_fu_998_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        xin_M_real_d0 = bitcast_ln147_34_fu_984_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        xin_M_real_d0 = bitcast_ln147_32_fu_970_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        xin_M_real_d0 = bitcast_ln147_30_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        xin_M_real_d0 = bitcast_ln147_28_fu_942_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xin_M_real_d0 = bitcast_ln147_26_fu_928_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        xin_M_real_d0 = bitcast_ln147_24_fu_914_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xin_M_real_d0 = bitcast_ln147_22_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        xin_M_real_d0 = bitcast_ln147_20_fu_886_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        xin_M_real_d0 = bitcast_ln147_18_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        xin_M_real_d0 = bitcast_ln147_16_fu_858_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        xin_M_real_d0 = bitcast_ln147_14_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        xin_M_real_d0 = bitcast_ln147_12_fu_830_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        xin_M_real_d0 = bitcast_ln147_10_fu_816_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        xin_M_real_d0 = bitcast_ln147_8_fu_802_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_real_d0 = bitcast_ln147_6_fu_788_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        xin_M_real_d0 = bitcast_ln147_4_fu_774_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_real_d0 = bitcast_ln147_2_fu_760_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        xin_M_real_d0 = bitcast_ln147_fu_746_p1;
    end else begin
        xin_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        xin_M_real_we0 = 1'b1;
    end else begin
        xin_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((data_IN_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (data_IN_TVALID_int == 1'b0) | (win_mode_out_full_n == 1'b0) | (win_mode_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign bitcast_ln147_10_fu_816_p1 = trunc_ln147_5_fu_812_p1;

assign bitcast_ln147_11_fu_821_p1 = grp_fu_732_p4;

assign bitcast_ln147_12_fu_830_p1 = trunc_ln147_6_fu_826_p1;

assign bitcast_ln147_13_fu_835_p1 = grp_fu_732_p4;

assign bitcast_ln147_14_fu_844_p1 = trunc_ln147_7_fu_840_p1;

assign bitcast_ln147_15_fu_849_p1 = grp_fu_732_p4;

assign bitcast_ln147_16_fu_858_p1 = trunc_ln147_8_fu_854_p1;

assign bitcast_ln147_17_fu_863_p1 = grp_fu_732_p4;

assign bitcast_ln147_18_fu_872_p1 = trunc_ln147_9_fu_868_p1;

assign bitcast_ln147_19_fu_877_p1 = grp_fu_732_p4;

assign bitcast_ln147_1_fu_751_p1 = grp_fu_732_p4;

assign bitcast_ln147_20_fu_886_p1 = trunc_ln147_10_fu_882_p1;

assign bitcast_ln147_21_fu_891_p1 = grp_fu_732_p4;

assign bitcast_ln147_22_fu_900_p1 = trunc_ln147_11_fu_896_p1;

assign bitcast_ln147_23_fu_905_p1 = grp_fu_732_p4;

assign bitcast_ln147_24_fu_914_p1 = trunc_ln147_12_fu_910_p1;

assign bitcast_ln147_25_fu_919_p1 = grp_fu_732_p4;

assign bitcast_ln147_26_fu_928_p1 = trunc_ln147_13_fu_924_p1;

assign bitcast_ln147_27_fu_933_p1 = grp_fu_732_p4;

assign bitcast_ln147_28_fu_942_p1 = trunc_ln147_14_fu_938_p1;

assign bitcast_ln147_29_fu_947_p1 = grp_fu_732_p4;

assign bitcast_ln147_2_fu_760_p1 = trunc_ln147_1_fu_756_p1;

assign bitcast_ln147_30_fu_956_p1 = trunc_ln147_15_fu_952_p1;

assign bitcast_ln147_31_fu_961_p1 = grp_fu_732_p4;

assign bitcast_ln147_32_fu_970_p1 = trunc_ln147_16_fu_966_p1;

assign bitcast_ln147_33_fu_975_p1 = grp_fu_732_p4;

assign bitcast_ln147_34_fu_984_p1 = trunc_ln147_17_fu_980_p1;

assign bitcast_ln147_35_fu_989_p1 = grp_fu_732_p4;

assign bitcast_ln147_36_fu_998_p1 = trunc_ln147_18_fu_994_p1;

assign bitcast_ln147_37_fu_1003_p1 = grp_fu_732_p4;

assign bitcast_ln147_38_fu_1012_p1 = trunc_ln147_19_fu_1008_p1;

assign bitcast_ln147_39_fu_1017_p1 = grp_fu_732_p4;

assign bitcast_ln147_3_fu_765_p1 = grp_fu_732_p4;

assign bitcast_ln147_40_fu_1026_p1 = trunc_ln147_20_fu_1022_p1;

assign bitcast_ln147_41_fu_1031_p1 = grp_fu_732_p4;

assign bitcast_ln147_42_fu_1040_p1 = trunc_ln147_21_fu_1036_p1;

assign bitcast_ln147_43_fu_1045_p1 = grp_fu_732_p4;

assign bitcast_ln147_44_fu_1054_p1 = trunc_ln147_22_fu_1050_p1;

assign bitcast_ln147_45_fu_1059_p1 = grp_fu_732_p4;

assign bitcast_ln147_46_fu_1068_p1 = trunc_ln147_23_fu_1064_p1;

assign bitcast_ln147_47_fu_1073_p1 = grp_fu_732_p4;

assign bitcast_ln147_48_fu_1082_p1 = trunc_ln147_24_fu_1078_p1;

assign bitcast_ln147_49_fu_1087_p1 = grp_fu_732_p4;

assign bitcast_ln147_4_fu_774_p1 = trunc_ln147_2_fu_770_p1;

assign bitcast_ln147_50_fu_1096_p1 = trunc_ln147_25_fu_1092_p1;

assign bitcast_ln147_51_fu_1101_p1 = grp_fu_732_p4;

assign bitcast_ln147_52_fu_1110_p1 = trunc_ln147_26_fu_1106_p1;

assign bitcast_ln147_53_fu_1115_p1 = grp_fu_732_p4;

assign bitcast_ln147_54_fu_1124_p1 = trunc_ln147_27_fu_1120_p1;

assign bitcast_ln147_55_fu_1129_p1 = grp_fu_732_p4;

assign bitcast_ln147_56_fu_1138_p1 = trunc_ln147_28_fu_1134_p1;

assign bitcast_ln147_57_fu_1143_p1 = grp_fu_732_p4;

assign bitcast_ln147_58_fu_1152_p1 = trunc_ln147_29_fu_1148_p1;

assign bitcast_ln147_59_fu_1157_p1 = grp_fu_732_p4;

assign bitcast_ln147_5_fu_779_p1 = grp_fu_732_p4;

assign bitcast_ln147_60_fu_1166_p1 = trunc_ln147_30_fu_1162_p1;

assign bitcast_ln147_61_fu_1171_p1 = grp_fu_732_p4;

assign bitcast_ln147_62_fu_1180_p1 = trunc_ln147_31_fu_1176_p1;

assign bitcast_ln147_63_fu_1185_p1 = grp_fu_732_p4;

assign bitcast_ln147_6_fu_788_p1 = trunc_ln147_3_fu_784_p1;

assign bitcast_ln147_7_fu_793_p1 = grp_fu_732_p4;

assign bitcast_ln147_8_fu_802_p1 = trunc_ln147_4_fu_798_p1;

assign bitcast_ln147_9_fu_807_p1 = grp_fu_732_p4;

assign bitcast_ln147_fu_746_p1 = trunc_ln147_fu_742_p1;

assign grp_fu_732_p4 = {{data_IN_TDATA_int[63:32]}};

assign trunc_ln147_10_fu_882_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_11_fu_896_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_12_fu_910_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_13_fu_924_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_14_fu_938_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_15_fu_952_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_16_fu_966_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_17_fu_980_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_18_fu_994_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_19_fu_1008_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_1_fu_756_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_20_fu_1022_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_21_fu_1036_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_22_fu_1050_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_23_fu_1064_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_24_fu_1078_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_25_fu_1092_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_26_fu_1106_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_27_fu_1120_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_28_fu_1134_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_29_fu_1148_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_2_fu_770_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_30_fu_1162_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_31_fu_1176_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_3_fu_784_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_4_fu_798_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_5_fu_812_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_6_fu_826_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_7_fu_840_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_8_fu_854_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_9_fu_868_p1 = data_IN_TDATA_int[31:0];

assign trunc_ln147_fu_742_p1 = data_IN_TDATA_int[31:0];

assign win_mode_out_din = win_mode_dout;

endmodule //Block_codeRepl124_pr
