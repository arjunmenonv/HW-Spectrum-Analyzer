-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_window is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    win_mode_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    win_mode_empty_n : IN STD_LOGIC;
    win_mode_read : OUT STD_LOGIC;
    xin_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xin_M_real_ce0 : OUT STD_LOGIC;
    xin_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xin_M_real_ce1 : OUT STD_LOGIC;
    xin_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xin_M_imag_ce0 : OUT STD_LOGIC;
    xin_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xin_M_imag_ce1 : OUT STD_LOGIC;
    xin_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_real_ce0 : OUT STD_LOGIC;
    prod_IN_M_real_we0 : OUT STD_LOGIC;
    prod_IN_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_real_ce1 : OUT STD_LOGIC;
    prod_IN_M_real_we1 : OUT STD_LOGIC;
    prod_IN_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_imag_ce0 : OUT STD_LOGIC;
    prod_IN_M_imag_we0 : OUT STD_LOGIC;
    prod_IN_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_imag_ce1 : OUT STD_LOGIC;
    prod_IN_M_imag_we1 : OUT STD_LOGIC;
    prod_IN_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mult_window is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Blackman32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Blackman32_ce0 : STD_LOGIC;
    signal Blackman32_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Blackman32_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Blackman32_ce1 : STD_LOGIC;
    signal Blackman32_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hamm32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Hamm32_ce0 : STD_LOGIC;
    signal Hamm32_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hamm32_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Hamm32_ce1 : STD_LOGIC;
    signal Hamm32_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Hann32_ce0 : STD_LOGIC;
    signal Hann32_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann32_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Hann32_ce1 : STD_LOGIC;
    signal Hann32_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_mode_blk_n : STD_LOGIC;
    signal i2_0_0_i_reg_358 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_0_0_i_reg_369 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_0_i_reg_380 : STD_LOGIC_VECTOR (5 downto 0);
    signal i4_0_0_i_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal win_mode_read_read_fu_90_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln45_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln49_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_reg_647 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln45_fu_491_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln37_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal zext_ln41_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_reg_676 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln37_fu_523_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln29_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal zext_ln33_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_1_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_1_reg_705 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln29_fu_555_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal add_ln52_fu_587_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln52_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state10_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state15_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state20_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln58_reg_728_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_728_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln61_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_732_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_reg_753_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_fu_623_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal p_r_M_real_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal p_r_M_imag_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_load_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_1_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_1_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_load_1_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_i_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_18_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_i_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i35_i_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i36_i_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i38_i_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i39_i_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_1_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_1_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal window_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_ce0 : STD_LOGIC;
    signal window_we0 : STD_LOGIC;
    signal window_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_ce1 : STD_LOGIC;
    signal window_we1 : STD_LOGIC;
    signal window_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_0_0_i_reg_391 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln54_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal empty_8_fu_471_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln45_fu_480_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_11_fu_503_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln37_fu_512_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_14_fu_535_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln29_fu_544_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_6_fu_572_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln52_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_17_fu_599_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln58_fu_610_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component FFT_fsub_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mult_window_Blackbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mult_window_Hamm32 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mult_window_Hann32 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mult_window_window IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Blackman32_U : component mult_window_Blackbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Blackman32_address0,
        ce0 => Blackman32_ce0,
        q0 => Blackman32_q0,
        address1 => Blackman32_address1,
        ce1 => Blackman32_ce1,
        q1 => Blackman32_q1);

    Hamm32_U : component mult_window_Hamm32
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hamm32_address0,
        ce0 => Hamm32_ce0,
        q0 => Hamm32_q0,
        address1 => Hamm32_address1,
        ce1 => Hamm32_ce1,
        q1 => Hamm32_q1);

    Hann32_U : component mult_window_Hann32
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann32_address0,
        ce0 => Hann32_ce0,
        q0 => Hann32_q0,
        address1 => Hann32_address1,
        ce1 => Hann32_ce1,
        q1 => Hann32_q1);

    window_U : component mult_window_window
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_address0,
        ce0 => window_ce0,
        we0 => window_we0,
        d0 => window_d0,
        q0 => window_q0,
        address1 => window_address1,
        ce1 => window_ce1,
        we1 => window_we1,
        d1 => window_d1,
        q1 => window_q1);

    FFT_fsub_32ns_32ncud_U9 : component FFT_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_reg_815,
        din1 => tmp_8_i_i_i_reg_820,
        ce => ap_const_logic_1,
        dout => grp_fu_413_p2);

    FFT_fadd_32ns_32ndEe_U10 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_18_reg_825,
        din1 => tmp_1_i_i_i_reg_830,
        ce => ap_const_logic_1,
        dout => grp_fu_417_p2);

    FFT_fsub_32ns_32ncud_U11 : component FFT_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i35_i_reg_835,
        din1 => tmp_8_i_i36_i_reg_840,
        ce => ap_const_logic_1,
        dout => grp_fu_421_p2);

    FFT_fadd_32ns_32ndEe_U12 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i38_i_reg_845,
        din1 => tmp_1_i_i39_i_reg_850,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    FFT_fmul_32ns_32neOg_U13 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_779,
        din1 => window_load_reg_791,
        ce => ap_const_logic_1,
        dout => grp_fu_429_p2);

    FFT_fmul_32ns_32neOg_U14 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_785,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p2);

    FFT_fmul_32ns_32neOg_U15 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_785,
        din1 => window_load_reg_791,
        ce => ap_const_logic_1,
        dout => grp_fu_438_p2);

    FFT_fmul_32ns_32neOg_U16 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_779,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_442_p2);

    FFT_fmul_32ns_32neOg_U17 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_1_reg_797,
        din1 => window_load_1_reg_809,
        ce => ap_const_logic_1,
        dout => grp_fu_447_p2);

    FFT_fmul_32ns_32neOg_U18 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_1_reg_803,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);

    FFT_fmul_32ns_32neOg_U19 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_1_reg_803,
        din1 => window_load_1_reg_809,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p2);

    FFT_fmul_32ns_32neOg_U20 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_1_reg_797,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_460_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state10)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    i1_0_0_i_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_2))) then 
                i1_0_0_i_reg_369 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln37_fu_497_p2 = ap_const_lv1_0))) then 
                i1_0_0_i_reg_369 <= add_ln37_fu_523_p2;
            end if; 
        end if;
    end process;

    i2_0_0_i_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_4))) then 
                i2_0_0_i_reg_358 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_465_p2 = ap_const_lv1_0))) then 
                i2_0_0_i_reg_358 <= add_ln45_fu_491_p2;
            end if; 
        end if;
    end process;

    i3_0_0_i_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((win_mode_read_read_fu_90_p2 = ap_const_lv8_1)) and not((win_mode_read_read_fu_90_p2 = ap_const_lv8_2)) and not((win_mode_read_read_fu_90_p2 = ap_const_lv8_4)) and not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i3_0_0_i_reg_391 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln52_fu_561_p2 = ap_const_lv1_0))) then 
                i3_0_0_i_reg_391 <= add_ln52_fu_587_p2;
            end if; 
        end if;
    end process;

    i4_0_0_i_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln58_fu_593_p2 = ap_const_lv1_0))) then 
                i4_0_0_i_reg_402 <= add_ln58_fu_623_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i4_0_0_i_reg_402 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_0_i_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_1))) then 
                i_0_0_i_reg_380 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln29_fu_529_p2 = ap_const_lv1_0))) then 
                i_0_0_i_reg_380 <= add_ln29_fu_555_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln58_reg_728_pp3_iter9_reg = ap_const_lv1_0))) then
                complex_M_imag_writ_1_reg_870 <= grp_fu_425_p2;
                complex_M_imag_writ_reg_860 <= grp_fu_417_p2;
                complex_M_real_writ_1_reg_865 <= grp_fu_421_p2;
                complex_M_real_writ_reg_855 <= grp_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln29_reg_691 <= icmp_ln29_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln37_reg_662 <= icmp_ln37_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln45_reg_633 <= icmp_ln45_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln58_reg_728 <= icmp_ln58_fu_593_p2;
                icmp_ln58_reg_728_pp3_iter1_reg <= icmp_ln58_reg_728;
                    zext_ln61_1_reg_753_pp3_iter1_reg(4 downto 1) <= zext_ln61_1_reg_753(4 downto 1);
                    zext_ln61_reg_732_pp3_iter1_reg(5 downto 0) <= zext_ln61_reg_732(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln58_reg_728_pp3_iter10_reg <= icmp_ln58_reg_728_pp3_iter9_reg;
                icmp_ln58_reg_728_pp3_iter2_reg <= icmp_ln58_reg_728_pp3_iter1_reg;
                icmp_ln58_reg_728_pp3_iter3_reg <= icmp_ln58_reg_728_pp3_iter2_reg;
                icmp_ln58_reg_728_pp3_iter4_reg <= icmp_ln58_reg_728_pp3_iter3_reg;
                icmp_ln58_reg_728_pp3_iter5_reg <= icmp_ln58_reg_728_pp3_iter4_reg;
                icmp_ln58_reg_728_pp3_iter6_reg <= icmp_ln58_reg_728_pp3_iter5_reg;
                icmp_ln58_reg_728_pp3_iter7_reg <= icmp_ln58_reg_728_pp3_iter6_reg;
                icmp_ln58_reg_728_pp3_iter8_reg <= icmp_ln58_reg_728_pp3_iter7_reg;
                icmp_ln58_reg_728_pp3_iter9_reg <= icmp_ln58_reg_728_pp3_iter8_reg;
                    zext_ln61_1_reg_753_pp3_iter10_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter9_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter2_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter1_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter3_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter2_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter4_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter3_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter5_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter4_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter6_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter5_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter7_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter6_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter8_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter7_reg(4 downto 1);
                    zext_ln61_1_reg_753_pp3_iter9_reg(4 downto 1) <= zext_ln61_1_reg_753_pp3_iter8_reg(4 downto 1);
                    zext_ln61_reg_732_pp3_iter10_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter9_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter2_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter1_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter3_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter2_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter4_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter3_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter5_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter4_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter6_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter5_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter7_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter6_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter8_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter7_reg(5 downto 0);
                    zext_ln61_reg_732_pp3_iter9_reg(5 downto 0) <= zext_ln61_reg_732_pp3_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln58_reg_728 = ap_const_lv1_0))) then
                p_r_M_imag_1_reg_803 <= xin_M_imag_q1;
                p_r_M_imag_reg_785 <= xin_M_imag_q0;
                p_r_M_real_1_reg_797 <= xin_M_real_q1;
                p_r_M_real_reg_779 <= xin_M_real_q0;
                window_load_1_reg_809 <= window_q1;
                window_load_reg_791 <= window_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln58_reg_728_pp3_iter4_reg = ap_const_lv1_0))) then
                tmp_1_i_i39_i_reg_850 <= grp_fu_460_p2;
                tmp_1_i_i_i_reg_830 <= grp_fu_442_p2;
                tmp_8_i_i36_i_reg_840 <= grp_fu_451_p2;
                tmp_8_i_i_i_reg_820 <= grp_fu_433_p2;
                tmp_i_i35_i_reg_835 <= grp_fu_447_p2;
                tmp_i_i38_i_reg_845 <= grp_fu_456_p2;
                tmp_i_i_i_18_reg_825 <= grp_fu_438_p2;
                tmp_i_i_i_reg_815 <= grp_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln29_fu_529_p2 = ap_const_lv1_0))) then
                    zext_ln33_1_reg_705(4 downto 1) <= zext_ln33_1_fu_550_p1(4 downto 1);
                    zext_ln33_reg_695(5 downto 0) <= zext_ln33_fu_539_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln37_fu_497_p2 = ap_const_lv1_0))) then
                    zext_ln41_1_reg_676(4 downto 1) <= zext_ln41_1_fu_518_p1(4 downto 1);
                    zext_ln41_reg_666(5 downto 0) <= zext_ln41_fu_507_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_465_p2 = ap_const_lv1_0))) then
                    zext_ln49_1_reg_647(4 downto 1) <= zext_ln49_1_fu_486_p1(4 downto 1);
                    zext_ln49_reg_637(5 downto 0) <= zext_ln49_fu_475_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln58_fu_593_p2 = ap_const_lv1_0))) then
                    zext_ln61_1_reg_753(4 downto 1) <= zext_ln61_1_fu_616_p1(4 downto 1);
                    zext_ln61_reg_732(5 downto 0) <= zext_ln61_fu_603_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln49_reg_637(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln49_1_reg_647(0) <= '1';
    zext_ln49_1_reg_647(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln41_reg_666(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln41_1_reg_676(0) <= '1';
    zext_ln41_1_reg_676(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln33_reg_695(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln33_1_reg_705(0) <= '1';
    zext_ln33_1_reg_705(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_reg_732_pp3_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753(0) <= '1';
    zext_ln61_1_reg_753(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter1_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter2_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter3_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter4_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter5_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter6_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter7_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter8_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter9_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln61_1_reg_753_pp3_iter10_reg(0) <= '1';
    zext_ln61_1_reg_753_pp3_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, win_mode_empty_n, win_mode_read_read_fu_90_p2, icmp_ln45_fu_465_p2, ap_enable_reg_pp0_iter0, icmp_ln37_fu_497_p2, ap_enable_reg_pp1_iter0, icmp_ln29_fu_529_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state9, icmp_ln52_fu_561_p2, icmp_ln58_fu_593_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((win_mode_read_read_fu_90_p2 = ap_const_lv8_1)) and not((win_mode_read_read_fu_90_p2 = ap_const_lv8_2)) and not((win_mode_read_read_fu_90_p2 = ap_const_lv8_4)) and not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (win_mode_read_read_fu_90_p2 = ap_const_lv8_4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_465_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_465_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln37_fu_497_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln37_fu_497_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln29_fu_529_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln29_fu_529_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln52_fu_561_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln58_fu_593_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln58_fu_593_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    Blackman32_address0 <= zext_ln49_fu_475_p1(5 - 1 downto 0);
    Blackman32_address1 <= zext_ln49_1_fu_486_p1(5 - 1 downto 0);

    Blackman32_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Blackman32_ce0 <= ap_const_logic_1;
        else 
            Blackman32_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Blackman32_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Blackman32_ce1 <= ap_const_logic_1;
        else 
            Blackman32_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Hamm32_address0 <= zext_ln41_fu_507_p1(5 - 1 downto 0);
    Hamm32_address1 <= zext_ln41_1_fu_518_p1(5 - 1 downto 0);

    Hamm32_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            Hamm32_ce0 <= ap_const_logic_1;
        else 
            Hamm32_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hamm32_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            Hamm32_ce1 <= ap_const_logic_1;
        else 
            Hamm32_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Hann32_address0 <= zext_ln33_fu_539_p1(5 - 1 downto 0);
    Hann32_address1 <= zext_ln33_1_fu_550_p1(5 - 1 downto 0);

    Hann32_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Hann32_ce0 <= ap_const_logic_1;
        else 
            Hann32_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann32_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Hann32_ce1 <= ap_const_logic_1;
        else 
            Hann32_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln29_fu_555_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(i_0_0_i_reg_380));
    add_ln37_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(i1_0_0_i_reg_369));
    add_ln45_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(i2_0_0_i_reg_358));
    add_ln52_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(i3_0_0_i_reg_391));
    add_ln58_fu_623_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(i4_0_0_i_reg_402));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(7);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, win_mode_empty_n)
    begin
                ap_block_state1 <= ((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln45_fu_465_p2)
    begin
        if ((icmp_ln45_fu_465_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln37_fu_497_p2)
    begin
        if ((icmp_ln37_fu_497_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln29_fu_529_p2)
    begin
        if ((icmp_ln29_fu_529_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state10_assign_proc : process(icmp_ln58_fu_593_p2)
    begin
        if ((icmp_ln58_fu_593_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_11_fu_503_p1 <= i1_0_0_i_reg_369(5 - 1 downto 0);
    empty_14_fu_535_p1 <= i_0_0_i_reg_380(5 - 1 downto 0);
    empty_17_fu_599_p1 <= i4_0_0_i_reg_402(5 - 1 downto 0);
    empty_6_fu_572_p1 <= i3_0_0_i_reg_391(5 - 1 downto 0);
    empty_8_fu_471_p1 <= i2_0_0_i_reg_358(5 - 1 downto 0);
    icmp_ln29_fu_529_p2 <= "1" when (i_0_0_i_reg_380 = ap_const_lv6_20) else "0";
    icmp_ln37_fu_497_p2 <= "1" when (i1_0_0_i_reg_369 = ap_const_lv6_20) else "0";
    icmp_ln45_fu_465_p2 <= "1" when (i2_0_0_i_reg_358 = ap_const_lv6_20) else "0";
    icmp_ln52_fu_561_p2 <= "1" when (i3_0_0_i_reg_391 = ap_const_lv6_20) else "0";
    icmp_ln58_fu_593_p2 <= "1" when (i4_0_0_i_reg_402 = ap_const_lv6_20) else "0";
    or_ln29_fu_544_p2 <= (empty_14_fu_535_p1 or ap_const_lv5_1);
    or_ln37_fu_512_p2 <= (empty_11_fu_503_p1 or ap_const_lv5_1);
    or_ln45_fu_480_p2 <= (empty_8_fu_471_p1 or ap_const_lv5_1);
    or_ln52_fu_576_p2 <= (empty_6_fu_572_p1 or ap_const_lv5_1);
    or_ln58_fu_610_p2 <= (empty_17_fu_599_p1 or ap_const_lv5_1);
    prod_IN_M_imag_address0 <= zext_ln61_reg_732_pp3_iter10_reg(5 - 1 downto 0);
    prod_IN_M_imag_address1 <= zext_ln61_1_reg_753_pp3_iter10_reg(5 - 1 downto 0);

    prod_IN_M_imag_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))) then 
            prod_IN_M_imag_ce0 <= ap_const_logic_1;
        else 
            prod_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_ce1_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))) then 
            prod_IN_M_imag_ce1 <= ap_const_logic_1;
        else 
            prod_IN_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    prod_IN_M_imag_d0 <= complex_M_imag_writ_reg_860;
    prod_IN_M_imag_d1 <= complex_M_imag_writ_1_reg_870;

    prod_IN_M_imag_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln58_reg_728_pp3_iter10_reg, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1) and (icmp_ln58_reg_728_pp3_iter10_reg = ap_const_lv1_0))) then 
            prod_IN_M_imag_we0 <= ap_const_logic_1;
        else 
            prod_IN_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_we1_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln58_reg_728_pp3_iter10_reg, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1) and (icmp_ln58_reg_728_pp3_iter10_reg = ap_const_lv1_0))) then 
            prod_IN_M_imag_we1 <= ap_const_logic_1;
        else 
            prod_IN_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;

    prod_IN_M_real_address0 <= zext_ln61_reg_732_pp3_iter10_reg(5 - 1 downto 0);
    prod_IN_M_real_address1 <= zext_ln61_1_reg_753_pp3_iter10_reg(5 - 1 downto 0);

    prod_IN_M_real_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))) then 
            prod_IN_M_real_ce0 <= ap_const_logic_1;
        else 
            prod_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_ce1_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))) then 
            prod_IN_M_real_ce1 <= ap_const_logic_1;
        else 
            prod_IN_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    prod_IN_M_real_d0 <= complex_M_real_writ_reg_855;
    prod_IN_M_real_d1 <= complex_M_real_writ_1_reg_865;

    prod_IN_M_real_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln58_reg_728_pp3_iter10_reg, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1) and (icmp_ln58_reg_728_pp3_iter10_reg = ap_const_lv1_0))) then 
            prod_IN_M_real_we0 <= ap_const_logic_1;
        else 
            prod_IN_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_we1_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln58_reg_728_pp3_iter10_reg, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1) and (icmp_ln58_reg_728_pp3_iter10_reg = ap_const_lv1_0))) then 
            prod_IN_M_real_we1 <= ap_const_logic_1;
        else 
            prod_IN_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    win_mode_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, win_mode_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            win_mode_blk_n <= win_mode_empty_n;
        else 
            win_mode_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    win_mode_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, win_mode_empty_n)
    begin
        if ((not(((win_mode_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            win_mode_read <= ap_const_logic_1;
        else 
            win_mode_read <= ap_const_logic_0;
        end if; 
    end process;

    win_mode_read_read_fu_90_p2 <= win_mode_dout;

    window_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln49_reg_637, ap_CS_fsm_pp1_stage0, zext_ln41_reg_666, ap_CS_fsm_pp2_stage0, zext_ln33_reg_695, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, zext_ln61_fu_603_p1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln54_fu_567_p1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            window_address0 <= zext_ln61_fu_603_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_address0 <= zext_ln54_fu_567_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            window_address0 <= zext_ln33_reg_695(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            window_address0 <= zext_ln41_reg_666(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            window_address0 <= zext_ln49_reg_637(5 - 1 downto 0);
        else 
            window_address0 <= "XXXXX";
        end if; 
    end process;


    window_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln49_1_reg_647, ap_CS_fsm_pp1_stage0, zext_ln41_1_reg_676, ap_CS_fsm_pp2_stage0, zext_ln33_1_reg_705, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, zext_ln61_1_fu_616_p1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln54_1_fu_582_p1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            window_address1 <= zext_ln61_1_fu_616_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_address1 <= zext_ln54_1_fu_582_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            window_address1 <= zext_ln33_1_reg_705(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            window_address1 <= zext_ln41_1_reg_676(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            window_address1 <= zext_ln49_1_reg_647(5 - 1 downto 0);
        else 
            window_address1 <= "XXXXX";
        end if; 
    end process;


    window_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            window_ce0 <= ap_const_logic_1;
        else 
            window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            window_ce1 <= ap_const_logic_1;
        else 
            window_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    window_d0_assign_proc : process(Blackman32_q0, Hamm32_q0, Hann32_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_d0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            window_d0 <= Hann32_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            window_d0 <= Hamm32_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            window_d0 <= Blackman32_q0;
        else 
            window_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    window_d1_assign_proc : process(Blackman32_q1, Hamm32_q1, Hann32_q1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_d1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            window_d1 <= Hann32_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            window_d1 <= Hamm32_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            window_d1 <= Blackman32_q1;
        else 
            window_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    window_we0_assign_proc : process(icmp_ln45_reg_633, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln37_reg_662, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln29_reg_691, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state9, icmp_ln52_fu_561_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln52_fu_561_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln29_reg_691 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln37_reg_662 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_633 = ap_const_lv1_0)))) then 
            window_we0 <= ap_const_logic_1;
        else 
            window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    window_we1_assign_proc : process(icmp_ln45_reg_633, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln37_reg_662, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln29_reg_691, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state9, icmp_ln52_fu_561_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln52_fu_561_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln29_reg_691 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln37_reg_662 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_633 = ap_const_lv1_0)))) then 
            window_we1 <= ap_const_logic_1;
        else 
            window_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xin_M_imag_address0 <= zext_ln61_fu_603_p1(5 - 1 downto 0);
    xin_M_imag_address1 <= zext_ln61_1_fu_616_p1(5 - 1 downto 0);

    xin_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            xin_M_imag_ce0 <= ap_const_logic_1;
        else 
            xin_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_imag_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            xin_M_imag_ce1 <= ap_const_logic_1;
        else 
            xin_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xin_M_real_address0 <= zext_ln61_fu_603_p1(5 - 1 downto 0);
    xin_M_real_address1 <= zext_ln61_1_fu_616_p1(5 - 1 downto 0);

    xin_M_real_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            xin_M_real_ce0 <= ap_const_logic_1;
        else 
            xin_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            xin_M_real_ce1 <= ap_const_logic_1;
        else 
            xin_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln33_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_fu_544_p2),64));
    zext_ln33_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_i_reg_380),64));
    zext_ln41_1_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln37_fu_512_p2),64));
    zext_ln41_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_0_i_reg_369),64));
    zext_ln49_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_fu_480_p2),64));
    zext_ln49_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_0_i_reg_358),64));
    zext_ln54_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_fu_576_p2),64));
    zext_ln54_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_0_i_reg_391),64));
    zext_ln61_1_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_fu_610_p2),64));
    zext_ln61_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_0_i_reg_402),64));
end behav;
