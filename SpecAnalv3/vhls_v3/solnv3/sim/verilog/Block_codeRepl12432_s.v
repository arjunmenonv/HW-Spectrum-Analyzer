// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_codeRepl12432_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mag_OUT_TDATA,
        mag_OUT_TVALID,
        mag_OUT_TREADY,
        data_OUT_TDATA,
        data_OUT_TVALID,
        data_OUT_TREADY,
        data_OUTfft_M_imag_address0,
        data_OUTfft_M_imag_ce0,
        data_OUTfft_M_imag_q0,
        data_OUTfft_M_real_address0,
        data_OUTfft_M_real_ce0,
        data_OUTfft_M_real_q0
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_pp0_stage0 = 36'd2;
parameter    ap_ST_fsm_state35 = 36'd4;
parameter    ap_ST_fsm_state36 = 36'd8;
parameter    ap_ST_fsm_state37 = 36'd16;
parameter    ap_ST_fsm_state38 = 36'd32;
parameter    ap_ST_fsm_state39 = 36'd64;
parameter    ap_ST_fsm_state40 = 36'd128;
parameter    ap_ST_fsm_state41 = 36'd256;
parameter    ap_ST_fsm_state42 = 36'd512;
parameter    ap_ST_fsm_state43 = 36'd1024;
parameter    ap_ST_fsm_state44 = 36'd2048;
parameter    ap_ST_fsm_state45 = 36'd4096;
parameter    ap_ST_fsm_state46 = 36'd8192;
parameter    ap_ST_fsm_state47 = 36'd16384;
parameter    ap_ST_fsm_state48 = 36'd32768;
parameter    ap_ST_fsm_state49 = 36'd65536;
parameter    ap_ST_fsm_state50 = 36'd131072;
parameter    ap_ST_fsm_state51 = 36'd262144;
parameter    ap_ST_fsm_state52 = 36'd524288;
parameter    ap_ST_fsm_state53 = 36'd1048576;
parameter    ap_ST_fsm_state54 = 36'd2097152;
parameter    ap_ST_fsm_state55 = 36'd4194304;
parameter    ap_ST_fsm_state56 = 36'd8388608;
parameter    ap_ST_fsm_state57 = 36'd16777216;
parameter    ap_ST_fsm_state58 = 36'd33554432;
parameter    ap_ST_fsm_state59 = 36'd67108864;
parameter    ap_ST_fsm_state60 = 36'd134217728;
parameter    ap_ST_fsm_state61 = 36'd268435456;
parameter    ap_ST_fsm_state62 = 36'd536870912;
parameter    ap_ST_fsm_state63 = 36'd1073741824;
parameter    ap_ST_fsm_state64 = 36'd2147483648;
parameter    ap_ST_fsm_state65 = 36'd4294967296;
parameter    ap_ST_fsm_state66 = 36'd8589934592;
parameter    ap_ST_fsm_state67 = 36'd17179869184;
parameter    ap_ST_fsm_state68 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] mag_OUT_TDATA;
output   mag_OUT_TVALID;
input   mag_OUT_TREADY;
output  [63:0] data_OUT_TDATA;
output   data_OUT_TVALID;
input   data_OUT_TREADY;
output  [4:0] data_OUTfft_M_imag_address0;
output   data_OUTfft_M_imag_ce0;
input  [31:0] data_OUTfft_M_imag_q0;
output  [4:0] data_OUTfft_M_real_address0;
output   data_OUTfft_M_real_ce0;
input  [31:0] data_OUTfft_M_real_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] data_OUTfft_M_imag_address0;
reg data_OUTfft_M_imag_ce0;
reg[4:0] data_OUTfft_M_real_address0;
reg data_OUTfft_M_real_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] xout_mag_address0;
reg    xout_mag_ce0;
reg    xout_mag_we0;
wire   [31:0] xout_mag_q0;
reg    mag_OUT_TDATA_blk_n;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
reg    data_OUT_TDATA_blk_n;
reg   [5:0] i_0_i_reg_780;
reg    ap_block_state36_io;
reg    ap_block_state37_io;
reg    ap_block_state38_io;
reg    ap_block_state39_io;
reg    ap_block_state40_io;
reg    ap_block_state41_io;
reg    ap_block_state42_io;
reg    ap_block_state43_io;
reg    ap_block_state44_io;
reg    ap_block_state45_io;
reg    ap_block_state46_io;
reg    ap_block_state47_io;
reg    ap_block_state48_io;
reg    ap_block_state49_io;
reg    ap_block_state50_io;
reg    ap_block_state51_io;
reg    ap_block_state52_io;
reg    ap_block_state53_io;
reg    ap_block_state54_io;
reg    ap_block_state55_io;
reg    ap_block_state56_io;
reg    ap_block_state57_io;
reg    ap_block_state58_io;
reg    ap_block_state59_io;
reg    ap_block_state60_io;
reg    ap_block_state61_io;
reg    ap_block_state62_io;
reg    ap_block_state63_io;
reg    ap_block_state64_io;
reg    ap_block_state65_io;
reg    ap_block_state66_io;
reg    ap_block_state67_io;
reg    ap_block_state1;
wire   [0:0] icmp_ln98_fu_823_p2;
reg   [0:0] icmp_ln98_reg_1705;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter1_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter2_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter3_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter4_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter5_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter6_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter7_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter8_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter9_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter10_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter11_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter12_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter13_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter14_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter15_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter16_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter17_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter18_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter19_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter20_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter21_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter22_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter23_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter24_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter25_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter26_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter27_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter28_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter29_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter30_reg;
reg   [0:0] icmp_ln98_reg_1705_pp0_iter31_reg;
wire   [5:0] i_fu_829_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln111_fu_835_p1;
reg   [63:0] zext_ln111_reg_1714;
reg   [63:0] zext_ln111_reg_1714_pp0_iter1_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter2_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter3_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter4_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter5_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter6_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter7_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter8_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter9_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter10_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter11_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter12_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter13_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter14_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter15_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter16_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter17_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter18_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter19_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter20_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter21_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter22_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter23_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter24_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter25_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter26_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter27_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter28_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter29_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter30_reg;
reg   [63:0] zext_ln111_reg_1714_pp0_iter31_reg;
reg   [31:0] data_OUTfft_M_real_34_reg_1729;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] data_OUTfft_M_imag_34_reg_1735;
wire   [31:0] grp_fu_795_p2;
reg   [31:0] tmp_i_reg_1741;
wire   [31:0] grp_fu_799_p2;
reg   [31:0] tmp_i_32_reg_1746;
wire   [31:0] grp_fu_791_p2;
reg   [31:0] p_x_assign_reg_1751;
wire   [31:0] grp_fu_813_p2;
reg   [31:0] tmp_i_i_i_i_i_reg_1756;
wire   [31:0] grp_fu_803_p2;
reg   [31:0] tmp_i_i_i_i_reg_1761;
wire   [31:0] grp_fu_808_p2;
reg   [31:0] tmp_5_i_reg_1766;
wire   [63:0] data_OUT_M_imag_add_fu_849_p3;
wire   [63:0] data_OUT_M_imag_add_1_fu_866_p3;
wire   [63:0] data_OUT_M_imag_add_2_fu_883_p3;
wire   [63:0] data_OUT_M_imag_add_3_fu_900_p3;
wire   [63:0] data_OUT_M_imag_add_4_fu_917_p3;
wire   [63:0] data_OUT_M_imag_add_5_fu_934_p3;
wire   [63:0] data_OUT_M_imag_add_6_fu_951_p3;
wire   [63:0] data_OUT_M_imag_add_7_fu_968_p3;
wire   [63:0] data_OUT_M_imag_add_8_fu_985_p3;
wire   [63:0] data_OUT_M_imag_add_9_fu_1002_p3;
wire   [63:0] data_OUT_M_imag_add_31_fu_1019_p3;
wire   [63:0] data_OUT_M_imag_add_10_fu_1036_p3;
wire   [63:0] data_OUT_M_imag_add_11_fu_1053_p3;
wire   [63:0] data_OUT_M_imag_add_12_fu_1070_p3;
wire   [63:0] data_OUT_M_imag_add_13_fu_1087_p3;
wire   [63:0] data_OUT_M_imag_add_14_fu_1104_p3;
wire   [63:0] data_OUT_M_imag_add_15_fu_1121_p3;
wire   [63:0] data_OUT_M_imag_add_16_fu_1138_p3;
wire   [63:0] data_OUT_M_imag_add_17_fu_1155_p3;
wire   [63:0] data_OUT_M_imag_add_18_fu_1172_p3;
wire   [63:0] data_OUT_M_imag_add_19_fu_1189_p3;
wire   [63:0] data_OUT_M_imag_add_20_fu_1206_p3;
wire   [63:0] data_OUT_M_imag_add_21_fu_1223_p3;
wire   [63:0] data_OUT_M_imag_add_22_fu_1240_p3;
wire   [63:0] data_OUT_M_imag_add_23_fu_1257_p3;
wire   [63:0] data_OUT_M_imag_add_24_fu_1274_p3;
wire   [63:0] data_OUT_M_imag_add_25_fu_1291_p3;
wire   [63:0] data_OUT_M_imag_add_26_fu_1308_p3;
wire   [63:0] data_OUT_M_imag_add_27_fu_1325_p3;
wire   [63:0] data_OUT_M_imag_add_28_fu_1342_p3;
wire   [63:0] data_OUT_M_imag_add_29_fu_1359_p3;
wire   [63:0] data_OUT_M_imag_add_30_fu_1376_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state35;
wire   [31:0] bitcast_ln162_1_fu_845_p1;
wire   [31:0] bitcast_ln162_fu_841_p1;
wire   [31:0] bitcast_ln162_3_fu_862_p1;
wire   [31:0] bitcast_ln162_2_fu_858_p1;
wire   [31:0] bitcast_ln162_5_fu_879_p1;
wire   [31:0] bitcast_ln162_4_fu_875_p1;
wire   [31:0] bitcast_ln162_7_fu_896_p1;
wire   [31:0] bitcast_ln162_6_fu_892_p1;
wire   [31:0] bitcast_ln162_9_fu_913_p1;
wire   [31:0] bitcast_ln162_8_fu_909_p1;
wire   [31:0] bitcast_ln162_11_fu_930_p1;
wire   [31:0] bitcast_ln162_10_fu_926_p1;
wire   [31:0] bitcast_ln162_13_fu_947_p1;
wire   [31:0] bitcast_ln162_12_fu_943_p1;
wire   [31:0] bitcast_ln162_15_fu_964_p1;
wire   [31:0] bitcast_ln162_14_fu_960_p1;
wire   [31:0] bitcast_ln162_17_fu_981_p1;
wire   [31:0] bitcast_ln162_16_fu_977_p1;
wire   [31:0] bitcast_ln162_19_fu_998_p1;
wire   [31:0] bitcast_ln162_18_fu_994_p1;
wire   [31:0] bitcast_ln162_21_fu_1015_p1;
wire   [31:0] bitcast_ln162_20_fu_1011_p1;
wire   [31:0] bitcast_ln162_23_fu_1032_p1;
wire   [31:0] bitcast_ln162_22_fu_1028_p1;
wire   [31:0] bitcast_ln162_25_fu_1049_p1;
wire   [31:0] bitcast_ln162_24_fu_1045_p1;
wire   [31:0] bitcast_ln162_27_fu_1066_p1;
wire   [31:0] bitcast_ln162_26_fu_1062_p1;
wire   [31:0] bitcast_ln162_29_fu_1083_p1;
wire   [31:0] bitcast_ln162_28_fu_1079_p1;
wire   [31:0] bitcast_ln162_31_fu_1100_p1;
wire   [31:0] bitcast_ln162_30_fu_1096_p1;
wire   [31:0] bitcast_ln162_33_fu_1117_p1;
wire   [31:0] bitcast_ln162_32_fu_1113_p1;
wire   [31:0] bitcast_ln162_35_fu_1134_p1;
wire   [31:0] bitcast_ln162_34_fu_1130_p1;
wire   [31:0] bitcast_ln162_37_fu_1151_p1;
wire   [31:0] bitcast_ln162_36_fu_1147_p1;
wire   [31:0] bitcast_ln162_39_fu_1168_p1;
wire   [31:0] bitcast_ln162_38_fu_1164_p1;
wire   [31:0] bitcast_ln162_41_fu_1185_p1;
wire   [31:0] bitcast_ln162_40_fu_1181_p1;
wire   [31:0] bitcast_ln162_43_fu_1202_p1;
wire   [31:0] bitcast_ln162_42_fu_1198_p1;
wire   [31:0] bitcast_ln162_45_fu_1219_p1;
wire   [31:0] bitcast_ln162_44_fu_1215_p1;
wire   [31:0] bitcast_ln162_47_fu_1236_p1;
wire   [31:0] bitcast_ln162_46_fu_1232_p1;
wire   [31:0] bitcast_ln162_49_fu_1253_p1;
wire   [31:0] bitcast_ln162_48_fu_1249_p1;
wire   [31:0] bitcast_ln162_51_fu_1270_p1;
wire   [31:0] bitcast_ln162_50_fu_1266_p1;
wire   [31:0] bitcast_ln162_53_fu_1287_p1;
wire   [31:0] bitcast_ln162_52_fu_1283_p1;
wire   [31:0] bitcast_ln162_55_fu_1304_p1;
wire   [31:0] bitcast_ln162_54_fu_1300_p1;
wire   [31:0] bitcast_ln162_57_fu_1321_p1;
wire   [31:0] bitcast_ln162_56_fu_1317_p1;
wire   [31:0] bitcast_ln162_59_fu_1338_p1;
wire   [31:0] bitcast_ln162_58_fu_1334_p1;
wire   [31:0] bitcast_ln162_61_fu_1355_p1;
wire   [31:0] bitcast_ln162_60_fu_1351_p1;
wire   [31:0] bitcast_ln162_63_fu_1372_p1;
wire   [31:0] bitcast_ln162_62_fu_1368_p1;
wire    regslice_both_mag_OUT_U_apdone_blk;
wire    regslice_both_data_OUT_U_apdone_blk;
reg    ap_block_state68;
reg    ap_block_state68_io;
reg   [35:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    mag_OUT_TVALID_int;
wire    mag_OUT_TREADY_int;
wire    regslice_both_mag_OUT_U_vld_out;
reg   [63:0] data_OUT_TDATA_int;
reg    data_OUT_TVALID_int;
wire    data_OUT_TREADY_int;
wire    regslice_both_data_OUT_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 36'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
end

Block_codeRepl124fYi #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xout_mag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xout_mag_address0),
    .ce0(xout_mag_ce0),
    .we0(xout_mag_we0),
    .d0(tmp_5_i_reg_1766),
    .q0(xout_mag_q0)
);

FFT_fadd_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32ndEe_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_1741),
    .din1(tmp_i_32_reg_1746),
    .ce(1'b1),
    .dout(grp_fu_791_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_OUTfft_M_real_34_reg_1729),
    .din1(data_OUTfft_M_real_34_reg_1729),
    .ce(1'b1),
    .dout(grp_fu_795_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_OUTfft_M_imag_34_reg_1735),
    .din1(data_OUTfft_M_imag_34_reg_1735),
    .ce(1'b1),
    .dout(grp_fu_799_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_i_i_i_reg_1756),
    .din1(32'd1054759897),
    .ce(1'b1),
    .dout(grp_fu_803_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_i_i_reg_1761),
    .din1(32'd1092616192),
    .ce(1'b1),
    .dout(grp_fu_808_p2)
);

FFT_flog_32ns_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_flog_32ns_32ng8j_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(p_x_assign_reg_1751),
    .ce(1'b1),
    .dout(grp_fu_813_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_mag_OUT_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(xout_mag_q0),
    .vld_in(mag_OUT_TVALID_int),
    .ack_in(mag_OUT_TREADY_int),
    .data_out(mag_OUT_TDATA),
    .vld_out(regslice_both_mag_OUT_U_vld_out),
    .ack_out(mag_OUT_TREADY),
    .apdone_blk(regslice_both_mag_OUT_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_data_OUT_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_OUT_TDATA_int),
    .vld_in(data_OUT_TVALID_int),
    .ack_in(data_OUT_TREADY_int),
    .data_out(data_OUT_TDATA),
    .vld_out(regslice_both_data_OUT_U_vld_out),
    .ack_out(data_OUT_TREADY),
    .apdone_blk(regslice_both_data_OUT_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state68_io) | (regslice_both_data_OUT_U_apdone_blk == 1'b1) | (regslice_both_mag_OUT_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state68))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter32 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln98_fu_823_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_780 <= i_fu_829_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_780 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln98_reg_1705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUTfft_M_imag_34_reg_1735 <= data_OUTfft_M_imag_q0;
        data_OUTfft_M_real_34_reg_1729 <= data_OUTfft_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln98_reg_1705 <= icmp_ln98_fu_823_p2;
        icmp_ln98_reg_1705_pp0_iter1_reg <= icmp_ln98_reg_1705;
        zext_ln111_reg_1714_pp0_iter1_reg[5 : 0] <= zext_ln111_reg_1714[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln98_reg_1705_pp0_iter10_reg <= icmp_ln98_reg_1705_pp0_iter9_reg;
        icmp_ln98_reg_1705_pp0_iter11_reg <= icmp_ln98_reg_1705_pp0_iter10_reg;
        icmp_ln98_reg_1705_pp0_iter12_reg <= icmp_ln98_reg_1705_pp0_iter11_reg;
        icmp_ln98_reg_1705_pp0_iter13_reg <= icmp_ln98_reg_1705_pp0_iter12_reg;
        icmp_ln98_reg_1705_pp0_iter14_reg <= icmp_ln98_reg_1705_pp0_iter13_reg;
        icmp_ln98_reg_1705_pp0_iter15_reg <= icmp_ln98_reg_1705_pp0_iter14_reg;
        icmp_ln98_reg_1705_pp0_iter16_reg <= icmp_ln98_reg_1705_pp0_iter15_reg;
        icmp_ln98_reg_1705_pp0_iter17_reg <= icmp_ln98_reg_1705_pp0_iter16_reg;
        icmp_ln98_reg_1705_pp0_iter18_reg <= icmp_ln98_reg_1705_pp0_iter17_reg;
        icmp_ln98_reg_1705_pp0_iter19_reg <= icmp_ln98_reg_1705_pp0_iter18_reg;
        icmp_ln98_reg_1705_pp0_iter20_reg <= icmp_ln98_reg_1705_pp0_iter19_reg;
        icmp_ln98_reg_1705_pp0_iter21_reg <= icmp_ln98_reg_1705_pp0_iter20_reg;
        icmp_ln98_reg_1705_pp0_iter22_reg <= icmp_ln98_reg_1705_pp0_iter21_reg;
        icmp_ln98_reg_1705_pp0_iter23_reg <= icmp_ln98_reg_1705_pp0_iter22_reg;
        icmp_ln98_reg_1705_pp0_iter24_reg <= icmp_ln98_reg_1705_pp0_iter23_reg;
        icmp_ln98_reg_1705_pp0_iter25_reg <= icmp_ln98_reg_1705_pp0_iter24_reg;
        icmp_ln98_reg_1705_pp0_iter26_reg <= icmp_ln98_reg_1705_pp0_iter25_reg;
        icmp_ln98_reg_1705_pp0_iter27_reg <= icmp_ln98_reg_1705_pp0_iter26_reg;
        icmp_ln98_reg_1705_pp0_iter28_reg <= icmp_ln98_reg_1705_pp0_iter27_reg;
        icmp_ln98_reg_1705_pp0_iter29_reg <= icmp_ln98_reg_1705_pp0_iter28_reg;
        icmp_ln98_reg_1705_pp0_iter2_reg <= icmp_ln98_reg_1705_pp0_iter1_reg;
        icmp_ln98_reg_1705_pp0_iter30_reg <= icmp_ln98_reg_1705_pp0_iter29_reg;
        icmp_ln98_reg_1705_pp0_iter31_reg <= icmp_ln98_reg_1705_pp0_iter30_reg;
        icmp_ln98_reg_1705_pp0_iter3_reg <= icmp_ln98_reg_1705_pp0_iter2_reg;
        icmp_ln98_reg_1705_pp0_iter4_reg <= icmp_ln98_reg_1705_pp0_iter3_reg;
        icmp_ln98_reg_1705_pp0_iter5_reg <= icmp_ln98_reg_1705_pp0_iter4_reg;
        icmp_ln98_reg_1705_pp0_iter6_reg <= icmp_ln98_reg_1705_pp0_iter5_reg;
        icmp_ln98_reg_1705_pp0_iter7_reg <= icmp_ln98_reg_1705_pp0_iter6_reg;
        icmp_ln98_reg_1705_pp0_iter8_reg <= icmp_ln98_reg_1705_pp0_iter7_reg;
        icmp_ln98_reg_1705_pp0_iter9_reg <= icmp_ln98_reg_1705_pp0_iter8_reg;
        zext_ln111_reg_1714_pp0_iter10_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter9_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter11_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter10_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter12_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter11_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter13_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter12_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter14_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter13_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter15_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter14_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter16_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter15_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter17_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter16_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter18_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter17_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter19_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter18_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter20_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter19_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter21_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter20_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter22_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter21_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter23_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter22_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter24_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter23_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter25_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter24_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter26_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter25_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter27_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter26_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter28_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter27_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter29_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter28_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter2_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter1_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter30_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter29_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter31_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter30_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter3_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter2_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter4_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter3_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter5_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter4_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter6_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter5_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter7_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter6_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter8_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter7_reg[5 : 0];
        zext_ln111_reg_1714_pp0_iter9_reg[5 : 0] <= zext_ln111_reg_1714_pp0_iter8_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_reg_1705_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_x_assign_reg_1751 <= grp_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_reg_1705_pp0_iter30_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_5_i_reg_1766 <= grp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_reg_1705_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_32_reg_1746 <= grp_fu_799_p2;
        tmp_i_reg_1741 <= grp_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_reg_1705_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_i_i_i_i_reg_1756 <= grp_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_reg_1705_pp0_iter26_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_i_i_i_reg_1761 <= grp_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln98_fu_823_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln111_reg_1714[5 : 0] <= zext_ln111_fu_835_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln98_fu_823_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state68_io) | (regslice_both_data_OUT_U_apdone_blk == 1'b1) | (regslice_both_mag_OUT_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state68))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state68_io) | (regslice_both_data_OUT_U_apdone_blk == 1'b1) | (regslice_both_mag_OUT_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state68))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38))) begin
        data_OUT_TDATA_blk_n = data_OUT_TREADY_int;
    end else begin
        data_OUT_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_30_fu_1376_p3;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_29_fu_1359_p3;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_28_fu_1342_p3;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_27_fu_1325_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_26_fu_1308_p3;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_25_fu_1291_p3;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_24_fu_1274_p3;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_23_fu_1257_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_22_fu_1240_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_21_fu_1223_p3;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_20_fu_1206_p3;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_19_fu_1189_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_18_fu_1172_p3;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_17_fu_1155_p3;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_16_fu_1138_p3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_15_fu_1121_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_14_fu_1104_p3;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_13_fu_1087_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_12_fu_1070_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_11_fu_1053_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_10_fu_1036_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_31_fu_1019_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_9_fu_1002_p3;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_8_fu_985_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_7_fu_968_p3;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_6_fu_951_p3;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_5_fu_934_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_4_fu_917_p3;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_3_fu_900_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_2_fu_883_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_1_fu_866_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        data_OUT_TDATA_int = data_OUT_M_imag_add_fu_849_p3;
    end else begin
        data_OUT_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36)) | ((1'b0 == ap_block_state67_io) & (1'b1 == ap_CS_fsm_state67)) | ((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66)) | ((1'b0 == ap_block_state65_io) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state64_io) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62)) | ((1'b0 == ap_block_state61_io) & (1'b1 == ap_CS_fsm_state61)) | ((1'b0 == ap_block_state60_io) & (1'b1 == ap_CS_fsm_state60)) | ((1'b0 == ap_block_state59_io) & (1'b1 == ap_CS_fsm_state59)) | ((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((1'b0 == ap_block_state53_io) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51)) | ((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50)) | ((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((1'b0 == ap_block_state48_io) & (1'b1 == ap_CS_fsm_state48)) | ((1'b0 == ap_block_state47_io) & (1'b1 == ap_CS_fsm_state47)) | ((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((1'b0 == ap_block_state45_io) & (1'b1 == ap_CS_fsm_state45)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)) | ((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40)) | ((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39)) | ((1'b0 == ap_block_state38_io) & (1'b1 == ap_CS_fsm_state38)))) begin
        data_OUT_TVALID_int = 1'b1;
    end else begin
        data_OUT_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        data_OUTfft_M_imag_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        data_OUTfft_M_imag_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        data_OUTfft_M_imag_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        data_OUTfft_M_imag_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        data_OUTfft_M_imag_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        data_OUTfft_M_imag_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        data_OUTfft_M_imag_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        data_OUTfft_M_imag_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        data_OUTfft_M_imag_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        data_OUTfft_M_imag_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        data_OUTfft_M_imag_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        data_OUTfft_M_imag_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        data_OUTfft_M_imag_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        data_OUTfft_M_imag_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        data_OUTfft_M_imag_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        data_OUTfft_M_imag_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        data_OUTfft_M_imag_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        data_OUTfft_M_imag_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        data_OUTfft_M_imag_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        data_OUTfft_M_imag_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        data_OUTfft_M_imag_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        data_OUTfft_M_imag_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        data_OUTfft_M_imag_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        data_OUTfft_M_imag_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        data_OUTfft_M_imag_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        data_OUTfft_M_imag_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        data_OUTfft_M_imag_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        data_OUTfft_M_imag_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        data_OUTfft_M_imag_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        data_OUTfft_M_imag_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        data_OUTfft_M_imag_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        data_OUTfft_M_imag_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUTfft_M_imag_address0 = zext_ln111_fu_835_p1;
    end else begin
        data_OUTfft_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66)) | ((1'b0 == ap_block_state65_io) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state64_io) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62)) | ((1'b0 == ap_block_state61_io) & (1'b1 == ap_CS_fsm_state61)) | ((1'b0 == ap_block_state60_io) & (1'b1 == ap_CS_fsm_state60)) | ((1'b0 == ap_block_state59_io) & (1'b1 == ap_CS_fsm_state59)) | ((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((1'b0 == ap_block_state53_io) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51)) | ((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50)) | ((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((1'b0 == ap_block_state48_io) & (1'b1 == ap_CS_fsm_state48)) | ((1'b0 == ap_block_state47_io) & (1'b1 == ap_CS_fsm_state47)) | ((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((1'b0 == ap_block_state45_io) & (1'b1 == ap_CS_fsm_state45)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)) | ((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40)) | ((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39)) | ((1'b0 == ap_block_state38_io) & (1'b1 == ap_CS_fsm_state38)))) begin
        data_OUTfft_M_imag_ce0 = 1'b1;
    end else begin
        data_OUTfft_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        data_OUTfft_M_real_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        data_OUTfft_M_real_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        data_OUTfft_M_real_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        data_OUTfft_M_real_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        data_OUTfft_M_real_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        data_OUTfft_M_real_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        data_OUTfft_M_real_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        data_OUTfft_M_real_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        data_OUTfft_M_real_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        data_OUTfft_M_real_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        data_OUTfft_M_real_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        data_OUTfft_M_real_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        data_OUTfft_M_real_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        data_OUTfft_M_real_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        data_OUTfft_M_real_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        data_OUTfft_M_real_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        data_OUTfft_M_real_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        data_OUTfft_M_real_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        data_OUTfft_M_real_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        data_OUTfft_M_real_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        data_OUTfft_M_real_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        data_OUTfft_M_real_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        data_OUTfft_M_real_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        data_OUTfft_M_real_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        data_OUTfft_M_real_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        data_OUTfft_M_real_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        data_OUTfft_M_real_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        data_OUTfft_M_real_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        data_OUTfft_M_real_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        data_OUTfft_M_real_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        data_OUTfft_M_real_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        data_OUTfft_M_real_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUTfft_M_real_address0 = zext_ln111_fu_835_p1;
    end else begin
        data_OUTfft_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66)) | ((1'b0 == ap_block_state65_io) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state64_io) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62)) | ((1'b0 == ap_block_state61_io) & (1'b1 == ap_CS_fsm_state61)) | ((1'b0 == ap_block_state60_io) & (1'b1 == ap_CS_fsm_state60)) | ((1'b0 == ap_block_state59_io) & (1'b1 == ap_CS_fsm_state59)) | ((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((1'b0 == ap_block_state53_io) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51)) | ((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50)) | ((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((1'b0 == ap_block_state48_io) & (1'b1 == ap_CS_fsm_state48)) | ((1'b0 == ap_block_state47_io) & (1'b1 == ap_CS_fsm_state47)) | ((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((1'b0 == ap_block_state45_io) & (1'b1 == ap_CS_fsm_state45)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)) | ((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40)) | ((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39)) | ((1'b0 == ap_block_state38_io) & (1'b1 == ap_CS_fsm_state38)))) begin
        data_OUTfft_M_real_ce0 = 1'b1;
    end else begin
        data_OUTfft_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38))) begin
        mag_OUT_TDATA_blk_n = mag_OUT_TREADY_int;
    end else begin
        mag_OUT_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36)) | ((1'b0 == ap_block_state67_io) & (1'b1 == ap_CS_fsm_state67)) | ((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66)) | ((1'b0 == ap_block_state65_io) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state64_io) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62)) | ((1'b0 == ap_block_state61_io) & (1'b1 == ap_CS_fsm_state61)) | ((1'b0 == ap_block_state60_io) & (1'b1 == ap_CS_fsm_state60)) | ((1'b0 == ap_block_state59_io) & (1'b1 == ap_CS_fsm_state59)) | ((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((1'b0 == ap_block_state53_io) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51)) | ((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50)) | ((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((1'b0 == ap_block_state48_io) & (1'b1 == ap_CS_fsm_state48)) | ((1'b0 == ap_block_state47_io) & (1'b1 == ap_CS_fsm_state47)) | ((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((1'b0 == ap_block_state45_io) & (1'b1 == ap_CS_fsm_state45)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)) | ((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40)) | ((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39)) | ((1'b0 == ap_block_state38_io) & (1'b1 == ap_CS_fsm_state38)))) begin
        mag_OUT_TVALID_int = 1'b1;
    end else begin
        mag_OUT_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        xout_mag_address0 = 5'd31;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        xout_mag_address0 = 5'd30;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        xout_mag_address0 = 5'd29;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        xout_mag_address0 = 5'd28;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        xout_mag_address0 = 5'd27;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        xout_mag_address0 = 5'd26;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        xout_mag_address0 = 5'd25;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        xout_mag_address0 = 5'd24;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        xout_mag_address0 = 5'd23;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        xout_mag_address0 = 5'd22;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        xout_mag_address0 = 5'd21;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        xout_mag_address0 = 5'd20;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        xout_mag_address0 = 5'd19;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        xout_mag_address0 = 5'd18;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        xout_mag_address0 = 5'd17;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        xout_mag_address0 = 5'd16;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        xout_mag_address0 = 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        xout_mag_address0 = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        xout_mag_address0 = 5'd13;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        xout_mag_address0 = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        xout_mag_address0 = 5'd11;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        xout_mag_address0 = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        xout_mag_address0 = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        xout_mag_address0 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        xout_mag_address0 = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        xout_mag_address0 = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        xout_mag_address0 = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        xout_mag_address0 = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        xout_mag_address0 = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        xout_mag_address0 = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        xout_mag_address0 = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        xout_mag_address0 = 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        xout_mag_address0 = zext_ln111_reg_1714_pp0_iter31_reg;
    end else begin
        xout_mag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter32 == 1'b1)) | ((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66)) | ((1'b0 == ap_block_state65_io) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state64_io) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62)) | ((1'b0 == ap_block_state61_io) & (1'b1 == ap_CS_fsm_state61)) | ((1'b0 == ap_block_state60_io) & (1'b1 == ap_CS_fsm_state60)) | ((1'b0 == ap_block_state59_io) & (1'b1 == ap_CS_fsm_state59)) | ((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((1'b0 == ap_block_state53_io) & (1'b1 == ap_CS_fsm_state53)) | ((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51)) | ((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50)) | ((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49)) | ((1'b0 == ap_block_state48_io) & (1'b1 == ap_CS_fsm_state48)) | ((1'b0 == ap_block_state47_io) & (1'b1 == ap_CS_fsm_state47)) | ((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((1'b0 == ap_block_state45_io) & (1'b1 == ap_CS_fsm_state45)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42)) | ((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40)) | ((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39)) | ((1'b0 == ap_block_state38_io) & (1'b1 == ap_CS_fsm_state38)))) begin
        xout_mag_ce0 = 1'b1;
    end else begin
        xout_mag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln98_reg_1705_pp0_iter31_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        xout_mag_we0 = 1'b1;
    end else begin
        xout_mag_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln98_fu_823_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter31 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter32 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter31 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter32 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln98_fu_823_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b0 == ap_block_state38_io) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b0 == ap_block_state39_io) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b0 == ap_block_state40_io) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b0 == ap_block_state45_io) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b0 == ap_block_state47_io) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b0 == ap_block_state48_io) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b0 == ap_block_state49_io) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b0 == ap_block_state53_io) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b0 == ap_block_state59_io) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b0 == ap_block_state60_io) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b0 == ap_block_state61_io) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b0 == ap_block_state62_io) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b0 == ap_block_state64_io) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b0 == ap_block_state65_io) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b0 == ap_block_state67_io) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if ((~((1'b1 == ap_block_state68_io) | (regslice_both_data_OUT_U_apdone_blk == 1'b1) | (regslice_both_mag_OUT_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd35];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state37_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state38_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state39_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state41_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state42_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state43_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state44_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state45_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state46_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state47_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state48_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state49_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state51_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state52_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state53_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state54_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state55_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state56_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state57_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state58_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state59_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state61_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state62_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state63_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state64_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state65_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state66_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state67_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state68 = ((regslice_both_data_OUT_U_apdone_blk == 1'b1) | (regslice_both_mag_OUT_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state68_io = ((data_OUT_TREADY_int == 1'b0) | (mag_OUT_TREADY_int == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln162_10_fu_926_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_11_fu_930_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_12_fu_943_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_13_fu_947_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_14_fu_960_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_15_fu_964_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_16_fu_977_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_17_fu_981_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_18_fu_994_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_19_fu_998_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_1_fu_845_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_20_fu_1011_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_21_fu_1015_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_22_fu_1028_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_23_fu_1032_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_24_fu_1045_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_25_fu_1049_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_26_fu_1062_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_27_fu_1066_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_28_fu_1079_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_29_fu_1083_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_2_fu_858_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_30_fu_1096_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_31_fu_1100_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_32_fu_1113_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_33_fu_1117_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_34_fu_1130_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_35_fu_1134_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_36_fu_1147_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_37_fu_1151_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_38_fu_1164_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_39_fu_1168_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_3_fu_862_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_40_fu_1181_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_41_fu_1185_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_42_fu_1198_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_43_fu_1202_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_44_fu_1215_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_45_fu_1219_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_46_fu_1232_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_47_fu_1236_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_48_fu_1249_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_49_fu_1253_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_4_fu_875_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_50_fu_1266_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_51_fu_1270_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_52_fu_1283_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_53_fu_1287_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_54_fu_1300_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_55_fu_1304_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_56_fu_1317_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_57_fu_1321_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_58_fu_1334_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_59_fu_1338_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_5_fu_879_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_60_fu_1351_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_61_fu_1355_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_62_fu_1368_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_63_fu_1372_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_6_fu_892_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_7_fu_896_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_8_fu_909_p1 = data_OUTfft_M_real_q0;

assign bitcast_ln162_9_fu_913_p1 = data_OUTfft_M_imag_q0;

assign bitcast_ln162_fu_841_p1 = data_OUTfft_M_real_q0;

assign data_OUT_M_imag_add_10_fu_1036_p3 = {{bitcast_ln162_23_fu_1032_p1}, {bitcast_ln162_22_fu_1028_p1}};

assign data_OUT_M_imag_add_11_fu_1053_p3 = {{bitcast_ln162_25_fu_1049_p1}, {bitcast_ln162_24_fu_1045_p1}};

assign data_OUT_M_imag_add_12_fu_1070_p3 = {{bitcast_ln162_27_fu_1066_p1}, {bitcast_ln162_26_fu_1062_p1}};

assign data_OUT_M_imag_add_13_fu_1087_p3 = {{bitcast_ln162_29_fu_1083_p1}, {bitcast_ln162_28_fu_1079_p1}};

assign data_OUT_M_imag_add_14_fu_1104_p3 = {{bitcast_ln162_31_fu_1100_p1}, {bitcast_ln162_30_fu_1096_p1}};

assign data_OUT_M_imag_add_15_fu_1121_p3 = {{bitcast_ln162_33_fu_1117_p1}, {bitcast_ln162_32_fu_1113_p1}};

assign data_OUT_M_imag_add_16_fu_1138_p3 = {{bitcast_ln162_35_fu_1134_p1}, {bitcast_ln162_34_fu_1130_p1}};

assign data_OUT_M_imag_add_17_fu_1155_p3 = {{bitcast_ln162_37_fu_1151_p1}, {bitcast_ln162_36_fu_1147_p1}};

assign data_OUT_M_imag_add_18_fu_1172_p3 = {{bitcast_ln162_39_fu_1168_p1}, {bitcast_ln162_38_fu_1164_p1}};

assign data_OUT_M_imag_add_19_fu_1189_p3 = {{bitcast_ln162_41_fu_1185_p1}, {bitcast_ln162_40_fu_1181_p1}};

assign data_OUT_M_imag_add_1_fu_866_p3 = {{bitcast_ln162_3_fu_862_p1}, {bitcast_ln162_2_fu_858_p1}};

assign data_OUT_M_imag_add_20_fu_1206_p3 = {{bitcast_ln162_43_fu_1202_p1}, {bitcast_ln162_42_fu_1198_p1}};

assign data_OUT_M_imag_add_21_fu_1223_p3 = {{bitcast_ln162_45_fu_1219_p1}, {bitcast_ln162_44_fu_1215_p1}};

assign data_OUT_M_imag_add_22_fu_1240_p3 = {{bitcast_ln162_47_fu_1236_p1}, {bitcast_ln162_46_fu_1232_p1}};

assign data_OUT_M_imag_add_23_fu_1257_p3 = {{bitcast_ln162_49_fu_1253_p1}, {bitcast_ln162_48_fu_1249_p1}};

assign data_OUT_M_imag_add_24_fu_1274_p3 = {{bitcast_ln162_51_fu_1270_p1}, {bitcast_ln162_50_fu_1266_p1}};

assign data_OUT_M_imag_add_25_fu_1291_p3 = {{bitcast_ln162_53_fu_1287_p1}, {bitcast_ln162_52_fu_1283_p1}};

assign data_OUT_M_imag_add_26_fu_1308_p3 = {{bitcast_ln162_55_fu_1304_p1}, {bitcast_ln162_54_fu_1300_p1}};

assign data_OUT_M_imag_add_27_fu_1325_p3 = {{bitcast_ln162_57_fu_1321_p1}, {bitcast_ln162_56_fu_1317_p1}};

assign data_OUT_M_imag_add_28_fu_1342_p3 = {{bitcast_ln162_59_fu_1338_p1}, {bitcast_ln162_58_fu_1334_p1}};

assign data_OUT_M_imag_add_29_fu_1359_p3 = {{bitcast_ln162_61_fu_1355_p1}, {bitcast_ln162_60_fu_1351_p1}};

assign data_OUT_M_imag_add_2_fu_883_p3 = {{bitcast_ln162_5_fu_879_p1}, {bitcast_ln162_4_fu_875_p1}};

assign data_OUT_M_imag_add_30_fu_1376_p3 = {{bitcast_ln162_63_fu_1372_p1}, {bitcast_ln162_62_fu_1368_p1}};

assign data_OUT_M_imag_add_31_fu_1019_p3 = {{bitcast_ln162_21_fu_1015_p1}, {bitcast_ln162_20_fu_1011_p1}};

assign data_OUT_M_imag_add_3_fu_900_p3 = {{bitcast_ln162_7_fu_896_p1}, {bitcast_ln162_6_fu_892_p1}};

assign data_OUT_M_imag_add_4_fu_917_p3 = {{bitcast_ln162_9_fu_913_p1}, {bitcast_ln162_8_fu_909_p1}};

assign data_OUT_M_imag_add_5_fu_934_p3 = {{bitcast_ln162_11_fu_930_p1}, {bitcast_ln162_10_fu_926_p1}};

assign data_OUT_M_imag_add_6_fu_951_p3 = {{bitcast_ln162_13_fu_947_p1}, {bitcast_ln162_12_fu_943_p1}};

assign data_OUT_M_imag_add_7_fu_968_p3 = {{bitcast_ln162_15_fu_964_p1}, {bitcast_ln162_14_fu_960_p1}};

assign data_OUT_M_imag_add_8_fu_985_p3 = {{bitcast_ln162_17_fu_981_p1}, {bitcast_ln162_16_fu_977_p1}};

assign data_OUT_M_imag_add_9_fu_1002_p3 = {{bitcast_ln162_19_fu_998_p1}, {bitcast_ln162_18_fu_994_p1}};

assign data_OUT_M_imag_add_fu_849_p3 = {{bitcast_ln162_1_fu_845_p1}, {bitcast_ln162_fu_841_p1}};

assign data_OUT_TVALID = regslice_both_data_OUT_U_vld_out;

assign i_fu_829_p2 = (i_0_i_reg_780 + 6'd1);

assign icmp_ln98_fu_823_p2 = ((i_0_i_reg_780 == 6'd32) ? 1'b1 : 1'b0);

assign mag_OUT_TVALID = regslice_both_mag_OUT_U_vld_out;

assign zext_ln111_fu_835_p1 = i_0_i_reg_780;

always @ (posedge ap_clk) begin
    zext_ln111_reg_1714[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter9_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter10_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter11_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter12_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter13_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter14_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter15_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter16_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter17_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter18_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter19_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter20_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter21_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter22_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter23_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter24_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter25_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter26_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter27_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter28_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter29_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter30_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln111_reg_1714_pp0_iter31_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //Block_codeRepl12432_s
