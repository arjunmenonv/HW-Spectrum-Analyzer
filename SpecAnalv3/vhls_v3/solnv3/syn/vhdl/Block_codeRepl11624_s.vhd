-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_codeRepl11624_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mag_OUT_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    mag_OUT_TVALID : OUT STD_LOGIC;
    mag_OUT_TREADY : IN STD_LOGIC;
    data_OUT_M_real_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_M_real_TVALID : OUT STD_LOGIC;
    data_OUT_M_real_TREADY : IN STD_LOGIC;
    data_OUT_M_imag_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_M_imag_TVALID : OUT STD_LOGIC;
    data_OUT_M_imag_TREADY : IN STD_LOGIC;
    data_OUTfft_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUTfft_M_imag_ce0 : OUT STD_LOGIC;
    data_OUTfft_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUTfft_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUTfft_M_real_ce0 : OUT STD_LOGIC;
    data_OUTfft_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Block_codeRepl11624_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_3EDE5BD9 : STD_LOGIC_VECTOR (31 downto 0) := "00111110110111100101101111011001";
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xout_mag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_mag_ce0 : STD_LOGIC;
    signal xout_mag_we0 : STD_LOGIC;
    signal xout_mag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal data_OUT_M_real_TDATA_blk_n : STD_LOGIC;
    signal data_OUT_M_imag_TDATA_blk_n : STD_LOGIC;
    signal i_0_i_reg_787 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln93_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state36_io : BOOLEAN;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_state39_io : BOOLEAN;
    signal ap_block_state40_io : BOOLEAN;
    signal ap_block_state41_io : BOOLEAN;
    signal ap_block_state42_io : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_state45_io : BOOLEAN;
    signal ap_block_state46_io : BOOLEAN;
    signal ap_block_state47_io : BOOLEAN;
    signal ap_block_state48_io : BOOLEAN;
    signal ap_block_state49_io : BOOLEAN;
    signal ap_block_state50_io : BOOLEAN;
    signal ap_block_state51_io : BOOLEAN;
    signal ap_block_state52_io : BOOLEAN;
    signal ap_block_state53_io : BOOLEAN;
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_state55_io : BOOLEAN;
    signal ap_block_state56_io : BOOLEAN;
    signal ap_block_state57_io : BOOLEAN;
    signal ap_block_state58_io : BOOLEAN;
    signal ap_block_state59_io : BOOLEAN;
    signal ap_block_state60_io : BOOLEAN;
    signal ap_block_state61_io : BOOLEAN;
    signal ap_block_state62_io : BOOLEAN;
    signal ap_block_state63_io : BOOLEAN;
    signal ap_block_state64_io : BOOLEAN;
    signal ap_block_state65_io : BOOLEAN;
    signal ap_block_state66_io : BOOLEAN;
    signal ap_block_state67_io : BOOLEAN;
    signal reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln93_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1182_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln106_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_reg_1191_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_26_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_i_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_815_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal regslice_both_mag_OUT_U_apdone_blk : STD_LOGIC;
    signal regslice_both_data_OUT_M_real_U_apdone_blk : STD_LOGIC;
    signal regslice_both_data_OUT_M_imag_U_apdone_blk : STD_LOGIC;
    signal ap_block_state68 : BOOLEAN;
    signal ap_block_state68_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mag_OUT_TVALID_int : STD_LOGIC;
    signal mag_OUT_TREADY_int : STD_LOGIC;
    signal regslice_both_mag_OUT_U_vld_out : STD_LOGIC;
    signal data_OUT_M_real_TVALID_int : STD_LOGIC;
    signal data_OUT_M_real_TREADY_int : STD_LOGIC;
    signal regslice_both_data_OUT_M_real_U_vld_out : STD_LOGIC;
    signal data_OUT_M_imag_TVALID_int : STD_LOGIC;
    signal data_OUT_M_imag_TREADY_int : STD_LOGIC;
    signal regslice_both_data_OUT_M_imag_U_vld_out : STD_LOGIC;

    component FFT_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_flog_32ns_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Block_codeRepl116fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    xout_mag_U : component Block_codeRepl116fYi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xout_mag_address0,
        ce0 => xout_mag_ce0,
        we0 => xout_mag_we0,
        d0 => tmp_5_i_reg_1231,
        q0 => xout_mag_q0);

    FFT_fadd_32ns_32ndEe_U110 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_1206,
        din1 => tmp_i_26_reg_1211,
        ce => ap_const_logic_1,
        dout => grp_fu_798_p2);

    FFT_fmul_32ns_32neOg_U111 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_825,
        din1 => reg_825,
        ce => ap_const_logic_1,
        dout => grp_fu_802_p2);

    FFT_fmul_32ns_32neOg_U112 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_832,
        din1 => reg_832,
        ce => ap_const_logic_1,
        dout => grp_fu_806_p2);

    FFT_fmul_32ns_32neOg_U113 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_i_i_reg_1221,
        din1 => ap_const_lv32_3EDE5BD9,
        ce => ap_const_logic_1,
        dout => grp_fu_810_p2);

    FFT_fmul_32ns_32neOg_U114 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_i_reg_1226,
        din1 => ap_const_lv32_41200000,
        ce => ap_const_logic_1,
        dout => grp_fu_815_p2);

    FFT_flog_32ns_32ng8j_U115 : component FFT_flog_32ns_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_reg_1216,
        ce => ap_const_logic_1,
        dout => grp_fu_820_p2);

    regslice_both_mag_OUT_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => xout_mag_q0,
        vld_in => mag_OUT_TVALID_int,
        ack_in => mag_OUT_TREADY_int,
        data_out => mag_OUT_TDATA,
        vld_out => regslice_both_mag_OUT_U_vld_out,
        ack_out => mag_OUT_TREADY,
        apdone_blk => regslice_both_mag_OUT_U_apdone_blk);

    regslice_both_data_OUT_M_real_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_OUTfft_M_real_q0,
        vld_in => data_OUT_M_real_TVALID_int,
        ack_in => data_OUT_M_real_TREADY_int,
        data_out => data_OUT_M_real_TDATA,
        vld_out => regslice_both_data_OUT_M_real_U_vld_out,
        ack_out => data_OUT_M_real_TREADY,
        apdone_blk => regslice_both_data_OUT_M_real_U_apdone_blk);

    regslice_both_data_OUT_M_imag_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_OUTfft_M_imag_q0,
        vld_in => data_OUT_M_imag_TVALID_int,
        ack_in => data_OUT_M_imag_TREADY_int,
        data_out => data_OUT_M_imag_TDATA,
        vld_out => regslice_both_data_OUT_M_imag_U_vld_out,
        ack_out => data_OUT_M_imag_TREADY,
        apdone_blk => regslice_both_data_OUT_M_imag_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state68_io) or (regslice_both_data_OUT_M_imag_U_apdone_blk = ap_const_logic_1) or (regslice_both_data_OUT_M_real_U_apdone_blk = ap_const_logic_1) or (regslice_both_mag_OUT_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_787_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_844_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_787 <= i_fu_850_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_787 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln93_reg_1182 <= icmp_ln93_fu_844_p2;
                icmp_ln93_reg_1182_pp0_iter1_reg <= icmp_ln93_reg_1182;
                    zext_ln106_reg_1191_pp0_iter1_reg(5 downto 0) <= zext_ln106_reg_1191(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln93_reg_1182_pp0_iter10_reg <= icmp_ln93_reg_1182_pp0_iter9_reg;
                icmp_ln93_reg_1182_pp0_iter11_reg <= icmp_ln93_reg_1182_pp0_iter10_reg;
                icmp_ln93_reg_1182_pp0_iter12_reg <= icmp_ln93_reg_1182_pp0_iter11_reg;
                icmp_ln93_reg_1182_pp0_iter13_reg <= icmp_ln93_reg_1182_pp0_iter12_reg;
                icmp_ln93_reg_1182_pp0_iter14_reg <= icmp_ln93_reg_1182_pp0_iter13_reg;
                icmp_ln93_reg_1182_pp0_iter15_reg <= icmp_ln93_reg_1182_pp0_iter14_reg;
                icmp_ln93_reg_1182_pp0_iter16_reg <= icmp_ln93_reg_1182_pp0_iter15_reg;
                icmp_ln93_reg_1182_pp0_iter17_reg <= icmp_ln93_reg_1182_pp0_iter16_reg;
                icmp_ln93_reg_1182_pp0_iter18_reg <= icmp_ln93_reg_1182_pp0_iter17_reg;
                icmp_ln93_reg_1182_pp0_iter19_reg <= icmp_ln93_reg_1182_pp0_iter18_reg;
                icmp_ln93_reg_1182_pp0_iter20_reg <= icmp_ln93_reg_1182_pp0_iter19_reg;
                icmp_ln93_reg_1182_pp0_iter21_reg <= icmp_ln93_reg_1182_pp0_iter20_reg;
                icmp_ln93_reg_1182_pp0_iter22_reg <= icmp_ln93_reg_1182_pp0_iter21_reg;
                icmp_ln93_reg_1182_pp0_iter23_reg <= icmp_ln93_reg_1182_pp0_iter22_reg;
                icmp_ln93_reg_1182_pp0_iter24_reg <= icmp_ln93_reg_1182_pp0_iter23_reg;
                icmp_ln93_reg_1182_pp0_iter25_reg <= icmp_ln93_reg_1182_pp0_iter24_reg;
                icmp_ln93_reg_1182_pp0_iter26_reg <= icmp_ln93_reg_1182_pp0_iter25_reg;
                icmp_ln93_reg_1182_pp0_iter27_reg <= icmp_ln93_reg_1182_pp0_iter26_reg;
                icmp_ln93_reg_1182_pp0_iter28_reg <= icmp_ln93_reg_1182_pp0_iter27_reg;
                icmp_ln93_reg_1182_pp0_iter29_reg <= icmp_ln93_reg_1182_pp0_iter28_reg;
                icmp_ln93_reg_1182_pp0_iter2_reg <= icmp_ln93_reg_1182_pp0_iter1_reg;
                icmp_ln93_reg_1182_pp0_iter30_reg <= icmp_ln93_reg_1182_pp0_iter29_reg;
                icmp_ln93_reg_1182_pp0_iter31_reg <= icmp_ln93_reg_1182_pp0_iter30_reg;
                icmp_ln93_reg_1182_pp0_iter3_reg <= icmp_ln93_reg_1182_pp0_iter2_reg;
                icmp_ln93_reg_1182_pp0_iter4_reg <= icmp_ln93_reg_1182_pp0_iter3_reg;
                icmp_ln93_reg_1182_pp0_iter5_reg <= icmp_ln93_reg_1182_pp0_iter4_reg;
                icmp_ln93_reg_1182_pp0_iter6_reg <= icmp_ln93_reg_1182_pp0_iter5_reg;
                icmp_ln93_reg_1182_pp0_iter7_reg <= icmp_ln93_reg_1182_pp0_iter6_reg;
                icmp_ln93_reg_1182_pp0_iter8_reg <= icmp_ln93_reg_1182_pp0_iter7_reg;
                icmp_ln93_reg_1182_pp0_iter9_reg <= icmp_ln93_reg_1182_pp0_iter8_reg;
                    zext_ln106_reg_1191_pp0_iter10_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter9_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter11_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter10_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter12_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter11_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter13_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter12_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter14_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter13_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter15_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter14_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter16_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter15_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter17_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter16_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter18_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter17_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter19_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter18_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter20_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter19_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter21_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter20_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter22_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter21_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter23_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter22_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter24_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter23_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter25_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter24_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter26_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter25_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter27_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter26_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter28_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter27_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter29_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter28_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter2_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter1_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter30_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter29_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter31_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter30_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter3_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter2_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter4_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter3_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter5_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter4_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter6_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter5_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter7_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter6_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter8_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter7_reg(5 downto 0);
                    zext_ln106_reg_1191_pp0_iter9_reg(5 downto 0) <= zext_ln106_reg_1191_pp0_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_1182_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_x_assign_reg_1216 <= grp_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln93_reg_1182 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then
                reg_825 <= data_OUTfft_M_real_q0;
                reg_832 <= data_OUTfft_M_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_1182_pp0_iter30_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_5_i_reg_1231 <= grp_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_1182_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_26_reg_1211 <= grp_fu_806_p2;
                tmp_i_reg_1206 <= grp_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_1182_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_i_i_i_i_reg_1221 <= grp_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_1182_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_i_i_i_reg_1226 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_844_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln106_reg_1191(5 downto 0) <= zext_ln106_fu_856_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln106_reg_1191(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter11_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter12_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter13_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter17_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter18_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter19_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter20_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter21_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter22_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter23_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter24_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter25_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter26_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter27_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter28_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter29_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter30_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln106_reg_1191_pp0_iter31_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_enable_reg_pp0_iter1, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_block_state67_io, icmp_ln93_fu_844_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, regslice_both_mag_OUT_U_apdone_blk, regslice_both_data_OUT_M_real_U_apdone_blk, regslice_both_data_OUT_M_imag_U_apdone_blk, ap_block_state68_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln93_fu_844_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln93_fu_844_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if ((not(((ap_const_boolean_1 = ap_block_state68_io) or (regslice_both_data_OUT_M_imag_U_apdone_blk = ap_const_logic_1) or (regslice_both_data_OUT_M_real_U_apdone_blk = ap_const_logic_1) or (regslice_both_mag_OUT_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state35 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(3);
    ap_CS_fsm_state37 <= ap_CS_fsm(4);
    ap_CS_fsm_state38 <= ap_CS_fsm(5);
    ap_CS_fsm_state39 <= ap_CS_fsm(6);
    ap_CS_fsm_state40 <= ap_CS_fsm(7);
    ap_CS_fsm_state41 <= ap_CS_fsm(8);
    ap_CS_fsm_state42 <= ap_CS_fsm(9);
    ap_CS_fsm_state43 <= ap_CS_fsm(10);
    ap_CS_fsm_state44 <= ap_CS_fsm(11);
    ap_CS_fsm_state45 <= ap_CS_fsm(12);
    ap_CS_fsm_state46 <= ap_CS_fsm(13);
    ap_CS_fsm_state47 <= ap_CS_fsm(14);
    ap_CS_fsm_state48 <= ap_CS_fsm(15);
    ap_CS_fsm_state49 <= ap_CS_fsm(16);
    ap_CS_fsm_state50 <= ap_CS_fsm(17);
    ap_CS_fsm_state51 <= ap_CS_fsm(18);
    ap_CS_fsm_state52 <= ap_CS_fsm(19);
    ap_CS_fsm_state53 <= ap_CS_fsm(20);
    ap_CS_fsm_state54 <= ap_CS_fsm(21);
    ap_CS_fsm_state55 <= ap_CS_fsm(22);
    ap_CS_fsm_state56 <= ap_CS_fsm(23);
    ap_CS_fsm_state57 <= ap_CS_fsm(24);
    ap_CS_fsm_state58 <= ap_CS_fsm(25);
    ap_CS_fsm_state59 <= ap_CS_fsm(26);
    ap_CS_fsm_state60 <= ap_CS_fsm(27);
    ap_CS_fsm_state61 <= ap_CS_fsm(28);
    ap_CS_fsm_state62 <= ap_CS_fsm(29);
    ap_CS_fsm_state63 <= ap_CS_fsm(30);
    ap_CS_fsm_state64 <= ap_CS_fsm(31);
    ap_CS_fsm_state65 <= ap_CS_fsm(32);
    ap_CS_fsm_state66 <= ap_CS_fsm(33);
    ap_CS_fsm_state67 <= ap_CS_fsm(34);
    ap_CS_fsm_state68 <= ap_CS_fsm(35);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state36_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state37_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state37_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state38_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state38_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state39_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state39_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state40_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state41_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state41_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state42_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state42_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state43_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state43_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state44_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state44_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state45_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state45_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state46_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state46_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state47_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state47_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state48_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state48_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state49_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state49_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state50_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state50_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state51_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state51_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state52_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state52_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state53_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state53_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state54_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state54_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state55_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state55_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state56_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state56_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state57_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state57_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state58_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state58_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state59_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state59_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state60_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state60_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state61_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state61_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state62_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state62_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state63_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state63_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state64_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state64_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state65_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state65_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state66_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state66_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state67_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state67_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state68_assign_proc : process(regslice_both_mag_OUT_U_apdone_blk, regslice_both_data_OUT_M_real_U_apdone_blk, regslice_both_data_OUT_M_imag_U_apdone_blk)
    begin
                ap_block_state68 <= ((regslice_both_data_OUT_M_imag_U_apdone_blk = ap_const_logic_1) or (regslice_both_data_OUT_M_real_U_apdone_blk = ap_const_logic_1) or (regslice_both_mag_OUT_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state68_io_assign_proc : process(mag_OUT_TREADY_int, data_OUT_M_real_TREADY_int, data_OUT_M_imag_TREADY_int)
    begin
                ap_block_state68_io <= ((data_OUT_M_imag_TREADY_int = ap_const_logic_0) or (data_OUT_M_real_TREADY_int = ap_const_logic_0) or (mag_OUT_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln93_fu_844_p2)
    begin
        if ((icmp_ln93_fu_844_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state68, regslice_both_mag_OUT_U_apdone_blk, regslice_both_data_OUT_M_real_U_apdone_blk, regslice_both_data_OUT_M_imag_U_apdone_blk, ap_block_state68_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state68_io) or (regslice_both_data_OUT_M_imag_U_apdone_blk = ap_const_logic_1) or (regslice_both_data_OUT_M_real_U_apdone_blk = ap_const_logic_1) or (regslice_both_mag_OUT_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state68, regslice_both_mag_OUT_U_apdone_blk, regslice_both_data_OUT_M_real_U_apdone_blk, regslice_both_data_OUT_M_imag_U_apdone_blk, ap_block_state68_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state68_io) or (regslice_both_data_OUT_M_imag_U_apdone_blk = ap_const_logic_1) or (regslice_both_data_OUT_M_real_U_apdone_blk = ap_const_logic_1) or (regslice_both_mag_OUT_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, data_OUT_M_imag_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            data_OUT_M_imag_TDATA_blk_n <= data_OUT_M_imag_TREADY_int;
        else 
            data_OUT_M_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_OUT_M_imag_TVALID <= regslice_both_data_OUT_M_imag_U_vld_out;

    data_OUT_M_imag_TVALID_int_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_block_state67_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            data_OUT_M_imag_TVALID_int <= ap_const_logic_1;
        else 
            data_OUT_M_imag_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, data_OUT_M_real_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            data_OUT_M_real_TDATA_blk_n <= data_OUT_M_real_TREADY_int;
        else 
            data_OUT_M_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_OUT_M_real_TVALID <= regslice_both_data_OUT_M_real_U_vld_out;

    data_OUT_M_real_TVALID_int_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_block_state67_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            data_OUT_M_real_TVALID_int <= ap_const_logic_1;
        else 
            data_OUT_M_real_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    data_OUTfft_M_imag_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln106_fu_856_p1, ap_block_pp0_stage0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUTfft_M_imag_address0 <= zext_ln106_fu_856_p1(5 - 1 downto 0);
        else 
            data_OUTfft_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUTfft_M_imag_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_enable_reg_pp0_iter0, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            data_OUTfft_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUTfft_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUTfft_M_real_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln106_fu_856_p1, ap_block_pp0_stage0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUTfft_M_real_address0 <= zext_ln106_fu_856_p1(5 - 1 downto 0);
        else 
            data_OUTfft_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUTfft_M_real_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_enable_reg_pp0_iter0, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            data_OUTfft_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUTfft_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_850_p2 <= std_logic_vector(unsigned(i_0_i_reg_787) + unsigned(ap_const_lv6_1));
    icmp_ln93_fu_844_p2 <= "1" when (i_0_i_reg_787 = ap_const_lv6_20) else "0";

    mag_OUT_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, mag_OUT_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            mag_OUT_TDATA_blk_n <= mag_OUT_TREADY_int;
        else 
            mag_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mag_OUT_TVALID <= regslice_both_mag_OUT_U_vld_out;

    mag_OUT_TVALID_int_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_block_state67_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            mag_OUT_TVALID_int <= ap_const_logic_1;
        else 
            mag_OUT_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    xout_mag_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, zext_ln106_reg_1191_pp0_iter31_reg, ap_enable_reg_pp0_iter32, ap_block_pp0_stage0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            xout_mag_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            xout_mag_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            xout_mag_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            xout_mag_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            xout_mag_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            xout_mag_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            xout_mag_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            xout_mag_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            xout_mag_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            xout_mag_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            xout_mag_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            xout_mag_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            xout_mag_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            xout_mag_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            xout_mag_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            xout_mag_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            xout_mag_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            xout_mag_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            xout_mag_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            xout_mag_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            xout_mag_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            xout_mag_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            xout_mag_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            xout_mag_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            xout_mag_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            xout_mag_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            xout_mag_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            xout_mag_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            xout_mag_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            xout_mag_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            xout_mag_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            xout_mag_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            xout_mag_address0 <= zext_ln106_reg_1191_pp0_iter31_reg(5 - 1 downto 0);
        else 
            xout_mag_address0 <= "XXXXX";
        end if; 
    end process;


    xout_mag_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_block_pp0_stage0_11001, ap_block_state36_io, ap_block_state37_io, ap_block_state38_io, ap_block_state39_io, ap_block_state40_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io, ap_block_state44_io, ap_block_state45_io, ap_block_state46_io, ap_block_state47_io, ap_block_state48_io, ap_block_state49_io, ap_block_state50_io, ap_block_state51_io, ap_block_state52_io, ap_block_state53_io, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state59_io, ap_block_state60_io, ap_block_state61_io, ap_block_state62_io, ap_block_state63_io, ap_block_state64_io, ap_block_state65_io, ap_block_state66_io, ap_enable_reg_pp0_iter32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_state66_io) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state64_io) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_boolean_0 = ap_block_state63_io) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state62_io) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_boolean_0 = ap_block_state53_io) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state51_io) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state49_io) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state48_io) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state47_io) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state46_io) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state45_io) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state40_io) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state39_io) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state38_io) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            xout_mag_ce0 <= ap_const_logic_1;
        else 
            xout_mag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_mag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln93_reg_1182_pp0_iter31_reg, ap_enable_reg_pp0_iter32)
    begin
        if (((icmp_ln93_reg_1182_pp0_iter31_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            xout_mag_we0 <= ap_const_logic_1;
        else 
            xout_mag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln106_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_787),64));
end behav;
