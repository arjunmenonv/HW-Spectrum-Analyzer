-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT0121 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_OUT4_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_imag_ce0 : OUT STD_LOGIC;
    data_OUT4_M_imag_we0 : OUT STD_LOGIC;
    data_OUT4_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT4_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_imag_ce1 : OUT STD_LOGIC;
    data_OUT4_M_imag_we1 : OUT STD_LOGIC;
    data_OUT4_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT4_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_real_ce0 : OUT STD_LOGIC;
    data_OUT4_M_real_we0 : OUT STD_LOGIC;
    data_OUT4_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT4_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_real_ce1 : OUT STD_LOGIC;
    data_OUT4_M_real_we1 : OUT STD_LOGIC;
    data_OUT4_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT3_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT3_M_real_ce0 : OUT STD_LOGIC;
    data_OUT3_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT3_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT3_M_real_ce1 : OUT STD_LOGIC;
    data_OUT3_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT3_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT3_M_imag_ce0 : OUT STD_LOGIC;
    data_OUT3_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT3_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT3_M_imag_ce1 : OUT STD_LOGIC;
    data_OUT3_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT0121 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_M_real127_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_real127_ce0 : STD_LOGIC;
    signal W_M_real127_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_M_imag123_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_imag123_ce0 : STD_LOGIC;
    signal W_M_imag123_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_0_i_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_0_i_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln76_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln76_reg_348_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_348_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal Ulimit_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_357_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln81_2_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_2_reg_372_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_4_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_real_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_t_imag_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_i_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_i_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_i_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln82_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_442_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Product_M_real_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Product_M_imag_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_3_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal p_r_M_imag_3_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_3_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_3_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal sext_ln81_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shl_ln79_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Llimit_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_pass_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln84_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_span_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_3_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component FFT_fsub_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0118_W_M_real130 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0118_W_M_imag126 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_M_real127_U : component FFT0118_W_M_real130
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_real127_address0,
        ce0 => W_M_real127_ce0,
        q0 => W_M_real127_q0);

    W_M_imag123_U : component FFT0118_W_M_imag126
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_imag123_address0,
        ce0 => W_M_imag123_ce0,
        q0 => W_M_imag123_q0);

    FFT_fsub_32ns_32ncud_U81 : component FFT_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_reg_422,
        din1 => tmp_3_i_i_i_reg_427,
        ce => ap_const_logic_1,
        dout => grp_fu_207_p2);

    FFT_fadd_32ns_32ndEe_U82 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_i_i_i_reg_432,
        din1 => tmp_6_i_i_i_reg_437,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    FFT_fsub_32ns_32ncud_U83 : component FFT_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_3_reg_470,
        din1 => Product_M_real_reg_458,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p2);

    FFT_fsub_32ns_32ncud_U84 : component FFT_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_3_reg_476,
        din1 => Product_M_imag_reg_464,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    FFT_fadd_32ns_32ndEe_U85 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_3_reg_470,
        din1 => Product_M_real_reg_458,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    FFT_fadd_32ns_32ndEe_U86 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_3_reg_476,
        din1 => Product_M_imag_reg_464,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    FFT_fmul_32ns_32neOg_U87 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_398,
        din1 => p_t_real_reg_410,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    FFT_fmul_32ns_32neOg_U88 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_404,
        din1 => p_t_imag_reg_416,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    FFT_fmul_32ns_32neOg_U89 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_404,
        din1 => p_t_real_reg_410,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p2);

    FFT_fmul_32ns_32neOg_U90 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_398,
        din1 => p_t_imag_reg_416,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    butterfly_pass_0_i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                butterfly_pass_0_i_reg_185 <= butterfly_pass_4_fu_335_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                butterfly_pass_0_i_reg_185 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    butterfly_span_0_i_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                butterfly_span_0_i_reg_174 <= select_ln84_fu_327_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                butterfly_span_0_i_reg_174 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_i_reg_196 <= i_fu_253_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_196 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_348_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Product_M_imag_reg_464 <= grp_fu_211_p2;
                Product_M_real_reg_458 <= grp_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Ulimit_reg_357 <= Ulimit_fu_271_p2;
                sext_ln81_2_reg_372 <= sext_ln81_2_fu_289_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Ulimit_reg_357_pp0_iter1_reg <= Ulimit_reg_357;
                icmp_ln76_reg_348 <= icmp_ln76_fu_247_p2;
                icmp_ln76_reg_348_pp0_iter1_reg <= icmp_ln76_reg_348;
                sext_ln81_2_reg_372_pp0_iter1_reg <= sext_ln81_2_reg_372;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Ulimit_reg_357_pp0_iter2_reg <= Ulimit_reg_357_pp0_iter1_reg;
                Ulimit_reg_357_pp0_iter3_reg <= Ulimit_reg_357_pp0_iter2_reg;
                Ulimit_reg_357_pp0_iter4_reg <= Ulimit_reg_357_pp0_iter3_reg;
                Ulimit_reg_357_pp0_iter5_reg <= Ulimit_reg_357_pp0_iter4_reg;
                Ulimit_reg_357_pp0_iter6_reg <= Ulimit_reg_357_pp0_iter5_reg;
                Ulimit_reg_357_pp0_iter7_reg <= Ulimit_reg_357_pp0_iter6_reg;
                Ulimit_reg_357_pp0_iter8_reg <= Ulimit_reg_357_pp0_iter7_reg;
                icmp_ln76_reg_348_pp0_iter10_reg <= icmp_ln76_reg_348_pp0_iter9_reg;
                icmp_ln76_reg_348_pp0_iter11_reg <= icmp_ln76_reg_348_pp0_iter10_reg;
                icmp_ln76_reg_348_pp0_iter12_reg <= icmp_ln76_reg_348_pp0_iter11_reg;
                icmp_ln76_reg_348_pp0_iter13_reg <= icmp_ln76_reg_348_pp0_iter12_reg;
                icmp_ln76_reg_348_pp0_iter14_reg <= icmp_ln76_reg_348_pp0_iter13_reg;
                icmp_ln76_reg_348_pp0_iter15_reg <= icmp_ln76_reg_348_pp0_iter14_reg;
                icmp_ln76_reg_348_pp0_iter2_reg <= icmp_ln76_reg_348_pp0_iter1_reg;
                icmp_ln76_reg_348_pp0_iter3_reg <= icmp_ln76_reg_348_pp0_iter2_reg;
                icmp_ln76_reg_348_pp0_iter4_reg <= icmp_ln76_reg_348_pp0_iter3_reg;
                icmp_ln76_reg_348_pp0_iter5_reg <= icmp_ln76_reg_348_pp0_iter4_reg;
                icmp_ln76_reg_348_pp0_iter6_reg <= icmp_ln76_reg_348_pp0_iter5_reg;
                icmp_ln76_reg_348_pp0_iter7_reg <= icmp_ln76_reg_348_pp0_iter6_reg;
                icmp_ln76_reg_348_pp0_iter8_reg <= icmp_ln76_reg_348_pp0_iter7_reg;
                icmp_ln76_reg_348_pp0_iter9_reg <= icmp_ln76_reg_348_pp0_iter8_reg;
                sext_ln81_2_reg_372_pp0_iter10_reg <= sext_ln81_2_reg_372_pp0_iter9_reg;
                sext_ln81_2_reg_372_pp0_iter11_reg <= sext_ln81_2_reg_372_pp0_iter10_reg;
                sext_ln81_2_reg_372_pp0_iter12_reg <= sext_ln81_2_reg_372_pp0_iter11_reg;
                sext_ln81_2_reg_372_pp0_iter13_reg <= sext_ln81_2_reg_372_pp0_iter12_reg;
                sext_ln81_2_reg_372_pp0_iter14_reg <= sext_ln81_2_reg_372_pp0_iter13_reg;
                sext_ln81_2_reg_372_pp0_iter15_reg <= sext_ln81_2_reg_372_pp0_iter14_reg;
                sext_ln81_2_reg_372_pp0_iter2_reg <= sext_ln81_2_reg_372_pp0_iter1_reg;
                sext_ln81_2_reg_372_pp0_iter3_reg <= sext_ln81_2_reg_372_pp0_iter2_reg;
                sext_ln81_2_reg_372_pp0_iter4_reg <= sext_ln81_2_reg_372_pp0_iter3_reg;
                sext_ln81_2_reg_372_pp0_iter5_reg <= sext_ln81_2_reg_372_pp0_iter4_reg;
                sext_ln81_2_reg_372_pp0_iter6_reg <= sext_ln81_2_reg_372_pp0_iter5_reg;
                sext_ln81_2_reg_372_pp0_iter7_reg <= sext_ln81_2_reg_372_pp0_iter6_reg;
                sext_ln81_2_reg_372_pp0_iter8_reg <= sext_ln81_2_reg_372_pp0_iter7_reg;
                sext_ln81_2_reg_372_pp0_iter9_reg <= sext_ln81_2_reg_372_pp0_iter8_reg;
                sext_ln82_reg_442_pp0_iter10_reg <= sext_ln82_reg_442;
                sext_ln82_reg_442_pp0_iter11_reg <= sext_ln82_reg_442_pp0_iter10_reg;
                sext_ln82_reg_442_pp0_iter12_reg <= sext_ln82_reg_442_pp0_iter11_reg;
                sext_ln82_reg_442_pp0_iter13_reg <= sext_ln82_reg_442_pp0_iter12_reg;
                sext_ln82_reg_442_pp0_iter14_reg <= sext_ln82_reg_442_pp0_iter13_reg;
                sext_ln82_reg_442_pp0_iter15_reg <= sext_ln82_reg_442_pp0_iter14_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_348_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                complex_M_imag_writ_3_reg_497 <= grp_fu_227_p2;
                complex_M_imag_writ_reg_487 <= grp_fu_219_p2;
                complex_M_real_writ_3_reg_492 <= grp_fu_223_p2;
                complex_M_real_writ_reg_482 <= grp_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln76_reg_348_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_r_M_imag_3_reg_476 <= data_OUT3_M_imag_q1;
                p_r_M_real_3_reg_470 <= data_OUT3_M_real_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_348 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_r_M_imag_reg_404 <= W_M_imag123_q0;
                p_r_M_real_reg_398 <= W_M_real127_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_348 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_t_imag_reg_416 <= data_OUT3_M_imag_q0;
                p_t_real_reg_410 <= data_OUT3_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_348_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln82_reg_442 <= sext_ln82_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_348_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_i_i_i_reg_427 <= grp_fu_235_p2;
                tmp_5_i_i_i_reg_432 <= grp_fu_239_p2;
                tmp_6_i_i_i_reg_437 <= grp_fu_243_p2;
                tmp_i_i_i_reg_422 <= grp_fu_231_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln76_fu_247_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln76_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((icmp_ln76_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Llimit_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(Ulimit_fu_271_p2));
    Ulimit_fu_271_p2 <= std_logic_vector(unsigned(butterfly_span_0_i_reg_174) + unsigned(shl_ln79_fu_265_p2));
    W_M_imag123_address0 <= sext_ln81_fu_283_p1(4 - 1 downto 0);

    W_M_imag123_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            W_M_imag123_ce0 <= ap_const_logic_1;
        else 
            W_M_imag123_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_M_real127_address0 <= sext_ln81_fu_283_p1(4 - 1 downto 0);

    W_M_real127_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            W_M_real127_ce0 <= ap_const_logic_1;
        else 
            W_M_real127_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln76_fu_247_p2)
    begin
        if ((icmp_ln76_fu_247_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    butterfly_pass_3_fu_319_p3 <= 
        butterfly_pass_fu_313_p2 when (icmp_ln86_fu_307_p2(0) = '1') else 
        ap_const_lv32_0;
    butterfly_pass_4_fu_335_p3 <= 
        butterfly_pass_0_i_reg_185 when (icmp_ln84_fu_295_p2(0) = '1') else 
        butterfly_pass_3_fu_319_p3;
    butterfly_pass_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(butterfly_pass_0_i_reg_185));
    butterfly_span_fu_301_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(butterfly_span_0_i_reg_174));
    data_OUT3_M_imag_address0 <= sext_ln81_2_fu_289_p1(5 - 1 downto 0);
    data_OUT3_M_imag_address1 <= sext_ln82_fu_343_p1(5 - 1 downto 0);

    data_OUT3_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT3_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT3_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT3_M_imag_ce1 <= ap_const_logic_1;
        else 
            data_OUT3_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT3_M_real_address0 <= sext_ln81_2_fu_289_p1(5 - 1 downto 0);
    data_OUT3_M_real_address1 <= sext_ln82_fu_343_p1(5 - 1 downto 0);

    data_OUT3_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT3_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT3_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT3_M_real_ce1 <= ap_const_logic_1;
        else 
            data_OUT3_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT4_M_imag_address0 <= sext_ln81_2_reg_372_pp0_iter15_reg(5 - 1 downto 0);
    data_OUT4_M_imag_address1 <= sext_ln82_reg_442_pp0_iter15_reg(5 - 1 downto 0);

    data_OUT4_M_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT4_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_imag_ce1 <= ap_const_logic_1;
        else 
            data_OUT4_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT4_M_imag_d0 <= complex_M_imag_writ_reg_487;
    data_OUT4_M_imag_d1 <= complex_M_imag_writ_3_reg_497;

    data_OUT4_M_imag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln76_reg_348_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln76_reg_348_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT4_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln76_reg_348_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln76_reg_348_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_imag_we1 <= ap_const_logic_1;
        else 
            data_OUT4_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT4_M_real_address0 <= sext_ln81_2_reg_372_pp0_iter15_reg(5 - 1 downto 0);
    data_OUT4_M_real_address1 <= sext_ln82_reg_442_pp0_iter15_reg(5 - 1 downto 0);

    data_OUT4_M_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT4_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_real_ce1 <= ap_const_logic_1;
        else 
            data_OUT4_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT4_M_real_d0 <= complex_M_real_writ_reg_482;
    data_OUT4_M_real_d1 <= complex_M_real_writ_3_reg_492;

    data_OUT4_M_real_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln76_reg_348_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln76_reg_348_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT4_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln76_reg_348_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln76_reg_348_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_OUT4_M_real_we1 <= ap_const_logic_1;
        else 
            data_OUT4_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_253_p2 <= std_logic_vector(unsigned(i_0_i_reg_196) + unsigned(ap_const_lv5_1));
    icmp_ln76_fu_247_p2 <= "1" when (i_0_i_reg_196 = ap_const_lv5_10) else "0";
    icmp_ln84_fu_295_p2 <= "1" when (signed(butterfly_span_0_i_reg_174) < signed(ap_const_lv32_7)) else "0";
    icmp_ln86_fu_307_p2 <= "1" when (signed(butterfly_pass_0_i_reg_185) < signed(ap_const_lv32_1)) else "0";
    index_fu_259_p2 <= std_logic_vector(shift_left(unsigned(butterfly_span_0_i_reg_174),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    select_ln84_fu_327_p3 <= 
        butterfly_span_fu_301_p2 when (icmp_ln84_fu_295_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln81_2_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Llimit_fu_277_p2),64));

        sext_ln81_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_fu_259_p2),64));

        sext_ln82_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ulimit_reg_357_pp0_iter8_reg),64));

    shl_ln79_fu_265_p2 <= std_logic_vector(shift_left(unsigned(butterfly_pass_0_i_reg_185),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
end behav;
