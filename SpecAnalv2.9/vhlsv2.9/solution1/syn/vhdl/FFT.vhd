-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.674000,HLS_SYN_LAT=439,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=52,HLS_SYN_FF=6112,HLS_SYN_LUT=12493,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (80 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (80 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (80 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (80 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (80 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (80 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (80 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (80 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (80 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (80 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (80 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (80 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_IN_M_real_ce0 : STD_LOGIC;
    signal data_IN_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_IN_M_imag_ce0 : STD_LOGIC;
    signal data_IN_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_mode : STD_LOGIC_VECTOR (7 downto 0);
    signal data_OUT_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT_M_real_ce0 : STD_LOGIC;
    signal data_OUT_M_real_we0 : STD_LOGIC;
    signal data_OUT_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT_M_imag_ce0 : STD_LOGIC;
    signal data_OUT_M_imag_we0 : STD_LOGIC;
    signal mag_OUT_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mag_OUT_ce0 : STD_LOGIC;
    signal mag_OUT_we0 : STD_LOGIC;
    signal xin_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_real_ce0 : STD_LOGIC;
    signal xin_M_real_we0 : STD_LOGIC;
    signal xin_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xin_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xin_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_imag_ce0 : STD_LOGIC;
    signal xin_M_imag_we0 : STD_LOGIC;
    signal xin_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xin_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal prod_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal prod_IN_M_real_ce0 : STD_LOGIC;
    signal prod_IN_M_real_we0 : STD_LOGIC;
    signal prod_IN_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal prod_IN_M_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal prod_IN_M_real_ce1 : STD_LOGIC;
    signal prod_IN_M_real_we1 : STD_LOGIC;
    signal prod_IN_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal prod_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal prod_IN_M_imag_ce0 : STD_LOGIC;
    signal prod_IN_M_imag_we0 : STD_LOGIC;
    signal prod_IN_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal prod_IN_M_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal prod_IN_M_imag_ce1 : STD_LOGIC;
    signal prod_IN_M_imag_we1 : STD_LOGIC;
    signal prod_IN_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT0_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_ce0 : STD_LOGIC;
    signal data_OUT0_M_real_we0 : STD_LOGIC;
    signal data_OUT0_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT0_M_real_ce1 : STD_LOGIC;
    signal data_OUT0_M_real_we1 : STD_LOGIC;
    signal data_OUT0_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_imag_ce0 : STD_LOGIC;
    signal data_OUT0_M_imag_we0 : STD_LOGIC;
    signal data_OUT0_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT0_M_imag_ce1 : STD_LOGIC;
    signal data_OUT0_M_imag_we1 : STD_LOGIC;
    signal data_OUT1_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_real_ce0 : STD_LOGIC;
    signal data_OUT1_M_real_we0 : STD_LOGIC;
    signal data_OUT1_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT1_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_imag_ce0 : STD_LOGIC;
    signal data_OUT1_M_imag_we0 : STD_LOGIC;
    signal data_OUT1_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT2_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_real_ce0 : STD_LOGIC;
    signal data_OUT2_M_real_we0 : STD_LOGIC;
    signal data_OUT2_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT2_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_imag_ce0 : STD_LOGIC;
    signal data_OUT2_M_imag_we0 : STD_LOGIC;
    signal data_OUT2_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT3_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_real_ce0 : STD_LOGIC;
    signal data_OUT3_M_real_we0 : STD_LOGIC;
    signal data_OUT3_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT3_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_imag_ce0 : STD_LOGIC;
    signal data_OUT3_M_imag_we0 : STD_LOGIC;
    signal data_OUT3_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT4_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_real_ce0 : STD_LOGIC;
    signal data_OUT4_M_real_we0 : STD_LOGIC;
    signal data_OUT4_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT4_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_imag_ce0 : STD_LOGIC;
    signal data_OUT4_M_imag_we0 : STD_LOGIC;
    signal data_OUT4_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUTfft_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUTfft_M_real_ce0 : STD_LOGIC;
    signal data_OUTfft_M_real_we0 : STD_LOGIC;
    signal data_OUTfft_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUTfft_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUTfft_M_imag_ce0 : STD_LOGIC;
    signal data_OUTfft_M_imag_we0 : STD_LOGIC;
    signal data_OUTfft_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xout_mag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_mag_ce0 : STD_LOGIC;
    signal xout_mag_we0 : STD_LOGIC;
    signal xout_mag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_2203 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal win_mode_read_reg_2652 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln99_fu_2314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state48_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln99_reg_2657_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2657_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_2320_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln102_fu_2326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_2666_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal data_OUTfft_M_real_1_reg_2681 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal data_OUTfft_M_imag_1_reg_2687 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_2693 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_24_reg_2698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_2703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_FFT0_fu_2234_ap_ready : STD_LOGIC;
    signal grp_FFT0_fu_2234_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state48 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal grp_mult_window_fu_2214_ap_start : STD_LOGIC;
    signal grp_mult_window_fu_2214_ap_done : STD_LOGIC;
    signal grp_mult_window_fu_2214_ap_idle : STD_LOGIC;
    signal grp_mult_window_fu_2214_ap_ready : STD_LOGIC;
    signal grp_mult_window_fu_2214_data_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_data_IN_M_real_ce0 : STD_LOGIC;
    signal grp_mult_window_fu_2214_data_IN_M_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_data_IN_M_real_ce1 : STD_LOGIC;
    signal grp_mult_window_fu_2214_data_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_data_IN_M_imag_ce0 : STD_LOGIC;
    signal grp_mult_window_fu_2214_data_IN_M_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_data_IN_M_imag_ce1 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_ce0 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_we0 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_ce1 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_we1 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_real_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_ce0 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_we0 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_ce1 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_we1 : STD_LOGIC;
    signal grp_mult_window_fu_2214_prod_IN_M_imag_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_2234_ap_start : STD_LOGIC;
    signal grp_FFT0_fu_2234_ap_idle : STD_LOGIC;
    signal grp_FFT0_fu_2234_FFT_stage : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_2234_pass_check : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_2234_index_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_2234_pass_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_2234_data_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_2234_data_IN_M_real_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_2234_data_IN_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_2234_data_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_2234_data_IN_M_imag_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_2234_data_IN_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_2234_data_OUT_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_2234_data_OUT_M_real_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_2234_data_OUT_M_real_we0 : STD_LOGIC;
    signal grp_FFT0_fu_2234_data_OUT_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT0_fu_2234_data_OUT_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_2234_data_OUT_M_imag_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_2234_data_OUT_M_imag_we0 : STD_LOGIC;
    signal grp_FFT0_fu_2234_data_OUT_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitreverse_fu_2290_ap_start : STD_LOGIC;
    signal grp_bitreverse_fu_2290_ap_done : STD_LOGIC;
    signal grp_bitreverse_fu_2290_ap_idle : STD_LOGIC;
    signal grp_bitreverse_fu_2290_ap_ready : STD_LOGIC;
    signal grp_bitreverse_fu_2290_prod_IN_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_prod_IN_M_real_ce0 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_prod_IN_M_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_prod_IN_M_real_ce1 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_ce0 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_we0 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_ce1 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_we1 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_real_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitreverse_fu_2290_prod_IN_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_prod_IN_M_imag_ce0 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_prod_IN_M_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_prod_IN_M_imag_ce1 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_ce0 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_we0 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_ce1 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_we1 : STD_LOGIC;
    signal grp_bitreverse_fu_2290_data_OUT0_M_imag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mult_window_fu_2214_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_FFT0_fu_2234_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_bitreverse_fu_2290_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (80 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component mult_window IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_ce0 : OUT STD_LOGIC;
        data_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_ce1 : OUT STD_LOGIC;
        data_IN_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_ce0 : OUT STD_LOGIC;
        data_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_ce1 : OUT STD_LOGIC;
        data_IN_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        win_mode : IN STD_LOGIC_VECTOR (7 downto 0);
        prod_IN_M_real_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_real_2_ce0 : OUT STD_LOGIC;
        prod_IN_M_real_2_we0 : OUT STD_LOGIC;
        prod_IN_M_real_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        prod_IN_M_real_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_real_2_ce1 : OUT STD_LOGIC;
        prod_IN_M_real_2_we1 : OUT STD_LOGIC;
        prod_IN_M_real_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        prod_IN_M_imag_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_imag_2_ce0 : OUT STD_LOGIC;
        prod_IN_M_imag_2_we0 : OUT STD_LOGIC;
        prod_IN_M_imag_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        prod_IN_M_imag_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_imag_2_ce1 : OUT STD_LOGIC;
        prod_IN_M_imag_2_we1 : OUT STD_LOGIC;
        prod_IN_M_imag_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
        pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
        index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        data_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_ce0 : OUT STD_LOGIC;
        data_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_ce0 : OUT STD_LOGIC;
        data_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_real_ce0 : OUT STD_LOGIC;
        data_OUT_M_real_we0 : OUT STD_LOGIC;
        data_OUT_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_imag_ce0 : OUT STD_LOGIC;
        data_OUT_M_imag_we0 : OUT STD_LOGIC;
        data_OUT_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bitreverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        prod_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_real_ce0 : OUT STD_LOGIC;
        prod_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        prod_IN_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_real_ce1 : OUT STD_LOGIC;
        prod_IN_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_OUT0_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT0_M_real_ce0 : OUT STD_LOGIC;
        data_OUT0_M_real_we0 : OUT STD_LOGIC;
        data_OUT0_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_OUT0_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT0_M_real_ce1 : OUT STD_LOGIC;
        data_OUT0_M_real_we1 : OUT STD_LOGIC;
        data_OUT0_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        prod_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_imag_ce0 : OUT STD_LOGIC;
        prod_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        prod_IN_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        prod_IN_M_imag_ce1 : OUT STD_LOGIC;
        prod_IN_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_OUT0_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT0_M_imag_ce0 : OUT STD_LOGIC;
        data_OUT0_M_imag_we0 : OUT STD_LOGIC;
        data_OUT0_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_OUT0_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT0_M_imag_ce1 : OUT STD_LOGIC;
        data_OUT0_M_imag_we1 : OUT STD_LOGIC;
        data_OUT0_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_xin_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_prod_IN_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_data_OUT0_M_rg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_data_OUT1_M_ribs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_IN_M_real_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_ce0 : IN STD_LOGIC;
        data_IN_M_real_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_IN_M_imag_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_ce0 : IN STD_LOGIC;
        data_IN_M_imag_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        win_mode : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_OUT_M_real_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_real_ce0 : IN STD_LOGIC;
        data_OUT_M_real_we0 : IN STD_LOGIC;
        data_OUT_M_real_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_OUT_M_imag_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_imag_ce0 : IN STD_LOGIC;
        data_OUT_M_imag_we0 : IN STD_LOGIC;
        data_OUT_M_imag_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mag_OUT_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        mag_OUT_ce0 : IN STD_LOGIC;
        mag_OUT_we0 : IN STD_LOGIC;
        mag_OUT_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    xin_M_real_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_real_address0,
        ce0 => xin_M_real_ce0,
        we0 => xin_M_real_we0,
        d0 => data_IN_M_real_q0,
        q0 => xin_M_real_q0,
        address1 => grp_mult_window_fu_2214_data_IN_M_real_address1,
        ce1 => grp_mult_window_fu_2214_data_IN_M_real_ce1,
        q1 => xin_M_real_q1);

    xin_M_imag_U : component FFT_xin_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_imag_address0,
        ce0 => xin_M_imag_ce0,
        we0 => xin_M_imag_we0,
        d0 => data_IN_M_imag_q0,
        q0 => xin_M_imag_q0,
        address1 => grp_mult_window_fu_2214_data_IN_M_imag_address1,
        ce1 => grp_mult_window_fu_2214_data_IN_M_imag_ce1,
        q1 => xin_M_imag_q1);

    prod_IN_M_real_U : component FFT_prod_IN_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prod_IN_M_real_address0,
        ce0 => prod_IN_M_real_ce0,
        we0 => prod_IN_M_real_we0,
        d0 => grp_mult_window_fu_2214_prod_IN_M_real_2_d0,
        q0 => prod_IN_M_real_q0,
        address1 => prod_IN_M_real_address1,
        ce1 => prod_IN_M_real_ce1,
        we1 => prod_IN_M_real_we1,
        d1 => grp_mult_window_fu_2214_prod_IN_M_real_2_d1,
        q1 => prod_IN_M_real_q1);

    prod_IN_M_imag_U : component FFT_prod_IN_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prod_IN_M_imag_address0,
        ce0 => prod_IN_M_imag_ce0,
        we0 => prod_IN_M_imag_we0,
        d0 => grp_mult_window_fu_2214_prod_IN_M_imag_2_d0,
        q0 => prod_IN_M_imag_q0,
        address1 => prod_IN_M_imag_address1,
        ce1 => prod_IN_M_imag_ce1,
        we1 => prod_IN_M_imag_we1,
        d1 => grp_mult_window_fu_2214_prod_IN_M_imag_2_d1,
        q1 => prod_IN_M_imag_q1);

    data_OUT0_M_real_U : component FFT_data_OUT0_M_rg8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_real_address0,
        ce0 => data_OUT0_M_real_ce0,
        we0 => data_OUT0_M_real_we0,
        d0 => grp_bitreverse_fu_2290_data_OUT0_M_real_d0,
        q0 => data_OUT0_M_real_q0,
        address1 => grp_bitreverse_fu_2290_data_OUT0_M_real_address1,
        ce1 => data_OUT0_M_real_ce1,
        we1 => data_OUT0_M_real_we1,
        d1 => grp_bitreverse_fu_2290_data_OUT0_M_real_d1);

    data_OUT0_M_imag_U : component FFT_data_OUT0_M_rg8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_imag_address0,
        ce0 => data_OUT0_M_imag_ce0,
        we0 => data_OUT0_M_imag_we0,
        d0 => grp_bitreverse_fu_2290_data_OUT0_M_imag_d0,
        q0 => data_OUT0_M_imag_q0,
        address1 => grp_bitreverse_fu_2290_data_OUT0_M_imag_address1,
        ce1 => data_OUT0_M_imag_ce1,
        we1 => data_OUT0_M_imag_we1,
        d1 => grp_bitreverse_fu_2290_data_OUT0_M_imag_d1);

    data_OUT1_M_real_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_real_address0,
        ce0 => data_OUT1_M_real_ce0,
        we0 => data_OUT1_M_real_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_real_d0,
        q0 => data_OUT1_M_real_q0);

    data_OUT1_M_imag_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_imag_address0,
        ce0 => data_OUT1_M_imag_ce0,
        we0 => data_OUT1_M_imag_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_imag_d0,
        q0 => data_OUT1_M_imag_q0);

    data_OUT2_M_real_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_real_address0,
        ce0 => data_OUT2_M_real_ce0,
        we0 => data_OUT2_M_real_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_real_d0,
        q0 => data_OUT2_M_real_q0);

    data_OUT2_M_imag_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_imag_address0,
        ce0 => data_OUT2_M_imag_ce0,
        we0 => data_OUT2_M_imag_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_imag_d0,
        q0 => data_OUT2_M_imag_q0);

    data_OUT3_M_real_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_real_address0,
        ce0 => data_OUT3_M_real_ce0,
        we0 => data_OUT3_M_real_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_real_d0,
        q0 => data_OUT3_M_real_q0);

    data_OUT3_M_imag_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_imag_address0,
        ce0 => data_OUT3_M_imag_ce0,
        we0 => data_OUT3_M_imag_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_imag_d0,
        q0 => data_OUT3_M_imag_q0);

    data_OUT4_M_real_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_real_address0,
        ce0 => data_OUT4_M_real_ce0,
        we0 => data_OUT4_M_real_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_real_d0,
        q0 => data_OUT4_M_real_q0);

    data_OUT4_M_imag_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_imag_address0,
        ce0 => data_OUT4_M_imag_ce0,
        we0 => data_OUT4_M_imag_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_imag_d0,
        q0 => data_OUT4_M_imag_q0);

    data_OUTfft_M_real_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUTfft_M_real_address0,
        ce0 => data_OUTfft_M_real_ce0,
        we0 => data_OUTfft_M_real_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_real_d0,
        q0 => data_OUTfft_M_real_q0);

    data_OUTfft_M_imag_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUTfft_M_imag_address0,
        ce0 => data_OUTfft_M_imag_ce0,
        we0 => data_OUTfft_M_imag_we0,
        d0 => grp_FFT0_fu_2234_data_OUT_M_imag_d0,
        q0 => data_OUTfft_M_imag_q0);

    xout_mag_U : component FFT_data_OUT1_M_ribs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_mag_address0,
        ce0 => xout_mag_ce0,
        we0 => xout_mag_we0,
        d0 => tmp_3_i_reg_2703,
        q0 => xout_mag_q0);

    FFT_AXILiteS_s_axi_U : component FFT_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_IN_M_real_address0 => data_IN_M_real_address0,
        data_IN_M_real_ce0 => data_IN_M_real_ce0,
        data_IN_M_real_q0 => data_IN_M_real_q0,
        data_IN_M_imag_address0 => data_IN_M_imag_address0,
        data_IN_M_imag_ce0 => data_IN_M_imag_ce0,
        data_IN_M_imag_q0 => data_IN_M_imag_q0,
        win_mode => win_mode,
        data_OUT_M_real_address0 => data_OUT_M_real_address0,
        data_OUT_M_real_ce0 => data_OUT_M_real_ce0,
        data_OUT_M_real_we0 => data_OUT_M_real_we0,
        data_OUT_M_real_d0 => data_OUTfft_M_real_q0,
        data_OUT_M_imag_address0 => data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0 => data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0 => data_OUT_M_imag_we0,
        data_OUT_M_imag_d0 => data_OUTfft_M_imag_q0,
        mag_OUT_address0 => mag_OUT_address0,
        mag_OUT_ce0 => mag_OUT_ce0,
        mag_OUT_we0 => mag_OUT_we0,
        mag_OUT_d0 => xout_mag_q0);

    grp_mult_window_fu_2214 : component mult_window
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mult_window_fu_2214_ap_start,
        ap_done => grp_mult_window_fu_2214_ap_done,
        ap_idle => grp_mult_window_fu_2214_ap_idle,
        ap_ready => grp_mult_window_fu_2214_ap_ready,
        data_IN_M_real_address0 => grp_mult_window_fu_2214_data_IN_M_real_address0,
        data_IN_M_real_ce0 => grp_mult_window_fu_2214_data_IN_M_real_ce0,
        data_IN_M_real_q0 => xin_M_real_q0,
        data_IN_M_real_address1 => grp_mult_window_fu_2214_data_IN_M_real_address1,
        data_IN_M_real_ce1 => grp_mult_window_fu_2214_data_IN_M_real_ce1,
        data_IN_M_real_q1 => xin_M_real_q1,
        data_IN_M_imag_address0 => grp_mult_window_fu_2214_data_IN_M_imag_address0,
        data_IN_M_imag_ce0 => grp_mult_window_fu_2214_data_IN_M_imag_ce0,
        data_IN_M_imag_q0 => xin_M_imag_q0,
        data_IN_M_imag_address1 => grp_mult_window_fu_2214_data_IN_M_imag_address1,
        data_IN_M_imag_ce1 => grp_mult_window_fu_2214_data_IN_M_imag_ce1,
        data_IN_M_imag_q1 => xin_M_imag_q1,
        win_mode => win_mode_read_reg_2652,
        prod_IN_M_real_2_address0 => grp_mult_window_fu_2214_prod_IN_M_real_2_address0,
        prod_IN_M_real_2_ce0 => grp_mult_window_fu_2214_prod_IN_M_real_2_ce0,
        prod_IN_M_real_2_we0 => grp_mult_window_fu_2214_prod_IN_M_real_2_we0,
        prod_IN_M_real_2_d0 => grp_mult_window_fu_2214_prod_IN_M_real_2_d0,
        prod_IN_M_real_2_address1 => grp_mult_window_fu_2214_prod_IN_M_real_2_address1,
        prod_IN_M_real_2_ce1 => grp_mult_window_fu_2214_prod_IN_M_real_2_ce1,
        prod_IN_M_real_2_we1 => grp_mult_window_fu_2214_prod_IN_M_real_2_we1,
        prod_IN_M_real_2_d1 => grp_mult_window_fu_2214_prod_IN_M_real_2_d1,
        prod_IN_M_imag_2_address0 => grp_mult_window_fu_2214_prod_IN_M_imag_2_address0,
        prod_IN_M_imag_2_ce0 => grp_mult_window_fu_2214_prod_IN_M_imag_2_ce0,
        prod_IN_M_imag_2_we0 => grp_mult_window_fu_2214_prod_IN_M_imag_2_we0,
        prod_IN_M_imag_2_d0 => grp_mult_window_fu_2214_prod_IN_M_imag_2_d0,
        prod_IN_M_imag_2_address1 => grp_mult_window_fu_2214_prod_IN_M_imag_2_address1,
        prod_IN_M_imag_2_ce1 => grp_mult_window_fu_2214_prod_IN_M_imag_2_ce1,
        prod_IN_M_imag_2_we1 => grp_mult_window_fu_2214_prod_IN_M_imag_2_we1,
        prod_IN_M_imag_2_d1 => grp_mult_window_fu_2214_prod_IN_M_imag_2_d1);

    grp_FFT0_fu_2234 : component FFT0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT0_fu_2234_ap_start,
        ap_done => grp_FFT0_fu_2234_ap_done,
        ap_idle => grp_FFT0_fu_2234_ap_idle,
        ap_ready => grp_FFT0_fu_2234_ap_ready,
        FFT_stage => grp_FFT0_fu_2234_FFT_stage,
        pass_check => grp_FFT0_fu_2234_pass_check,
        index_shift => grp_FFT0_fu_2234_index_shift,
        pass_shift => grp_FFT0_fu_2234_pass_shift,
        data_IN_M_real_address0 => grp_FFT0_fu_2234_data_IN_M_real_address0,
        data_IN_M_real_ce0 => grp_FFT0_fu_2234_data_IN_M_real_ce0,
        data_IN_M_real_q0 => grp_FFT0_fu_2234_data_IN_M_real_q0,
        data_IN_M_imag_address0 => grp_FFT0_fu_2234_data_IN_M_imag_address0,
        data_IN_M_imag_ce0 => grp_FFT0_fu_2234_data_IN_M_imag_ce0,
        data_IN_M_imag_q0 => grp_FFT0_fu_2234_data_IN_M_imag_q0,
        data_OUT_M_real_address0 => grp_FFT0_fu_2234_data_OUT_M_real_address0,
        data_OUT_M_real_ce0 => grp_FFT0_fu_2234_data_OUT_M_real_ce0,
        data_OUT_M_real_we0 => grp_FFT0_fu_2234_data_OUT_M_real_we0,
        data_OUT_M_real_d0 => grp_FFT0_fu_2234_data_OUT_M_real_d0,
        data_OUT_M_imag_address0 => grp_FFT0_fu_2234_data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0 => grp_FFT0_fu_2234_data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0 => grp_FFT0_fu_2234_data_OUT_M_imag_we0,
        data_OUT_M_imag_d0 => grp_FFT0_fu_2234_data_OUT_M_imag_d0);

    grp_bitreverse_fu_2290 : component bitreverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bitreverse_fu_2290_ap_start,
        ap_done => grp_bitreverse_fu_2290_ap_done,
        ap_idle => grp_bitreverse_fu_2290_ap_idle,
        ap_ready => grp_bitreverse_fu_2290_ap_ready,
        prod_IN_M_real_address0 => grp_bitreverse_fu_2290_prod_IN_M_real_address0,
        prod_IN_M_real_ce0 => grp_bitreverse_fu_2290_prod_IN_M_real_ce0,
        prod_IN_M_real_q0 => prod_IN_M_real_q0,
        prod_IN_M_real_address1 => grp_bitreverse_fu_2290_prod_IN_M_real_address1,
        prod_IN_M_real_ce1 => grp_bitreverse_fu_2290_prod_IN_M_real_ce1,
        prod_IN_M_real_q1 => prod_IN_M_real_q1,
        data_OUT0_M_real_address0 => grp_bitreverse_fu_2290_data_OUT0_M_real_address0,
        data_OUT0_M_real_ce0 => grp_bitreverse_fu_2290_data_OUT0_M_real_ce0,
        data_OUT0_M_real_we0 => grp_bitreverse_fu_2290_data_OUT0_M_real_we0,
        data_OUT0_M_real_d0 => grp_bitreverse_fu_2290_data_OUT0_M_real_d0,
        data_OUT0_M_real_address1 => grp_bitreverse_fu_2290_data_OUT0_M_real_address1,
        data_OUT0_M_real_ce1 => grp_bitreverse_fu_2290_data_OUT0_M_real_ce1,
        data_OUT0_M_real_we1 => grp_bitreverse_fu_2290_data_OUT0_M_real_we1,
        data_OUT0_M_real_d1 => grp_bitreverse_fu_2290_data_OUT0_M_real_d1,
        prod_IN_M_imag_address0 => grp_bitreverse_fu_2290_prod_IN_M_imag_address0,
        prod_IN_M_imag_ce0 => grp_bitreverse_fu_2290_prod_IN_M_imag_ce0,
        prod_IN_M_imag_q0 => prod_IN_M_imag_q0,
        prod_IN_M_imag_address1 => grp_bitreverse_fu_2290_prod_IN_M_imag_address1,
        prod_IN_M_imag_ce1 => grp_bitreverse_fu_2290_prod_IN_M_imag_ce1,
        prod_IN_M_imag_q1 => prod_IN_M_imag_q1,
        data_OUT0_M_imag_address0 => grp_bitreverse_fu_2290_data_OUT0_M_imag_address0,
        data_OUT0_M_imag_ce0 => grp_bitreverse_fu_2290_data_OUT0_M_imag_ce0,
        data_OUT0_M_imag_we0 => grp_bitreverse_fu_2290_data_OUT0_M_imag_we0,
        data_OUT0_M_imag_d0 => grp_bitreverse_fu_2290_data_OUT0_M_imag_d0,
        data_OUT0_M_imag_address1 => grp_bitreverse_fu_2290_data_OUT0_M_imag_address1,
        data_OUT0_M_imag_ce1 => grp_bitreverse_fu_2290_data_OUT0_M_imag_ce1,
        data_OUT0_M_imag_we1 => grp_bitreverse_fu_2290_data_OUT0_M_imag_we1,
        data_OUT0_M_imag_d1 => grp_bitreverse_fu_2290_data_OUT0_M_imag_d1);

    FFT_fadd_32ns_32ndEe_U45 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_reg_2693,
        din1 => tmp_i_24_reg_2698,
        ce => ap_const_logic_1,
        dout => grp_fu_2302_p2);

    FFT_fmul_32ns_32neOg_U46 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data_OUTfft_M_real_1_reg_2681,
        din1 => data_OUTfft_M_real_1_reg_2681,
        ce => ap_const_logic_1,
        dout => grp_fu_2306_p2);

    FFT_fmul_32ns_32neOg_U47 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data_OUTfft_M_imag_1_reg_2687,
        din1 => data_OUTfft_M_imag_1_reg_2687,
        ce => ap_const_logic_1,
        dout => grp_fu_2310_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state48);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT0_fu_2234_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT0_fu_2234_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                    grp_FFT0_fu_2234_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT0_fu_2234_ap_ready = ap_const_logic_1)) then 
                    grp_FFT0_fu_2234_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bitreverse_fu_2290_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bitreverse_fu_2290_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    grp_bitreverse_fu_2290_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bitreverse_fu_2290_ap_ready = ap_const_logic_1)) then 
                    grp_bitreverse_fu_2290_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mult_window_fu_2214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mult_window_fu_2214_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    grp_mult_window_fu_2214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mult_window_fu_2214_ap_ready = ap_const_logic_1)) then 
                    grp_mult_window_fu_2214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_2203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln99_fu_2314_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_2203 <= i_fu_2320_p2;
            elsif (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i_0_i_reg_2203 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln99_reg_2657 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_OUTfft_M_imag_1_reg_2687 <= data_OUTfft_M_imag_q0;
                data_OUTfft_M_real_1_reg_2681 <= data_OUTfft_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln99_reg_2657 <= icmp_ln99_fu_2314_p2;
                icmp_ln99_reg_2657_pp0_iter1_reg <= icmp_ln99_reg_2657;
                    zext_ln102_reg_2666_pp0_iter1_reg(5 downto 0) <= zext_ln102_reg_2666(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln99_reg_2657_pp0_iter10_reg <= icmp_ln99_reg_2657_pp0_iter9_reg;
                icmp_ln99_reg_2657_pp0_iter2_reg <= icmp_ln99_reg_2657_pp0_iter1_reg;
                icmp_ln99_reg_2657_pp0_iter3_reg <= icmp_ln99_reg_2657_pp0_iter2_reg;
                icmp_ln99_reg_2657_pp0_iter4_reg <= icmp_ln99_reg_2657_pp0_iter3_reg;
                icmp_ln99_reg_2657_pp0_iter5_reg <= icmp_ln99_reg_2657_pp0_iter4_reg;
                icmp_ln99_reg_2657_pp0_iter6_reg <= icmp_ln99_reg_2657_pp0_iter5_reg;
                icmp_ln99_reg_2657_pp0_iter7_reg <= icmp_ln99_reg_2657_pp0_iter6_reg;
                icmp_ln99_reg_2657_pp0_iter8_reg <= icmp_ln99_reg_2657_pp0_iter7_reg;
                icmp_ln99_reg_2657_pp0_iter9_reg <= icmp_ln99_reg_2657_pp0_iter8_reg;
                    zext_ln102_reg_2666_pp0_iter10_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter9_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter2_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter1_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter3_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter2_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter4_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter3_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter5_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter4_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter6_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter5_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter7_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter6_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter8_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter7_reg(5 downto 0);
                    zext_ln102_reg_2666_pp0_iter9_reg(5 downto 0) <= zext_ln102_reg_2666_pp0_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2657_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_i_reg_2703 <= grp_fu_2302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2657_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_24_reg_2698 <= grp_fu_2310_p2;
                tmp_i_reg_2693 <= grp_fu_2306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                win_mode_read_reg_2652 <= win_mode;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln99_fu_2314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln102_reg_2666(5 downto 0) <= zext_ln102_fu_2326_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln102_reg_2666(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_2666_pp0_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln99_fu_2314_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state47, grp_FFT0_fu_2234_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_mult_window_fu_2214_ap_done, grp_bitreverse_fu_2290_ap_done, ap_CS_fsm_state35, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state37)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_mult_window_fu_2214_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_bitreverse_fu_2290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_FFT0_fu_2234_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln99_fu_2314_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln99_fu_2314_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(48);
    ap_CS_fsm_state61 <= ap_CS_fsm(49);
    ap_CS_fsm_state62 <= ap_CS_fsm(50);
    ap_CS_fsm_state63 <= ap_CS_fsm(51);
    ap_CS_fsm_state64 <= ap_CS_fsm(52);
    ap_CS_fsm_state65 <= ap_CS_fsm(53);
    ap_CS_fsm_state66 <= ap_CS_fsm(54);
    ap_CS_fsm_state67 <= ap_CS_fsm(55);
    ap_CS_fsm_state68 <= ap_CS_fsm(56);
    ap_CS_fsm_state69 <= ap_CS_fsm(57);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(58);
    ap_CS_fsm_state71 <= ap_CS_fsm(59);
    ap_CS_fsm_state72 <= ap_CS_fsm(60);
    ap_CS_fsm_state73 <= ap_CS_fsm(61);
    ap_CS_fsm_state74 <= ap_CS_fsm(62);
    ap_CS_fsm_state75 <= ap_CS_fsm(63);
    ap_CS_fsm_state76 <= ap_CS_fsm(64);
    ap_CS_fsm_state77 <= ap_CS_fsm(65);
    ap_CS_fsm_state78 <= ap_CS_fsm(66);
    ap_CS_fsm_state79 <= ap_CS_fsm(67);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(68);
    ap_CS_fsm_state81 <= ap_CS_fsm(69);
    ap_CS_fsm_state82 <= ap_CS_fsm(70);
    ap_CS_fsm_state83 <= ap_CS_fsm(71);
    ap_CS_fsm_state84 <= ap_CS_fsm(72);
    ap_CS_fsm_state85 <= ap_CS_fsm(73);
    ap_CS_fsm_state86 <= ap_CS_fsm(74);
    ap_CS_fsm_state87 <= ap_CS_fsm(75);
    ap_CS_fsm_state88 <= ap_CS_fsm(76);
    ap_CS_fsm_state89 <= ap_CS_fsm(77);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(78);
    ap_CS_fsm_state91 <= ap_CS_fsm(79);
    ap_CS_fsm_state92 <= ap_CS_fsm(80);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state48_assign_proc : process(icmp_ln99_fu_2314_p2)
    begin
        if ((icmp_ln99_fu_2314_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_IN_M_imag_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_IN_M_imag_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            data_IN_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_imag_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_IN_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_M_real_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            data_IN_M_real_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            data_IN_M_real_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_IN_M_real_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            data_IN_M_real_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            data_IN_M_real_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            data_IN_M_real_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_IN_M_real_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_IN_M_real_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            data_IN_M_real_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_IN_M_real_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_IN_M_real_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_IN_M_real_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_IN_M_real_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_IN_M_real_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_IN_M_real_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_IN_M_real_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_IN_M_real_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_IN_M_real_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_IN_M_real_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_IN_M_real_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_IN_M_real_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_IN_M_real_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_IN_M_real_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_IN_M_real_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_IN_M_real_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_IN_M_real_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            data_IN_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_real_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_IN_M_real_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_address0, grp_bitreverse_fu_2290_data_OUT0_M_imag_address0, ap_CS_fsm_state39, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_imag_address0 <= grp_bitreverse_fu_2290_data_OUT0_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT0_M_imag_address0 <= grp_FFT0_fu_2234_data_IN_M_imag_address0;
        else 
            data_OUT0_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_imag_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_ce0, grp_bitreverse_fu_2290_data_OUT0_M_imag_ce0, ap_CS_fsm_state39, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_imag_ce0 <= grp_bitreverse_fu_2290_data_OUT0_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT0_M_imag_ce0 <= grp_FFT0_fu_2234_data_IN_M_imag_ce0;
        else 
            data_OUT0_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_ce1_assign_proc : process(grp_bitreverse_fu_2290_data_OUT0_M_imag_ce1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_imag_ce1 <= grp_bitreverse_fu_2290_data_OUT0_M_imag_ce1;
        else 
            data_OUT0_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_we0_assign_proc : process(grp_bitreverse_fu_2290_data_OUT0_M_imag_we0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_imag_we0 <= grp_bitreverse_fu_2290_data_OUT0_M_imag_we0;
        else 
            data_OUT0_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_we1_assign_proc : process(grp_bitreverse_fu_2290_data_OUT0_M_imag_we1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_imag_we1 <= grp_bitreverse_fu_2290_data_OUT0_M_imag_we1;
        else 
            data_OUT0_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_address0, grp_bitreverse_fu_2290_data_OUT0_M_real_address0, ap_CS_fsm_state39, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_real_address0 <= grp_bitreverse_fu_2290_data_OUT0_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT0_M_real_address0 <= grp_FFT0_fu_2234_data_IN_M_real_address0;
        else 
            data_OUT0_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_real_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_ce0, grp_bitreverse_fu_2290_data_OUT0_M_real_ce0, ap_CS_fsm_state39, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_real_ce0 <= grp_bitreverse_fu_2290_data_OUT0_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT0_M_real_ce0 <= grp_FFT0_fu_2234_data_IN_M_real_ce0;
        else 
            data_OUT0_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_ce1_assign_proc : process(grp_bitreverse_fu_2290_data_OUT0_M_real_ce1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_real_ce1 <= grp_bitreverse_fu_2290_data_OUT0_M_real_ce1;
        else 
            data_OUT0_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_we0_assign_proc : process(grp_bitreverse_fu_2290_data_OUT0_M_real_we0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_real_we0 <= grp_bitreverse_fu_2290_data_OUT0_M_real_we0;
        else 
            data_OUT0_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_we1_assign_proc : process(grp_bitreverse_fu_2290_data_OUT0_M_real_we1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data_OUT0_M_real_we1 <= grp_bitreverse_fu_2290_data_OUT0_M_real_we1;
        else 
            data_OUT0_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_address0, grp_FFT0_fu_2234_data_OUT_M_imag_address0, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT1_M_imag_address0 <= grp_FFT0_fu_2234_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT1_M_imag_address0 <= grp_FFT0_fu_2234_data_IN_M_imag_address0;
        else 
            data_OUT1_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_imag_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_ce0, grp_FFT0_fu_2234_data_OUT_M_imag_ce0, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT1_M_imag_ce0 <= grp_FFT0_fu_2234_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT1_M_imag_ce0 <= grp_FFT0_fu_2234_data_IN_M_imag_ce0;
        else 
            data_OUT1_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_imag_we0, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT1_M_imag_we0 <= grp_FFT0_fu_2234_data_OUT_M_imag_we0;
        else 
            data_OUT1_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_address0, grp_FFT0_fu_2234_data_OUT_M_real_address0, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT1_M_real_address0 <= grp_FFT0_fu_2234_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT1_M_real_address0 <= grp_FFT0_fu_2234_data_IN_M_real_address0;
        else 
            data_OUT1_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_real_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_ce0, grp_FFT0_fu_2234_data_OUT_M_real_ce0, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT1_M_real_ce0 <= grp_FFT0_fu_2234_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT1_M_real_ce0 <= grp_FFT0_fu_2234_data_IN_M_real_ce0;
        else 
            data_OUT1_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_real_we0, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data_OUT1_M_real_we0 <= grp_FFT0_fu_2234_data_OUT_M_real_we0;
        else 
            data_OUT1_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_address0, grp_FFT0_fu_2234_data_OUT_M_imag_address0, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT2_M_imag_address0 <= grp_FFT0_fu_2234_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT2_M_imag_address0 <= grp_FFT0_fu_2234_data_IN_M_imag_address0;
        else 
            data_OUT2_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_imag_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_ce0, grp_FFT0_fu_2234_data_OUT_M_imag_ce0, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT2_M_imag_ce0 <= grp_FFT0_fu_2234_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT2_M_imag_ce0 <= grp_FFT0_fu_2234_data_IN_M_imag_ce0;
        else 
            data_OUT2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_imag_we0, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT2_M_imag_we0 <= grp_FFT0_fu_2234_data_OUT_M_imag_we0;
        else 
            data_OUT2_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_address0, grp_FFT0_fu_2234_data_OUT_M_real_address0, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT2_M_real_address0 <= grp_FFT0_fu_2234_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT2_M_real_address0 <= grp_FFT0_fu_2234_data_IN_M_real_address0;
        else 
            data_OUT2_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_real_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_ce0, grp_FFT0_fu_2234_data_OUT_M_real_ce0, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT2_M_real_ce0 <= grp_FFT0_fu_2234_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT2_M_real_ce0 <= grp_FFT0_fu_2234_data_IN_M_real_ce0;
        else 
            data_OUT2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_real_we0, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            data_OUT2_M_real_we0 <= grp_FFT0_fu_2234_data_OUT_M_real_we0;
        else 
            data_OUT2_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_address0, grp_FFT0_fu_2234_data_OUT_M_imag_address0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT3_M_imag_address0 <= grp_FFT0_fu_2234_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT3_M_imag_address0 <= grp_FFT0_fu_2234_data_IN_M_imag_address0;
        else 
            data_OUT3_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_imag_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_imag_ce0, grp_FFT0_fu_2234_data_OUT_M_imag_ce0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT3_M_imag_ce0 <= grp_FFT0_fu_2234_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT3_M_imag_ce0 <= grp_FFT0_fu_2234_data_IN_M_imag_ce0;
        else 
            data_OUT3_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_imag_we0, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT3_M_imag_we0 <= grp_FFT0_fu_2234_data_OUT_M_imag_we0;
        else 
            data_OUT3_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_address0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_address0, grp_FFT0_fu_2234_data_OUT_M_real_address0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT3_M_real_address0 <= grp_FFT0_fu_2234_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT3_M_real_address0 <= grp_FFT0_fu_2234_data_IN_M_real_address0;
        else 
            data_OUT3_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_real_ce0_assign_proc : process(grp_FFT0_fu_2234_data_IN_M_real_ce0, grp_FFT0_fu_2234_data_OUT_M_real_ce0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT3_M_real_ce0 <= grp_FFT0_fu_2234_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT3_M_real_ce0 <= grp_FFT0_fu_2234_data_IN_M_real_ce0;
        else 
            data_OUT3_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_real_we0, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            data_OUT3_M_real_we0 <= grp_FFT0_fu_2234_data_OUT_M_real_we0;
        else 
            data_OUT3_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_address0_assign_proc : process(ap_CS_fsm_state47, grp_FFT0_fu_2234_data_IN_M_imag_address0, grp_FFT0_fu_2234_data_OUT_M_imag_address0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT4_M_imag_address0 <= grp_FFT0_fu_2234_data_OUT_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUT4_M_imag_address0 <= grp_FFT0_fu_2234_data_IN_M_imag_address0;
        else 
            data_OUT4_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_imag_ce0_assign_proc : process(ap_CS_fsm_state47, grp_FFT0_fu_2234_data_IN_M_imag_ce0, grp_FFT0_fu_2234_data_OUT_M_imag_ce0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT4_M_imag_ce0 <= grp_FFT0_fu_2234_data_OUT_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUT4_M_imag_ce0 <= grp_FFT0_fu_2234_data_IN_M_imag_ce0;
        else 
            data_OUT4_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_imag_we0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT4_M_imag_we0 <= grp_FFT0_fu_2234_data_OUT_M_imag_we0;
        else 
            data_OUT4_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_address0_assign_proc : process(ap_CS_fsm_state47, grp_FFT0_fu_2234_data_IN_M_real_address0, grp_FFT0_fu_2234_data_OUT_M_real_address0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT4_M_real_address0 <= grp_FFT0_fu_2234_data_OUT_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUT4_M_real_address0 <= grp_FFT0_fu_2234_data_IN_M_real_address0;
        else 
            data_OUT4_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_real_ce0_assign_proc : process(ap_CS_fsm_state47, grp_FFT0_fu_2234_data_IN_M_real_ce0, grp_FFT0_fu_2234_data_OUT_M_real_ce0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT4_M_real_ce0 <= grp_FFT0_fu_2234_data_OUT_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUT4_M_real_ce0 <= grp_FFT0_fu_2234_data_IN_M_real_ce0;
        else 
            data_OUT4_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_we0_assign_proc : process(grp_FFT0_fu_2234_data_OUT_M_real_we0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data_OUT4_M_real_we0 <= grp_FFT0_fu_2234_data_OUT_M_real_we0;
        else 
            data_OUT4_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_address0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            data_OUT_M_imag_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            data_OUT_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_imag_ce0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            data_OUT_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_we0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            data_OUT_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_address0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            data_OUT_M_real_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            data_OUT_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_real_ce0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            data_OUT_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_we0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            data_OUT_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUTfft_M_imag_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln102_fu_2326_p1, ap_CS_fsm_state47, grp_FFT0_fu_2234_data_OUT_M_imag_address0, ap_block_pp0_stage0, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            data_OUTfft_M_imag_address0 <= ap_const_lv5_0;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_OUTfft_M_imag_address0 <= zext_ln102_fu_2326_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_imag_address0 <= grp_FFT0_fu_2234_data_OUT_M_imag_address0;
        else 
            data_OUTfft_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUTfft_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state47, grp_FFT0_fu_2234_data_OUT_M_imag_ce0, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_OUTfft_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_imag_ce0 <= grp_FFT0_fu_2234_data_OUT_M_imag_ce0;
        else 
            data_OUTfft_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUTfft_M_imag_we0_assign_proc : process(ap_CS_fsm_state47, grp_FFT0_fu_2234_data_OUT_M_imag_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_imag_we0 <= grp_FFT0_fu_2234_data_OUT_M_imag_we0;
        else 
            data_OUTfft_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUTfft_M_real_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln102_fu_2326_p1, ap_CS_fsm_state47, grp_FFT0_fu_2234_data_OUT_M_real_address0, ap_block_pp0_stage0, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            data_OUTfft_M_real_address0 <= ap_const_lv5_0;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_OUTfft_M_real_address0 <= zext_ln102_fu_2326_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_real_address0 <= grp_FFT0_fu_2234_data_OUT_M_real_address0;
        else 
            data_OUTfft_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUTfft_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state47, grp_FFT0_fu_2234_data_OUT_M_real_ce0, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_OUTfft_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_real_ce0 <= grp_FFT0_fu_2234_data_OUT_M_real_ce0;
        else 
            data_OUTfft_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUTfft_M_real_we0_assign_proc : process(ap_CS_fsm_state47, grp_FFT0_fu_2234_data_OUT_M_real_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            data_OUTfft_M_real_we0 <= grp_FFT0_fu_2234_data_OUT_M_real_we0;
        else 
            data_OUTfft_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_FFT0_fu_2234_FFT_stage_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_FFT0_fu_2234_FFT_stage <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_FFT0_fu_2234_FFT_stage <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_FFT0_fu_2234_FFT_stage <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_FFT0_fu_2234_FFT_stage <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_FFT0_fu_2234_FFT_stage <= ap_const_lv6_1;
        else 
            grp_FFT0_fu_2234_FFT_stage <= "XXXXXX";
        end if; 
    end process;

    grp_FFT0_fu_2234_ap_start <= grp_FFT0_fu_2234_ap_start_reg;

    grp_FFT0_fu_2234_data_IN_M_imag_q0_assign_proc : process(data_OUT0_M_imag_q0, data_OUT1_M_imag_q0, data_OUT2_M_imag_q0, data_OUT3_M_imag_q0, data_OUT4_M_imag_q0, ap_CS_fsm_state47, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_FFT0_fu_2234_data_IN_M_imag_q0 <= data_OUT4_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_FFT0_fu_2234_data_IN_M_imag_q0 <= data_OUT3_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_FFT0_fu_2234_data_IN_M_imag_q0 <= data_OUT2_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_FFT0_fu_2234_data_IN_M_imag_q0 <= data_OUT1_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_FFT0_fu_2234_data_IN_M_imag_q0 <= data_OUT0_M_imag_q0;
        else 
            grp_FFT0_fu_2234_data_IN_M_imag_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_2234_data_IN_M_real_q0_assign_proc : process(data_OUT0_M_real_q0, data_OUT1_M_real_q0, data_OUT2_M_real_q0, data_OUT3_M_real_q0, data_OUT4_M_real_q0, ap_CS_fsm_state47, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_FFT0_fu_2234_data_IN_M_real_q0 <= data_OUT4_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_FFT0_fu_2234_data_IN_M_real_q0 <= data_OUT3_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_FFT0_fu_2234_data_IN_M_real_q0 <= data_OUT2_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_FFT0_fu_2234_data_IN_M_real_q0 <= data_OUT1_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_FFT0_fu_2234_data_IN_M_real_q0 <= data_OUT0_M_real_q0;
        else 
            grp_FFT0_fu_2234_data_IN_M_real_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_2234_index_shift_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_FFT0_fu_2234_index_shift <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_FFT0_fu_2234_index_shift <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_FFT0_fu_2234_index_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_FFT0_fu_2234_index_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_FFT0_fu_2234_index_shift <= ap_const_lv4_4;
        else 
            grp_FFT0_fu_2234_index_shift <= "XXXX";
        end if; 
    end process;


    grp_FFT0_fu_2234_pass_check_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_FFT0_fu_2234_pass_check <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_FFT0_fu_2234_pass_check <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_FFT0_fu_2234_pass_check <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_FFT0_fu_2234_pass_check <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_FFT0_fu_2234_pass_check <= ap_const_lv6_10;
        else 
            grp_FFT0_fu_2234_pass_check <= "XXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_2234_pass_shift_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_FFT0_fu_2234_pass_shift <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_FFT0_fu_2234_pass_shift <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_FFT0_fu_2234_pass_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_FFT0_fu_2234_pass_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_FFT0_fu_2234_pass_shift <= ap_const_lv4_1;
        else 
            grp_FFT0_fu_2234_pass_shift <= "XXXX";
        end if; 
    end process;

    grp_bitreverse_fu_2290_ap_start <= grp_bitreverse_fu_2290_ap_start_reg;
    grp_mult_window_fu_2214_ap_start <= grp_mult_window_fu_2214_ap_start_reg;
    i_fu_2320_p2 <= std_logic_vector(unsigned(i_0_i_reg_2203) + unsigned(ap_const_lv6_1));
    icmp_ln99_fu_2314_p2 <= "1" when (i_0_i_reg_2203 = ap_const_lv6_20) else "0";

    mag_OUT_address0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            mag_OUT_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            mag_OUT_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            mag_OUT_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            mag_OUT_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            mag_OUT_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            mag_OUT_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            mag_OUT_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mag_OUT_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            mag_OUT_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            mag_OUT_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            mag_OUT_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            mag_OUT_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            mag_OUT_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            mag_OUT_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            mag_OUT_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            mag_OUT_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            mag_OUT_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            mag_OUT_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            mag_OUT_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            mag_OUT_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            mag_OUT_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mag_OUT_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            mag_OUT_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mag_OUT_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            mag_OUT_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            mag_OUT_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            mag_OUT_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mag_OUT_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            mag_OUT_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            mag_OUT_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            mag_OUT_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            mag_OUT_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            mag_OUT_address0 <= "XXXXX";
        end if; 
    end process;


    mag_OUT_ce0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            mag_OUT_ce0 <= ap_const_logic_1;
        else 
            mag_OUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_OUT_we0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            mag_OUT_we0 <= ap_const_logic_1;
        else 
            mag_OUT_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_address0_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_imag_2_address0, grp_bitreverse_fu_2290_prod_IN_M_imag_address0, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_imag_address0 <= grp_bitreverse_fu_2290_prod_IN_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_imag_address0 <= grp_mult_window_fu_2214_prod_IN_M_imag_2_address0;
        else 
            prod_IN_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_imag_address1_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_imag_2_address1, grp_bitreverse_fu_2290_prod_IN_M_imag_address1, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_imag_address1 <= grp_bitreverse_fu_2290_prod_IN_M_imag_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_imag_address1 <= grp_mult_window_fu_2214_prod_IN_M_imag_2_address1;
        else 
            prod_IN_M_imag_address1 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_imag_ce0_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_imag_2_ce0, grp_bitreverse_fu_2290_prod_IN_M_imag_ce0, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_imag_ce0 <= grp_bitreverse_fu_2290_prod_IN_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_imag_ce0 <= grp_mult_window_fu_2214_prod_IN_M_imag_2_ce0;
        else 
            prod_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_ce1_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_imag_2_ce1, grp_bitreverse_fu_2290_prod_IN_M_imag_ce1, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_imag_ce1 <= grp_bitreverse_fu_2290_prod_IN_M_imag_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_imag_ce1 <= grp_mult_window_fu_2214_prod_IN_M_imag_2_ce1;
        else 
            prod_IN_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_we0_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_imag_2_we0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_imag_we0 <= grp_mult_window_fu_2214_prod_IN_M_imag_2_we0;
        else 
            prod_IN_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_we1_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_imag_2_we1, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_imag_we1 <= grp_mult_window_fu_2214_prod_IN_M_imag_2_we1;
        else 
            prod_IN_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_address0_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_real_2_address0, grp_bitreverse_fu_2290_prod_IN_M_real_address0, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_real_address0 <= grp_bitreverse_fu_2290_prod_IN_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_real_address0 <= grp_mult_window_fu_2214_prod_IN_M_real_2_address0;
        else 
            prod_IN_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_real_address1_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_real_2_address1, grp_bitreverse_fu_2290_prod_IN_M_real_address1, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_real_address1 <= grp_bitreverse_fu_2290_prod_IN_M_real_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_real_address1 <= grp_mult_window_fu_2214_prod_IN_M_real_2_address1;
        else 
            prod_IN_M_real_address1 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_real_ce0_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_real_2_ce0, grp_bitreverse_fu_2290_prod_IN_M_real_ce0, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_real_ce0 <= grp_bitreverse_fu_2290_prod_IN_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_real_ce0 <= grp_mult_window_fu_2214_prod_IN_M_real_2_ce0;
        else 
            prod_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_ce1_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_real_2_ce1, grp_bitreverse_fu_2290_prod_IN_M_real_ce1, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            prod_IN_M_real_ce1 <= grp_bitreverse_fu_2290_prod_IN_M_real_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_real_ce1 <= grp_mult_window_fu_2214_prod_IN_M_real_2_ce1;
        else 
            prod_IN_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_we0_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_real_2_we0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_real_we0 <= grp_mult_window_fu_2214_prod_IN_M_real_2_we0;
        else 
            prod_IN_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_we1_assign_proc : process(grp_mult_window_fu_2214_prod_IN_M_real_2_we1, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            prod_IN_M_real_we1 <= grp_mult_window_fu_2214_prod_IN_M_real_2_we1;
        else 
            prod_IN_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, grp_mult_window_fu_2214_data_IN_M_imag_address0, ap_CS_fsm_state35, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            xin_M_imag_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            xin_M_imag_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xin_M_imag_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            xin_M_imag_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            xin_M_imag_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            xin_M_imag_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            xin_M_imag_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            xin_M_imag_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            xin_M_imag_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            xin_M_imag_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            xin_M_imag_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            xin_M_imag_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            xin_M_imag_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            xin_M_imag_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xin_M_imag_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xin_M_imag_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xin_M_imag_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xin_M_imag_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xin_M_imag_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xin_M_imag_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xin_M_imag_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xin_M_imag_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xin_M_imag_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xin_M_imag_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            xin_M_imag_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xin_M_imag_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            xin_M_imag_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xin_M_imag_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xin_M_imag_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xin_M_imag_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_imag_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            xin_M_imag_address0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            xin_M_imag_address0 <= grp_mult_window_fu_2214_data_IN_M_imag_address0;
        else 
            xin_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, grp_mult_window_fu_2214_data_IN_M_imag_ce0, ap_CS_fsm_state35, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            xin_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            xin_M_imag_ce0 <= grp_mult_window_fu_2214_data_IN_M_imag_ce0;
        else 
            xin_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_imag_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            xin_M_imag_we0 <= ap_const_logic_1;
        else 
            xin_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, grp_mult_window_fu_2214_data_IN_M_real_address0, ap_CS_fsm_state35, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            xin_M_real_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            xin_M_real_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xin_M_real_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            xin_M_real_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            xin_M_real_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            xin_M_real_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            xin_M_real_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            xin_M_real_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            xin_M_real_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            xin_M_real_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            xin_M_real_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            xin_M_real_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            xin_M_real_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            xin_M_real_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            xin_M_real_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xin_M_real_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            xin_M_real_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xin_M_real_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xin_M_real_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xin_M_real_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            xin_M_real_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xin_M_real_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xin_M_real_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xin_M_real_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            xin_M_real_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xin_M_real_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            xin_M_real_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xin_M_real_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            xin_M_real_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xin_M_real_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            xin_M_real_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            xin_M_real_address0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            xin_M_real_address0 <= grp_mult_window_fu_2214_data_IN_M_real_address0;
        else 
            xin_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, grp_mult_window_fu_2214_data_IN_M_real_ce0, ap_CS_fsm_state35, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            xin_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            xin_M_real_ce0 <= grp_mult_window_fu_2214_data_IN_M_real_ce0;
        else 
            xin_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            xin_M_real_we0 <= ap_const_logic_1;
        else 
            xin_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_mag_address0_assign_proc : process(zext_ln102_reg_2666_pp0_iter10_reg, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            xout_mag_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            xout_mag_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            xout_mag_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            xout_mag_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            xout_mag_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            xout_mag_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            xout_mag_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            xout_mag_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            xout_mag_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            xout_mag_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            xout_mag_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            xout_mag_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            xout_mag_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            xout_mag_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            xout_mag_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            xout_mag_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            xout_mag_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            xout_mag_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            xout_mag_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            xout_mag_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            xout_mag_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            xout_mag_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            xout_mag_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            xout_mag_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            xout_mag_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            xout_mag_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            xout_mag_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            xout_mag_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            xout_mag_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            xout_mag_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            xout_mag_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            xout_mag_address0 <= ap_const_lv5_0;
        elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            xout_mag_address0 <= zext_ln102_reg_2666_pp0_iter10_reg(5 - 1 downto 0);
        else 
            xout_mag_address0 <= "XXXXX";
        end if; 
    end process;


    xout_mag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter11, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            xout_mag_ce0 <= ap_const_logic_1;
        else 
            xout_mag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_mag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln99_reg_2657_pp0_iter10_reg, ap_enable_reg_pp0_iter11)
    begin
        if (((icmp_ln99_reg_2657_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            xout_mag_we0 <= ap_const_logic_1;
        else 
            xout_mag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln102_fu_2326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_2203),64));
end behav;
