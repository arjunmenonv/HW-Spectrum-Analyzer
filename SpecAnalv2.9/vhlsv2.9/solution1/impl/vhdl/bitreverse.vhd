-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bitreverse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prod_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_real_ce0 : OUT STD_LOGIC;
    prod_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_real_ce1 : OUT STD_LOGIC;
    prod_IN_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT0_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT0_M_real_ce0 : OUT STD_LOGIC;
    data_OUT0_M_real_we0 : OUT STD_LOGIC;
    data_OUT0_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT0_M_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT0_M_real_ce1 : OUT STD_LOGIC;
    data_OUT0_M_real_we1 : OUT STD_LOGIC;
    data_OUT0_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_imag_ce0 : OUT STD_LOGIC;
    prod_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prod_IN_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_IN_M_imag_ce1 : OUT STD_LOGIC;
    prod_IN_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT0_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT0_M_imag_ce0 : OUT STD_LOGIC;
    data_OUT0_M_imag_we0 : OUT STD_LOGIC;
    data_OUT0_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT0_M_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT0_M_imag_ce1 : OUT STD_LOGIC;
    data_OUT0_M_imag_we1 : OUT STD_LOGIC;
    data_OUT0_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bitreverse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_OUT0_M_imag_address0 <= ap_const_lv5_0;
        else 
            data_OUT0_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_imag_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_OUT0_M_imag_address1 <= ap_const_lv5_1;
        else 
            data_OUT0_M_imag_address1 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_imag_ce1 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT0_M_imag_d0 <= prod_IN_M_imag_q0;
    data_OUT0_M_imag_d1 <= prod_IN_M_imag_q1;

    data_OUT0_M_imag_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_imag_we1 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_OUT0_M_real_address0 <= ap_const_lv5_0;
        else 
            data_OUT0_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_real_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_OUT0_M_real_address1 <= ap_const_lv5_1;
        else 
            data_OUT0_M_real_address1 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_real_ce1 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT0_M_real_d0 <= prod_IN_M_real_q0;
    data_OUT0_M_real_d1 <= prod_IN_M_real_q1;

    data_OUT0_M_real_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_OUT0_M_real_we1 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            prod_IN_M_imag_address0 <= ap_const_lv5_0;
        else 
            prod_IN_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_imag_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            prod_IN_M_imag_address1 <= ap_const_lv5_10;
        else 
            prod_IN_M_imag_address1 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_imag_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            prod_IN_M_imag_ce0 <= ap_const_logic_1;
        else 
            prod_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_imag_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            prod_IN_M_imag_ce1 <= ap_const_logic_1;
        else 
            prod_IN_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            prod_IN_M_real_address0 <= ap_const_lv5_0;
        else 
            prod_IN_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_real_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            prod_IN_M_real_address1 <= ap_const_lv5_10;
        else 
            prod_IN_M_real_address1 <= "XXXXX";
        end if; 
    end process;


    prod_IN_M_real_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            prod_IN_M_real_ce0 <= ap_const_logic_1;
        else 
            prod_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_IN_M_real_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            prod_IN_M_real_ce1 <= ap_const_logic_1;
        else 
            prod_IN_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
