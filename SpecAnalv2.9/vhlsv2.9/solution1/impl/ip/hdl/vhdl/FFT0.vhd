-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
    pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
    index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
    pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
    data_IN_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_real_ce0 : OUT STD_LOGIC;
    data_IN_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_IN_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_imag_ce0 : OUT STD_LOGIC;
    data_IN_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_M_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_real_ce0 : OUT STD_LOGIC;
    data_OUT_M_real_we0 : OUT STD_LOGIC;
    data_OUT_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_M_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_imag_ce0 : OUT STD_LOGIC;
    data_OUT_M_imag_we0 : OUT STD_LOGIC;
    data_OUT_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_real_ce0 : STD_LOGIC;
    signal W_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_imag_ce0 : STD_LOGIC;
    signal W_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_0_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_0_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_214 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln77_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln77_reg_408_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pass_shift_cast_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pass_shift_cast_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_shift_cast_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_shift_cast_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_cast1_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_cast1_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln87_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln87_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln77_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_408_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_412 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal Ulimit_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Ulimit_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln85_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln82_1_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_1_reg_444_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln85_fu_364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln85_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_fu_371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_real_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_t_imag_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln83_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_reg_512_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_reg_512_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_reg_512_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_reg_512_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Product_M_real_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal p_r_M_real_2_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_2_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal Product_M_imag_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_2_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_2_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_phi_mux_butterfly_span_0_phi_fu_194_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_butterfly_pass_0_phi_fu_206_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_218_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln82_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln85_fu_263_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln85_fu_267_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln87_fu_277_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln87_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln80_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Llimit_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_1_fu_357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_443 : BOOLEAN;
    signal ap_condition_449 : BOOLEAN;

    component FFT_faddfsub_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fsub_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0_W_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT0_W_M_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_M_real_U : component FFT0_W_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_real_address0,
        ce0 => W_M_real_ce0,
        q0 => W_M_real_q0);

    W_M_imag_U : component FFT0_W_M_imag
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_imag_address0,
        ce0 => W_M_imag_ce0,
        q0 => W_M_imag_q0);

    FFT_faddfsub_32nsfYi_U29 : component FFT_faddfsub_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_225_p0,
        din1 => grp_fu_225_p1,
        opcode => grp_fu_225_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    FFT_fsub_32ns_32ncud_U30 : component FFT_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_229_p0,
        din1 => grp_fu_229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    FFT_fadd_32ns_32ndEe_U31 : component FFT_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_233_p0,
        din1 => grp_fu_233_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    FFT_fmul_32ns_32neOg_U32 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        din1 => p_t_real_reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    FFT_fmul_32ns_32neOg_U33 : component FFT_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_241_p0,
        din1 => p_t_imag_reg_487,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    butterfly_pass_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                butterfly_pass_0_reg_202 <= butterfly_pass_2_reg_465;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                butterfly_pass_0_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    butterfly_span_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                butterfly_span_0_reg_190 <= select_ln85_reg_460;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                butterfly_span_0_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_214 <= i_reg_412;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_214 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    FFT_stage_cast1_reg_393(5 downto 0) <= FFT_stage_cast1_fu_259_p1(5 downto 0);
                    index_shift_cast_reg_388(3 downto 0) <= index_shift_cast_fu_255_p1(3 downto 0);
                    pass_shift_cast_reg_383(3 downto 0) <= pass_shift_cast_fu_251_p1(3 downto 0);
                    zext_ln85_reg_398(4 downto 0) <= zext_ln85_fu_273_p1(4 downto 0);
                    zext_ln87_reg_403(4 downto 0) <= zext_ln87_fu_287_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln77_reg_408_pp0_iter5_reg = ap_const_lv1_0))) then
                Product_M_imag_reg_546 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_408_pp0_iter5_reg = ap_const_lv1_0))) then
                Product_M_real_reg_528 <= grp_fu_225_p2;
                p_r_M_imag_2_reg_540 <= data_IN_M_imag_q0;
                p_r_M_real_2_reg_534 <= data_IN_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln77_fu_291_p2 = ap_const_lv1_0))) then
                Ulimit_reg_417 <= Ulimit_fu_308_p2;
                icmp_ln85_reg_423 <= icmp_ln85_fu_314_p2;
                icmp_ln87_reg_429 <= icmp_ln87_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Ulimit_reg_417_pp0_iter1_reg <= Ulimit_reg_417;
                Ulimit_reg_417_pp0_iter2_reg <= Ulimit_reg_417_pp0_iter1_reg;
                Ulimit_reg_417_pp0_iter3_reg <= Ulimit_reg_417_pp0_iter2_reg;
                Ulimit_reg_417_pp0_iter4_reg <= Ulimit_reg_417_pp0_iter3_reg;
                icmp_ln77_reg_408 <= icmp_ln77_fu_291_p2;
                icmp_ln77_reg_408_pp0_iter1_reg <= icmp_ln77_reg_408;
                icmp_ln77_reg_408_pp0_iter2_reg <= icmp_ln77_reg_408_pp0_iter1_reg;
                icmp_ln77_reg_408_pp0_iter3_reg <= icmp_ln77_reg_408_pp0_iter2_reg;
                icmp_ln77_reg_408_pp0_iter4_reg <= icmp_ln77_reg_408_pp0_iter3_reg;
                icmp_ln77_reg_408_pp0_iter5_reg <= icmp_ln77_reg_408_pp0_iter4_reg;
                icmp_ln77_reg_408_pp0_iter6_reg <= icmp_ln77_reg_408_pp0_iter5_reg;
                icmp_ln77_reg_408_pp0_iter7_reg <= icmp_ln77_reg_408_pp0_iter6_reg;
                icmp_ln77_reg_408_pp0_iter8_reg <= icmp_ln77_reg_408_pp0_iter7_reg;
                icmp_ln77_reg_408_pp0_iter9_reg <= icmp_ln77_reg_408_pp0_iter8_reg;
                sext_ln83_reg_512_pp0_iter6_reg <= sext_ln83_reg_512;
                sext_ln83_reg_512_pp0_iter7_reg <= sext_ln83_reg_512_pp0_iter6_reg;
                sext_ln83_reg_512_pp0_iter8_reg <= sext_ln83_reg_512_pp0_iter7_reg;
                sext_ln83_reg_512_pp0_iter9_reg <= sext_ln83_reg_512_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                butterfly_pass_2_reg_465 <= butterfly_pass_2_fu_371_p3;
                select_ln85_reg_460 <= select_ln85_fu_364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_408_pp0_iter8_reg = ap_const_lv1_0))) then
                complex_M_imag_writ_2_reg_557 <= grp_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln77_reg_408_pp0_iter7_reg = ap_const_lv1_0))) then
                complex_M_real_writ_2_reg_552 <= grp_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_412 <= i_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_imag_reg_476 <= W_M_imag_q0;
                p_r_M_real_reg_470 <= W_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                p_t_imag_reg_487 <= data_IN_M_imag_q0;
                p_t_real_reg_482 <= data_IN_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_408_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln77_reg_408_pp0_iter7_reg = ap_const_lv1_0)))) then
                reg_245 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sext_ln82_1_reg_444 <= sext_ln82_1_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sext_ln82_1_reg_444_pp0_iter1_reg <= sext_ln82_1_reg_444;
                sext_ln82_1_reg_444_pp0_iter2_reg <= sext_ln82_1_reg_444_pp0_iter1_reg;
                sext_ln82_1_reg_444_pp0_iter3_reg <= sext_ln82_1_reg_444_pp0_iter2_reg;
                sext_ln82_1_reg_444_pp0_iter4_reg <= sext_ln82_1_reg_444_pp0_iter3_reg;
                sext_ln82_1_reg_444_pp0_iter5_reg <= sext_ln82_1_reg_444_pp0_iter4_reg;
                sext_ln82_1_reg_444_pp0_iter6_reg <= sext_ln82_1_reg_444_pp0_iter5_reg;
                sext_ln82_1_reg_444_pp0_iter7_reg <= sext_ln82_1_reg_444_pp0_iter6_reg;
                sext_ln82_1_reg_444_pp0_iter8_reg <= sext_ln82_1_reg_444_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln77_reg_408_pp0_iter4_reg = ap_const_lv1_0))) then
                sext_ln83_reg_512 <= sext_ln83_fu_378_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln77_reg_408_pp0_iter2_reg = ap_const_lv1_0))) then
                tmp_3_i_i_reg_497 <= grp_fu_241_p2;
                tmp_i_i_reg_492 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_408_pp0_iter3_reg = ap_const_lv1_0))) then
                tmp_5_i_i_reg_502 <= grp_fu_237_p2;
                tmp_6_i_i_reg_507 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    pass_shift_cast_reg_383(31 downto 4) <= "0000000000000000000000000000";
    index_shift_cast_reg_388(31 downto 4) <= "0000000000000000000000000000";
    FFT_stage_cast1_reg_393(31 downto 6) <= "00000000000000000000000000";
    zext_ln85_reg_398(31 downto 5) <= "000000000000000000000000000";
    zext_ln87_reg_403(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, icmp_ln77_fu_291_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln77_fu_291_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln77_fu_291_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    FFT_stage_cast1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FFT_stage),32));
    Llimit_fu_329_p2 <= std_logic_vector(signed(Ulimit_reg_417) + signed(FFT_stage_cast1_reg_393));
    Ulimit_fu_308_p2 <= std_logic_vector(unsigned(ap_phi_mux_butterfly_span_0_phi_fu_194_p4) + unsigned(shl_ln80_fu_303_p2));
    W_M_imag_address0 <= sext_ln82_fu_333_p1(4 - 1 downto 0);

    W_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            W_M_imag_ce0 <= ap_const_logic_1;
        else 
            W_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_M_real_address0 <= sext_ln82_fu_333_p1(4 - 1 downto 0);

    W_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            W_M_real_ce0 <= ap_const_logic_1;
        else 
            W_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln85_fu_267_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln85_fu_263_p1));
    add_ln87_fu_281_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln87_fu_277_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_443_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_00001)
    begin
                ap_condition_443 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_449_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_00001)
    begin
                ap_condition_449 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln77_fu_291_p2)
    begin
        if ((icmp_ln77_fu_291_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_butterfly_pass_0_phi_fu_206_p4_assign_proc : process(butterfly_pass_0_reg_202, ap_CS_fsm_pp0_stage0, icmp_ln77_reg_408, butterfly_pass_2_reg_465, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_butterfly_pass_0_phi_fu_206_p4 <= butterfly_pass_2_reg_465;
        else 
            ap_phi_mux_butterfly_pass_0_phi_fu_206_p4 <= butterfly_pass_0_reg_202;
        end if; 
    end process;


    ap_phi_mux_butterfly_span_0_phi_fu_194_p4_assign_proc : process(butterfly_span_0_reg_190, ap_CS_fsm_pp0_stage0, icmp_ln77_reg_408, select_ln85_reg_460, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_butterfly_span_0_phi_fu_194_p4 <= select_ln85_reg_460;
        else 
            ap_phi_mux_butterfly_span_0_phi_fu_194_p4 <= butterfly_span_0_reg_190;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_218_p4_assign_proc : process(i_0_reg_214, ap_CS_fsm_pp0_stage0, icmp_ln77_reg_408, i_reg_412, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln77_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_218_p4 <= i_reg_412;
        else 
            ap_phi_mux_i_0_phi_fu_218_p4 <= i_0_reg_214;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    butterfly_pass_1_fu_357_p3 <= 
        butterfly_pass_fu_351_p2 when (icmp_ln87_reg_429(0) = '1') else 
        ap_const_lv32_0;
    butterfly_pass_2_fu_371_p3 <= 
        butterfly_pass_0_reg_202 when (icmp_ln85_reg_423(0) = '1') else 
        butterfly_pass_1_fu_357_p3;
    butterfly_pass_fu_351_p2 <= std_logic_vector(unsigned(butterfly_pass_0_reg_202) + unsigned(ap_const_lv32_1));
    butterfly_span_fu_345_p2 <= std_logic_vector(unsigned(butterfly_span_0_reg_190) + unsigned(ap_const_lv32_1));

    data_IN_M_imag_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, sext_ln82_1_fu_339_p1, sext_ln83_fu_378_p1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            data_IN_M_imag_address0 <= sext_ln83_fu_378_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_IN_M_imag_address0 <= sext_ln82_1_fu_339_p1(5 - 1 downto 0);
        else 
            data_IN_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            data_IN_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_M_real_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, sext_ln82_1_fu_339_p1, sext_ln83_fu_378_p1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            data_IN_M_real_address0 <= sext_ln83_fu_378_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_IN_M_real_address0 <= sext_ln82_1_fu_339_p1(5 - 1 downto 0);
        else 
            data_IN_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_IN_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            data_IN_M_real_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, sext_ln82_1_reg_444_pp0_iter8_reg, sext_ln83_reg_512_pp0_iter9_reg, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                data_OUT_M_imag_address0 <= sext_ln83_reg_512_pp0_iter9_reg(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_OUT_M_imag_address0 <= sext_ln82_1_reg_444_pp0_iter8_reg(5 - 1 downto 0);
            else 
                data_OUT_M_imag_address0 <= "XXXXX";
            end if;
        else 
            data_OUT_M_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            data_OUT_M_imag_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_d0_assign_proc : process(reg_245, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, complex_M_imag_writ_2_reg_557, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                data_OUT_M_imag_d0 <= complex_M_imag_writ_2_reg_557;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_OUT_M_imag_d0 <= reg_245;
            else 
                data_OUT_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_OUT_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_imag_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln77_reg_408_pp0_iter8_reg, icmp_ln77_reg_408_pp0_iter9_reg, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln77_reg_408_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_408_pp0_iter9_reg = ap_const_lv1_0)))) then 
            data_OUT_M_imag_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, sext_ln82_1_reg_444_pp0_iter7_reg, sext_ln83_reg_512_pp0_iter8_reg, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            data_OUT_M_real_address0 <= sext_ln83_reg_512_pp0_iter8_reg(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_OUT_M_real_address0 <= sext_ln82_1_reg_444_pp0_iter7_reg(5 - 1 downto 0);
        else 
            data_OUT_M_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)))) then 
            data_OUT_M_real_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_d0_assign_proc : process(reg_245, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, complex_M_real_writ_2_reg_552, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            data_OUT_M_real_d0 <= complex_M_real_writ_2_reg_552;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_OUT_M_real_d0 <= reg_245;
        else 
            data_OUT_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_real_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln77_reg_408_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_408_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln77_reg_408_pp0_iter8_reg = ap_const_lv1_0)))) then 
            data_OUT_M_real_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_225_opcode_assign_proc : process(icmp_ln77_reg_408_pp0_iter3_reg, ap_condition_443, ap_condition_449)
    begin
        if ((icmp_ln77_reg_408_pp0_iter3_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_449)) then 
                grp_fu_225_opcode <= ap_const_lv2_1;
            elsif ((ap_const_boolean_1 = ap_condition_443)) then 
                grp_fu_225_opcode <= ap_const_lv2_0;
            else 
                grp_fu_225_opcode <= "XX";
            end if;
        else 
            grp_fu_225_opcode <= "XX";
        end if; 
    end process;


    grp_fu_225_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_i_i_reg_492, ap_enable_reg_pp0_iter3, tmp_5_i_i_reg_502, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_225_p0 <= tmp_5_i_i_reg_502;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_225_p0 <= tmp_i_i_reg_492;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, tmp_3_i_i_reg_497, tmp_6_i_i_reg_507, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_225_p1 <= tmp_6_i_i_reg_507;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_225_p1 <= tmp_3_i_i_reg_497;
        else 
            grp_fu_225_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, p_r_M_real_2_reg_534, p_r_M_imag_2_reg_540, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_229_p0 <= p_r_M_imag_2_reg_540;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_229_p0 <= p_r_M_real_2_reg_534;
            else 
                grp_fu_229_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_229_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, Product_M_real_reg_528, Product_M_imag_reg_546, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_229_p1 <= Product_M_imag_reg_546;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_229_p1 <= Product_M_real_reg_528;
            else 
                grp_fu_229_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_229_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, p_r_M_real_2_reg_534, p_r_M_imag_2_reg_540, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_233_p0 <= p_r_M_imag_2_reg_540;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_233_p0 <= p_r_M_real_2_reg_534;
            else 
                grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, Product_M_real_reg_528, Product_M_imag_reg_546, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_233_p1 <= Product_M_imag_reg_546;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_233_p1 <= Product_M_real_reg_528;
            else 
                grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_237_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, p_r_M_real_reg_470, p_r_M_imag_reg_476, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_237_p0 <= p_r_M_imag_reg_476;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_237_p0 <= p_r_M_real_reg_470;
        else 
            grp_fu_237_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_241_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, p_r_M_real_reg_470, p_r_M_imag_reg_476, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_241_p0 <= p_r_M_real_reg_470;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_241_p0 <= p_r_M_imag_reg_476;
        else 
            grp_fu_241_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_297_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_218_p4) + unsigned(ap_const_lv5_1));
    icmp_ln77_fu_291_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_218_p4 = ap_const_lv5_10) else "0";
    icmp_ln85_fu_314_p2 <= "1" when (signed(ap_phi_mux_butterfly_span_0_phi_fu_194_p4) < signed(zext_ln85_reg_398)) else "0";
    icmp_ln87_fu_319_p2 <= "1" when (signed(ap_phi_mux_butterfly_pass_0_phi_fu_206_p4) < signed(zext_ln87_reg_403)) else "0";
    index_fu_324_p2 <= std_logic_vector(shift_left(unsigned(butterfly_span_0_reg_190),to_integer(unsigned('0' & index_shift_cast_reg_388(31-1 downto 0)))));
    index_shift_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_shift),32));
    pass_shift_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pass_shift),32));
    select_ln85_fu_364_p3 <= 
        butterfly_span_fu_345_p2 when (icmp_ln85_reg_423(0) = '1') else 
        ap_const_lv32_0;
        sext_ln82_1_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Llimit_fu_329_p2),64));

        sext_ln82_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_fu_324_p2),64));

        sext_ln83_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ulimit_reg_417_pp0_iter4_reg),64));

    shl_ln80_fu_303_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_butterfly_pass_0_phi_fu_206_p4),to_integer(unsigned('0' & pass_shift_cast_reg_383(31-1 downto 0)))));
    trunc_ln85_fu_263_p1 <= FFT_stage(5 - 1 downto 0);
    trunc_ln87_fu_277_p1 <= pass_check(5 - 1 downto 0);
    zext_ln85_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_fu_267_p2),32));
    zext_ln87_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln87_fu_281_p2),32));
end behav;
