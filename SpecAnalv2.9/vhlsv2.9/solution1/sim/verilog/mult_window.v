// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mult_window (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_IN_M_real_address0,
        data_IN_M_real_ce0,
        data_IN_M_real_q0,
        data_IN_M_real_address1,
        data_IN_M_real_ce1,
        data_IN_M_real_q1,
        data_IN_M_imag_address0,
        data_IN_M_imag_ce0,
        data_IN_M_imag_q0,
        data_IN_M_imag_address1,
        data_IN_M_imag_ce1,
        data_IN_M_imag_q1,
        win_mode,
        prod_IN_M_real_2_address0,
        prod_IN_M_real_2_ce0,
        prod_IN_M_real_2_we0,
        prod_IN_M_real_2_d0,
        prod_IN_M_real_2_address1,
        prod_IN_M_real_2_ce1,
        prod_IN_M_real_2_we1,
        prod_IN_M_real_2_d1,
        prod_IN_M_imag_2_address0,
        prod_IN_M_imag_2_ce0,
        prod_IN_M_imag_2_we0,
        prod_IN_M_imag_2_d0,
        prod_IN_M_imag_2_address1,
        prod_IN_M_imag_2_ce1,
        prod_IN_M_imag_2_we1,
        prod_IN_M_imag_2_d1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_state4 = 8'd4;
parameter    ap_ST_fsm_pp1_stage0 = 8'd8;
parameter    ap_ST_fsm_pp2_stage0 = 8'd16;
parameter    ap_ST_fsm_state9 = 8'd32;
parameter    ap_ST_fsm_pp3_stage0 = 8'd64;
parameter    ap_ST_fsm_state22 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] data_IN_M_real_address0;
output   data_IN_M_real_ce0;
input  [31:0] data_IN_M_real_q0;
output  [4:0] data_IN_M_real_address1;
output   data_IN_M_real_ce1;
input  [31:0] data_IN_M_real_q1;
output  [4:0] data_IN_M_imag_address0;
output   data_IN_M_imag_ce0;
input  [31:0] data_IN_M_imag_q0;
output  [4:0] data_IN_M_imag_address1;
output   data_IN_M_imag_ce1;
input  [31:0] data_IN_M_imag_q1;
input  [7:0] win_mode;
output  [4:0] prod_IN_M_real_2_address0;
output   prod_IN_M_real_2_ce0;
output   prod_IN_M_real_2_we0;
output  [31:0] prod_IN_M_real_2_d0;
output  [4:0] prod_IN_M_real_2_address1;
output   prod_IN_M_real_2_ce1;
output   prod_IN_M_real_2_we1;
output  [31:0] prod_IN_M_real_2_d1;
output  [4:0] prod_IN_M_imag_2_address0;
output   prod_IN_M_imag_2_ce0;
output   prod_IN_M_imag_2_we0;
output  [31:0] prod_IN_M_imag_2_d0;
output  [4:0] prod_IN_M_imag_2_address1;
output   prod_IN_M_imag_2_ce1;
output   prod_IN_M_imag_2_we1;
output  [31:0] prod_IN_M_imag_2_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_IN_M_real_ce0;
reg data_IN_M_real_ce1;
reg data_IN_M_imag_ce0;
reg data_IN_M_imag_ce1;
reg prod_IN_M_real_2_ce0;
reg prod_IN_M_real_2_we0;
reg prod_IN_M_real_2_ce1;
reg prod_IN_M_real_2_we1;
reg prod_IN_M_imag_2_ce0;
reg prod_IN_M_imag_2_we0;
reg prod_IN_M_imag_2_ce1;
reg prod_IN_M_imag_2_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] Blackman32_address0;
reg    Blackman32_ce0;
wire   [31:0] Blackman32_q0;
wire   [4:0] Blackman32_address1;
reg    Blackman32_ce1;
wire   [31:0] Blackman32_q1;
wire   [4:0] Hamm32_address0;
reg    Hamm32_ce0;
wire   [31:0] Hamm32_q0;
wire   [4:0] Hamm32_address1;
reg    Hamm32_ce1;
wire   [31:0] Hamm32_q1;
wire   [4:0] Hann32_address0;
reg    Hann32_ce0;
wire   [31:0] Hann32_q0;
wire   [4:0] Hann32_address1;
reg    Hann32_ce1;
wire   [31:0] Hann32_q1;
reg   [5:0] i2_0_0_reg_338;
reg   [5:0] i1_0_0_reg_349;
reg   [5:0] i_0_0_reg_360;
reg   [5:0] i4_0_0_reg_382;
wire   [7:0] win_mode_read_read_fu_70_p2;
wire   [0:0] icmp_ln46_fu_445_p2;
reg   [0:0] icmp_ln46_reg_613;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln50_fu_455_p1;
reg   [63:0] zext_ln50_reg_617;
wire   [63:0] zext_ln50_1_fu_466_p1;
reg   [63:0] zext_ln50_1_reg_627;
wire   [5:0] add_ln46_fu_471_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln38_fu_477_p2;
reg   [0:0] icmp_ln38_reg_642;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [63:0] zext_ln42_fu_487_p1;
reg   [63:0] zext_ln42_reg_646;
wire   [63:0] zext_ln42_1_fu_498_p1;
reg   [63:0] zext_ln42_1_reg_656;
wire   [5:0] add_ln38_fu_503_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln30_fu_509_p2;
reg   [0:0] icmp_ln30_reg_671;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state8_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [63:0] zext_ln34_fu_519_p1;
reg   [63:0] zext_ln34_reg_675;
wire   [63:0] zext_ln34_1_fu_530_p1;
reg   [63:0] zext_ln34_1_reg_685;
wire   [5:0] add_ln30_fu_535_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] add_ln53_fu_567_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln53_fu_541_p2;
wire   [0:0] icmp_ln59_fu_573_p2;
reg   [0:0] icmp_ln59_reg_708;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state10_pp3_stage0_iter0;
wire    ap_block_state11_pp3_stage0_iter1;
wire    ap_block_state12_pp3_stage0_iter2;
wire    ap_block_state13_pp3_stage0_iter3;
wire    ap_block_state14_pp3_stage0_iter4;
wire    ap_block_state15_pp3_stage0_iter5;
wire    ap_block_state16_pp3_stage0_iter6;
wire    ap_block_state17_pp3_stage0_iter7;
wire    ap_block_state18_pp3_stage0_iter8;
wire    ap_block_state19_pp3_stage0_iter9;
wire    ap_block_state20_pp3_stage0_iter10;
wire    ap_block_state21_pp3_stage0_iter11;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln59_reg_708_pp3_iter1_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter2_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter3_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter4_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter5_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter6_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter7_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter8_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter9_reg;
reg   [0:0] icmp_ln59_reg_708_pp3_iter10_reg;
wire   [63:0] zext_ln62_fu_583_p1;
reg   [63:0] zext_ln62_reg_712;
reg   [63:0] zext_ln62_reg_712_pp3_iter1_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter2_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter3_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter4_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter5_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter6_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter7_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter8_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter9_reg;
reg   [63:0] zext_ln62_reg_712_pp3_iter10_reg;
wire   [63:0] zext_ln62_1_fu_596_p1;
reg   [63:0] zext_ln62_1_reg_733;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter1_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter2_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter3_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter4_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter5_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter6_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter7_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter8_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter9_reg;
reg   [63:0] zext_ln62_1_reg_733_pp3_iter10_reg;
wire   [5:0] add_ln59_fu_603_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] p_r_M_real_reg_759;
reg    ap_enable_reg_pp3_iter1;
reg   [31:0] p_r_M_imag_reg_765;
wire   [31:0] window_q0;
reg   [31:0] window_load_reg_771;
reg   [31:0] p_r_M_real_1_reg_777;
reg   [31:0] p_r_M_imag_1_reg_783;
wire   [31:0] window_q1;
reg   [31:0] window_load_1_reg_789;
wire   [31:0] grp_fu_409_p2;
reg   [31:0] tmp_i_i_reg_795;
wire   [31:0] grp_fu_413_p2;
reg   [31:0] tmp_8_i_i_reg_800;
wire   [31:0] grp_fu_418_p2;
reg   [31:0] tmp_i_i_15_reg_805;
wire   [31:0] grp_fu_422_p2;
reg   [31:0] tmp_1_i_i_reg_810;
wire   [31:0] grp_fu_427_p2;
reg   [31:0] tmp_i_i1_reg_815;
wire   [31:0] grp_fu_431_p2;
reg   [31:0] tmp_8_i_i1_reg_820;
wire   [31:0] grp_fu_436_p2;
reg   [31:0] tmp_i_i1_17_reg_825;
wire   [31:0] grp_fu_440_p2;
reg   [31:0] tmp_1_i_i1_reg_830;
wire   [31:0] grp_fu_393_p2;
reg   [31:0] complex_M_real_writ_reg_835;
wire   [31:0] grp_fu_397_p2;
reg   [31:0] complex_M_imag_writ_reg_840;
wire   [31:0] grp_fu_401_p2;
reg   [31:0] complex_M_real_writ_1_reg_845;
wire   [31:0] grp_fu_405_p2;
reg   [31:0] complex_M_imag_writ_1_reg_850;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state10;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg   [4:0] window_address0;
reg    window_ce0;
reg    window_we0;
reg   [31:0] window_d0;
reg   [4:0] window_address1;
reg    window_ce1;
reg    window_we1;
reg   [31:0] window_d1;
reg   [5:0] i3_0_0_reg_371;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln55_fu_547_p1;
wire   [63:0] zext_ln55_1_fu_562_p1;
wire    ap_block_pp3_stage0;
wire   [4:0] empty_5_fu_451_p1;
wire   [4:0] or_ln46_fu_460_p2;
wire   [4:0] empty_8_fu_483_p1;
wire   [4:0] or_ln38_fu_492_p2;
wire   [4:0] empty_11_fu_515_p1;
wire   [4:0] or_ln30_fu_524_p2;
wire   [4:0] empty_3_fu_552_p1;
wire   [4:0] or_ln53_fu_556_p2;
wire   [4:0] empty_14_fu_579_p1;
wire   [4:0] or_ln59_fu_590_p2;
wire    ap_CS_fsm_state22;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
end

mult_window_Blackbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
Blackman32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Blackman32_address0),
    .ce0(Blackman32_ce0),
    .q0(Blackman32_q0),
    .address1(Blackman32_address1),
    .ce1(Blackman32_ce1),
    .q1(Blackman32_q1)
);

mult_window_Hamm32 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
Hamm32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Hamm32_address0),
    .ce0(Hamm32_ce0),
    .q0(Hamm32_q0),
    .address1(Hamm32_address1),
    .ce1(Hamm32_ce1),
    .q1(Hamm32_q1)
);

mult_window_Hann32 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
Hann32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Hann32_address0),
    .ce0(Hann32_ce0),
    .q0(Hann32_q0),
    .address1(Hann32_address1),
    .ce1(Hann32_ce1),
    .q1(Hann32_q1)
);

mult_window_window #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
window_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_address0),
    .ce0(window_ce0),
    .we0(window_we0),
    .d0(window_d0),
    .q0(window_q0),
    .address1(window_address1),
    .ce1(window_ce1),
    .we1(window_we1),
    .d1(window_d1),
    .q1(window_q1)
);

FFT_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_reg_795),
    .din1(tmp_8_i_i_reg_800),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

FFT_fadd_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_15_reg_805),
    .din1(tmp_1_i_i_reg_810),
    .ce(1'b1),
    .dout(grp_fu_397_p2)
);

FFT_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i1_reg_815),
    .din1(tmp_8_i_i1_reg_820),
    .ce(1'b1),
    .dout(grp_fu_401_p2)
);

FFT_fadd_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i1_17_reg_825),
    .din1(tmp_1_i_i1_reg_830),
    .ce(1'b1),
    .dout(grp_fu_405_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_759),
    .din1(window_load_reg_771),
    .ce(1'b1),
    .dout(grp_fu_409_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_765),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_413_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_reg_765),
    .din1(window_load_reg_771),
    .ce(1'b1),
    .dout(grp_fu_418_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_reg_759),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_422_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_1_reg_777),
    .din1(window_load_1_reg_789),
    .ce(1'b1),
    .dout(grp_fu_427_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_1_reg_783),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_431_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_imag_1_reg_783),
    .din1(window_load_1_reg_789),
    .ce(1'b1),
    .dout(grp_fu_436_p2)
);

FFT_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_real_1_reg_777),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state10)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp3_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd2))) begin
        i1_0_0_reg_349 <= 6'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln38_fu_477_p2 == 1'd0))) begin
        i1_0_0_reg_349 <= add_ln38_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd4))) begin
        i2_0_0_reg_338 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_fu_445_p2 == 1'd0))) begin
        i2_0_0_reg_338 <= add_ln46_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(win_mode_read_read_fu_70_p2 == 8'd1) & ~(win_mode_read_read_fu_70_p2 == 8'd2) & ~(win_mode_read_read_fu_70_p2 == 8'd4) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i3_0_0_reg_371 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln53_fu_541_p2 == 1'd0))) begin
        i3_0_0_reg_371 <= add_ln53_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln59_fu_573_p2 == 1'd0))) begin
        i4_0_0_reg_382 <= add_ln59_fu_603_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i4_0_0_reg_382 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd1))) begin
        i_0_0_reg_360 <= 6'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln30_fu_509_p2 == 1'd0))) begin
        i_0_0_reg_360 <= add_ln30_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln59_reg_708_pp3_iter9_reg == 1'd0))) begin
        complex_M_imag_writ_1_reg_850 <= grp_fu_405_p2;
        complex_M_imag_writ_reg_840 <= grp_fu_397_p2;
        complex_M_real_writ_1_reg_845 <= grp_fu_401_p2;
        complex_M_real_writ_reg_835 <= grp_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln30_reg_671 <= icmp_ln30_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln38_reg_642 <= icmp_ln38_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln46_reg_613 <= icmp_ln46_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln59_reg_708 <= icmp_ln59_fu_573_p2;
        icmp_ln59_reg_708_pp3_iter1_reg <= icmp_ln59_reg_708;
        zext_ln62_1_reg_733_pp3_iter1_reg[4 : 1] <= zext_ln62_1_reg_733[4 : 1];
        zext_ln62_reg_712_pp3_iter1_reg[5 : 0] <= zext_ln62_reg_712[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln59_reg_708_pp3_iter10_reg <= icmp_ln59_reg_708_pp3_iter9_reg;
        icmp_ln59_reg_708_pp3_iter2_reg <= icmp_ln59_reg_708_pp3_iter1_reg;
        icmp_ln59_reg_708_pp3_iter3_reg <= icmp_ln59_reg_708_pp3_iter2_reg;
        icmp_ln59_reg_708_pp3_iter4_reg <= icmp_ln59_reg_708_pp3_iter3_reg;
        icmp_ln59_reg_708_pp3_iter5_reg <= icmp_ln59_reg_708_pp3_iter4_reg;
        icmp_ln59_reg_708_pp3_iter6_reg <= icmp_ln59_reg_708_pp3_iter5_reg;
        icmp_ln59_reg_708_pp3_iter7_reg <= icmp_ln59_reg_708_pp3_iter6_reg;
        icmp_ln59_reg_708_pp3_iter8_reg <= icmp_ln59_reg_708_pp3_iter7_reg;
        icmp_ln59_reg_708_pp3_iter9_reg <= icmp_ln59_reg_708_pp3_iter8_reg;
        zext_ln62_1_reg_733_pp3_iter10_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter9_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter2_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter1_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter3_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter2_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter4_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter3_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter5_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter4_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter6_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter5_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter7_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter6_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter8_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter7_reg[4 : 1];
        zext_ln62_1_reg_733_pp3_iter9_reg[4 : 1] <= zext_ln62_1_reg_733_pp3_iter8_reg[4 : 1];
        zext_ln62_reg_712_pp3_iter10_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter9_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter2_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter1_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter3_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter2_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter4_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter3_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter5_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter4_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter6_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter5_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter7_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter6_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter8_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter7_reg[5 : 0];
        zext_ln62_reg_712_pp3_iter9_reg[5 : 0] <= zext_ln62_reg_712_pp3_iter8_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln59_reg_708 == 1'd0))) begin
        p_r_M_imag_1_reg_783 <= data_IN_M_imag_q1;
        p_r_M_imag_reg_765 <= data_IN_M_imag_q0;
        p_r_M_real_1_reg_777 <= data_IN_M_real_q1;
        p_r_M_real_reg_759 <= data_IN_M_real_q0;
        window_load_1_reg_789 <= window_q1;
        window_load_reg_771 <= window_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln59_reg_708_pp3_iter4_reg == 1'd0))) begin
        tmp_1_i_i1_reg_830 <= grp_fu_440_p2;
        tmp_1_i_i_reg_810 <= grp_fu_422_p2;
        tmp_8_i_i1_reg_820 <= grp_fu_431_p2;
        tmp_8_i_i_reg_800 <= grp_fu_413_p2;
        tmp_i_i1_17_reg_825 <= grp_fu_436_p2;
        tmp_i_i1_reg_815 <= grp_fu_427_p2;
        tmp_i_i_15_reg_805 <= grp_fu_418_p2;
        tmp_i_i_reg_795 <= grp_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln30_fu_509_p2 == 1'd0))) begin
        zext_ln34_1_reg_685[4 : 1] <= zext_ln34_1_fu_530_p1[4 : 1];
        zext_ln34_reg_675[5 : 0] <= zext_ln34_fu_519_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln38_fu_477_p2 == 1'd0))) begin
        zext_ln42_1_reg_656[4 : 1] <= zext_ln42_1_fu_498_p1[4 : 1];
        zext_ln42_reg_646[5 : 0] <= zext_ln42_fu_487_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_fu_445_p2 == 1'd0))) begin
        zext_ln50_1_reg_627[4 : 1] <= zext_ln50_1_fu_466_p1[4 : 1];
        zext_ln50_reg_617[5 : 0] <= zext_ln50_fu_455_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln59_fu_573_p2 == 1'd0))) begin
        zext_ln62_1_reg_733[4 : 1] <= zext_ln62_1_fu_596_p1[4 : 1];
        zext_ln62_reg_712[5 : 0] <= zext_ln62_fu_583_p1[5 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Blackman32_ce0 = 1'b1;
    end else begin
        Blackman32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Blackman32_ce1 = 1'b1;
    end else begin
        Blackman32_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Hamm32_ce0 = 1'b1;
    end else begin
        Hamm32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Hamm32_ce1 = 1'b1;
    end else begin
        Hamm32_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Hann32_ce0 = 1'b1;
    end else begin
        Hann32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Hann32_ce1 = 1'b1;
    end else begin
        Hann32_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_445_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_477_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_509_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_573_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        data_IN_M_imag_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        data_IN_M_imag_ce1 = 1'b1;
    end else begin
        data_IN_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        data_IN_M_real_ce0 = 1'b1;
    end else begin
        data_IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        data_IN_M_real_ce1 = 1'b1;
    end else begin
        data_IN_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        prod_IN_M_imag_2_ce0 = 1'b1;
    end else begin
        prod_IN_M_imag_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        prod_IN_M_imag_2_ce1 = 1'b1;
    end else begin
        prod_IN_M_imag_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1) & (icmp_ln59_reg_708_pp3_iter10_reg == 1'd0))) begin
        prod_IN_M_imag_2_we0 = 1'b1;
    end else begin
        prod_IN_M_imag_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1) & (icmp_ln59_reg_708_pp3_iter10_reg == 1'd0))) begin
        prod_IN_M_imag_2_we1 = 1'b1;
    end else begin
        prod_IN_M_imag_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        prod_IN_M_real_2_ce0 = 1'b1;
    end else begin
        prod_IN_M_real_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        prod_IN_M_real_2_ce1 = 1'b1;
    end else begin
        prod_IN_M_real_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1) & (icmp_ln59_reg_708_pp3_iter10_reg == 1'd0))) begin
        prod_IN_M_real_2_we0 = 1'b1;
    end else begin
        prod_IN_M_real_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1) & (icmp_ln59_reg_708_pp3_iter10_reg == 1'd0))) begin
        prod_IN_M_real_2_we1 = 1'b1;
    end else begin
        prod_IN_M_real_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        window_address0 = zext_ln62_fu_583_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_address0 = zext_ln55_fu_547_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        window_address0 = zext_ln34_reg_675;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        window_address0 = zext_ln42_reg_646;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_address0 = zext_ln50_reg_617;
    end else begin
        window_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        window_address1 = zext_ln62_1_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_address1 = zext_ln55_1_fu_562_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        window_address1 = zext_ln34_1_reg_685;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        window_address1 = zext_ln42_1_reg_656;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_address1 = zext_ln50_1_reg_627;
    end else begin
        window_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        window_ce0 = 1'b1;
    end else begin
        window_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        window_ce1 = 1'b1;
    end else begin
        window_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        window_d0 = 32'd1065353216;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        window_d0 = Hann32_q0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        window_d0 = Hamm32_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_d0 = Blackman32_q0;
    end else begin
        window_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        window_d1 = 32'd1065353216;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        window_d1 = Hann32_q1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        window_d1 = Hamm32_q1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_d1 = Blackman32_q1;
    end else begin
        window_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (icmp_ln53_fu_541_p2 == 1'd0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln30_reg_671 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln38_reg_642 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_613 == 1'd0)))) begin
        window_we0 = 1'b1;
    end else begin
        window_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (icmp_ln53_fu_541_p2 == 1'd0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln30_reg_671 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln38_reg_642 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_613 == 1'd0)))) begin
        window_we1 = 1'b1;
    end else begin
        window_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(win_mode_read_read_fu_70_p2 == 8'd1) & ~(win_mode_read_read_fu_70_p2 == 8'd2) & ~(win_mode_read_read_fu_70_p2 == 8'd4) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (win_mode_read_read_fu_70_p2 == 8'd4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln38_fu_477_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln38_fu_477_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln30_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln30_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln53_fu_541_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln59_fu_573_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter10 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter10 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter11 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln59_fu_573_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Blackman32_address0 = zext_ln50_fu_455_p1;

assign Blackman32_address1 = zext_ln50_1_fu_466_p1;

assign Hamm32_address0 = zext_ln42_fu_487_p1;

assign Hamm32_address1 = zext_ln42_1_fu_498_p1;

assign Hann32_address0 = zext_ln34_fu_519_p1;

assign Hann32_address1 = zext_ln34_1_fu_530_p1;

assign add_ln30_fu_535_p2 = (6'd2 + i_0_0_reg_360);

assign add_ln38_fu_503_p2 = (6'd2 + i1_0_0_reg_349);

assign add_ln46_fu_471_p2 = (6'd2 + i2_0_0_reg_338);

assign add_ln53_fu_567_p2 = (6'd2 + i3_0_0_reg_371);

assign add_ln59_fu_603_p2 = (6'd2 + i4_0_0_reg_382);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign data_IN_M_imag_address0 = zext_ln62_fu_583_p1;

assign data_IN_M_imag_address1 = zext_ln62_1_fu_596_p1;

assign data_IN_M_real_address0 = zext_ln62_fu_583_p1;

assign data_IN_M_real_address1 = zext_ln62_1_fu_596_p1;

assign empty_11_fu_515_p1 = i_0_0_reg_360[4:0];

assign empty_14_fu_579_p1 = i4_0_0_reg_382[4:0];

assign empty_3_fu_552_p1 = i3_0_0_reg_371[4:0];

assign empty_5_fu_451_p1 = i2_0_0_reg_338[4:0];

assign empty_8_fu_483_p1 = i1_0_0_reg_349[4:0];

assign icmp_ln30_fu_509_p2 = ((i_0_0_reg_360 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_477_p2 = ((i1_0_0_reg_349 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_445_p2 = ((i2_0_0_reg_338 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_541_p2 = ((i3_0_0_reg_371 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_573_p2 = ((i4_0_0_reg_382 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln30_fu_524_p2 = (empty_11_fu_515_p1 | 5'd1);

assign or_ln38_fu_492_p2 = (empty_8_fu_483_p1 | 5'd1);

assign or_ln46_fu_460_p2 = (empty_5_fu_451_p1 | 5'd1);

assign or_ln53_fu_556_p2 = (empty_3_fu_552_p1 | 5'd1);

assign or_ln59_fu_590_p2 = (empty_14_fu_579_p1 | 5'd1);

assign prod_IN_M_imag_2_address0 = zext_ln62_reg_712_pp3_iter10_reg;

assign prod_IN_M_imag_2_address1 = zext_ln62_1_reg_733_pp3_iter10_reg;

assign prod_IN_M_imag_2_d0 = complex_M_imag_writ_reg_840;

assign prod_IN_M_imag_2_d1 = complex_M_imag_writ_1_reg_850;

assign prod_IN_M_real_2_address0 = zext_ln62_reg_712_pp3_iter10_reg;

assign prod_IN_M_real_2_address1 = zext_ln62_1_reg_733_pp3_iter10_reg;

assign prod_IN_M_real_2_d0 = complex_M_real_writ_reg_835;

assign prod_IN_M_real_2_d1 = complex_M_real_writ_1_reg_845;

assign win_mode_read_read_fu_70_p2 = win_mode;

assign zext_ln34_1_fu_530_p1 = or_ln30_fu_524_p2;

assign zext_ln34_fu_519_p1 = i_0_0_reg_360;

assign zext_ln42_1_fu_498_p1 = or_ln38_fu_492_p2;

assign zext_ln42_fu_487_p1 = i1_0_0_reg_349;

assign zext_ln50_1_fu_466_p1 = or_ln46_fu_460_p2;

assign zext_ln50_fu_455_p1 = i2_0_0_reg_338;

assign zext_ln55_1_fu_562_p1 = or_ln53_fu_556_p2;

assign zext_ln55_fu_547_p1 = i3_0_0_reg_371;

assign zext_ln62_1_fu_596_p1 = or_ln59_fu_590_p2;

assign zext_ln62_fu_583_p1 = i4_0_0_reg_382;

always @ (posedge ap_clk) begin
    zext_ln50_reg_617[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln50_1_reg_627[0] <= 1'b1;
    zext_ln50_1_reg_627[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln42_reg_646[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln42_1_reg_656[0] <= 1'b1;
    zext_ln42_1_reg_656[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln34_reg_675[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln34_1_reg_685[0] <= 1'b1;
    zext_ln34_1_reg_685[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter9_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_reg_712_pp3_iter10_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733[0] <= 1'b1;
    zext_ln62_1_reg_733[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter1_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter2_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter3_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter4_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter5_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter6_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter7_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter7_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter8_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter8_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter9_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter9_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln62_1_reg_733_pp3_iter10_reg[0] <= 1'b1;
    zext_ln62_1_reg_733_pp3_iter10_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //mult_window
